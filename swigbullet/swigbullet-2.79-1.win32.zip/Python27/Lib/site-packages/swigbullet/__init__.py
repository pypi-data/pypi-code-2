# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('___init__', [dirname(__file__)])
        except ImportError:
            import ___init__
            return ___init__
        if fp is not None:
            try:
                _mod = imp.load_module('___init__', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    ___init__ = swig_import_helper()
    del swig_import_helper
else:
    import ___init__
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


SIMD_EPSILON=0.0000001192092896;

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = ___init__.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return ___init__.SwigPyIterator_value(self)
    def incr(self, n = 1): return ___init__.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return ___init__.SwigPyIterator_decr(self, n)
    def distance(self, *args): return ___init__.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return ___init__.SwigPyIterator_equal(self, *args)
    def copy(self): return ___init__.SwigPyIterator_copy(self)
    def next(self): return ___init__.SwigPyIterator_next(self)
    def __next__(self): return ___init__.SwigPyIterator___next__(self)
    def previous(self): return ___init__.SwigPyIterator_previous(self)
    def advance(self, *args): return ___init__.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return ___init__.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return ___init__.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return ___init__.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return ___init__.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return ___init__.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return ___init__.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = ___init__.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

BT_BULLET_VERSION = ___init__.BT_BULLET_VERSION

def btGetVersion():
  return ___init__.btGetVersion()
btGetVersion = ___init__.btGetVersion
BT_LARGE_FLOAT = ___init__.BT_LARGE_FLOAT

def btSqrt(*args):
  return ___init__.btSqrt(*args)
btSqrt = ___init__.btSqrt

def btFabs(*args):
  return ___init__.btFabs(*args)
btFabs = ___init__.btFabs

def btCos(*args):
  return ___init__.btCos(*args)
btCos = ___init__.btCos

def btSin(*args):
  return ___init__.btSin(*args)
btSin = ___init__.btSin

def btTan(*args):
  return ___init__.btTan(*args)
btTan = ___init__.btTan

def btAcos(*args):
  return ___init__.btAcos(*args)
btAcos = ___init__.btAcos

def btAsin(*args):
  return ___init__.btAsin(*args)
btAsin = ___init__.btAsin

def btAtan(*args):
  return ___init__.btAtan(*args)
btAtan = ___init__.btAtan

def btAtan2(*args):
  return ___init__.btAtan2(*args)
btAtan2 = ___init__.btAtan2

def btExp(*args):
  return ___init__.btExp(*args)
btExp = ___init__.btExp

def btLog(*args):
  return ___init__.btLog(*args)
btLog = ___init__.btLog

def btPow(*args):
  return ___init__.btPow(*args)
btPow = ___init__.btPow

def btFmod(*args):
  return ___init__.btFmod(*args)
btFmod = ___init__.btFmod

def btAtan2Fast(*args):
  return ___init__.btAtan2Fast(*args)
btAtan2Fast = ___init__.btAtan2Fast

def btFuzzyZero(*args):
  return ___init__.btFuzzyZero(*args)
btFuzzyZero = ___init__.btFuzzyZero

def btEqual(*args):
  return ___init__.btEqual(*args)
btEqual = ___init__.btEqual

def btGreaterEqual(*args):
  return ___init__.btGreaterEqual(*args)
btGreaterEqual = ___init__.btGreaterEqual

def btIsNegative(*args):
  return ___init__.btIsNegative(*args)
btIsNegative = ___init__.btIsNegative

def btRadians(*args):
  return ___init__.btRadians(*args)
btRadians = ___init__.btRadians

def btDegrees(*args):
  return ___init__.btDegrees(*args)
btDegrees = ___init__.btDegrees

def btFsel(*args):
  return ___init__.btFsel(*args)
btFsel = ___init__.btFsel

def btMachineIsLittleEndian():
  return ___init__.btMachineIsLittleEndian()
btMachineIsLittleEndian = ___init__.btMachineIsLittleEndian

def btSwapEndianFloat(*args):
  return ___init__.btSwapEndianFloat(*args)
btSwapEndianFloat = ___init__.btSwapEndianFloat

def btUnswapEndianFloat(*args):
  return ___init__.btUnswapEndianFloat(*args)
btUnswapEndianFloat = ___init__.btUnswapEndianFloat

def btSwapEndianDouble(*args):
  return ___init__.btSwapEndianDouble(*args)
btSwapEndianDouble = ___init__.btSwapEndianDouble

def btUnswapEndianDouble(*args):
  return ___init__.btUnswapEndianDouble(*args)
btUnswapEndianDouble = ___init__.btUnswapEndianDouble

def btNormalizeAngle(*args):
  return ___init__.btNormalizeAngle(*args)
btNormalizeAngle = ___init__.btNormalizeAngle
class btTypedObject(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btTypedObject, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btTypedObject, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = ___init__.new_btTypedObject(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["m_objectType"] = ___init__.btTypedObject_m_objectType_set
    __swig_getmethods__["m_objectType"] = ___init__.btTypedObject_m_objectType_get
    if _newclass:m_objectType = _swig_property(___init__.btTypedObject_m_objectType_get, ___init__.btTypedObject_m_objectType_set)
    def getObjectType(self): return ___init__.btTypedObject_getObjectType(self)
    __swig_destroy__ = ___init__.delete_btTypedObject
    __del__ = lambda self : None;
btTypedObject_swigregister = ___init__.btTypedObject_swigregister
btTypedObject_swigregister(btTypedObject)

def btSelect(*args):
  return ___init__.btSelect(*args)
btSelect = ___init__.btSelect

def btSwapEndian(*args):
  return ___init__.btSwapEndian(*args)
btSwapEndian = ___init__.btSwapEndian

btVector3DataName = ___init__.btVector3DataName
class btVector3(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btVector3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btVector3, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_floats"] = ___init__.btVector3_m_floats_set
    __swig_getmethods__["m_floats"] = ___init__.btVector3_m_floats_get
    if _newclass:m_floats = _swig_property(___init__.btVector3_m_floats_get, ___init__.btVector3_m_floats_set)
    def __init__(self, *args): 
        this = ___init__.new_btVector3(*args)
        try: self.this.append(this)
        except: self.this = this
    def __iadd__(self, *args): return ___init__.btVector3___iadd__(self, *args)
    def __isub__(self, *args): return ___init__.btVector3___isub__(self, *args)
    def __idiv__(self, *args): return ___init__.btVector3___idiv__(self, *args)
    def dot(self, *args): return ___init__.btVector3_dot(self, *args)
    def length2(self): return ___init__.btVector3_length2(self)
    def length(self): return ___init__.btVector3_length(self)
    def distance2(self, *args): return ___init__.btVector3_distance2(self, *args)
    def distance(self, *args): return ___init__.btVector3_distance(self, *args)
    def safeNormalize(self): return ___init__.btVector3_safeNormalize(self)
    def normalize(self): return ___init__.btVector3_normalize(self)
    def normalized(self): return ___init__.btVector3_normalized(self)
    def rotate(self, *args): return ___init__.btVector3_rotate(self, *args)
    def angle(self, *args): return ___init__.btVector3_angle(self, *args)
    def absolute(self): return ___init__.btVector3_absolute(self)
    def cross(self, *args): return ___init__.btVector3_cross(self, *args)
    def triple(self, *args): return ___init__.btVector3_triple(self, *args)
    def minAxis(self): return ___init__.btVector3_minAxis(self)
    def maxAxis(self): return ___init__.btVector3_maxAxis(self)
    def furthestAxis(self): return ___init__.btVector3_furthestAxis(self)
    def closestAxis(self): return ___init__.btVector3_closestAxis(self)
    def setInterpolate3(self, *args): return ___init__.btVector3_setInterpolate3(self, *args)
    def lerp(self, *args): return ___init__.btVector3_lerp(self, *args)
    def __imul__(self, *args): return ___init__.btVector3___imul__(self, *args)
    def getX(self): return ___init__.btVector3_getX(self)
    def getY(self): return ___init__.btVector3_getY(self)
    def getZ(self): return ___init__.btVector3_getZ(self)
    def setX(self, *args): return ___init__.btVector3_setX(self, *args)
    def setY(self, *args): return ___init__.btVector3_setY(self, *args)
    def setZ(self, *args): return ___init__.btVector3_setZ(self, *args)
    def setW(self, *args): return ___init__.btVector3_setW(self, *args)
    def x(self): return ___init__.btVector3_x(self)
    def y(self): return ___init__.btVector3_y(self)
    def z(self): return ___init__.btVector3_z(self)
    def w(self): return ___init__.btVector3_w(self)
    def __eq__(self, *args): return ___init__.btVector3___eq__(self, *args)
    def __ne__(self, *args): return ___init__.btVector3___ne__(self, *args)
    def setMax(self, *args): return ___init__.btVector3_setMax(self, *args)
    def setMin(self, *args): return ___init__.btVector3_setMin(self, *args)
    def setValue(self, *args): return ___init__.btVector3_setValue(self, *args)
    def getSkewSymmetricMatrix(self, *args): return ___init__.btVector3_getSkewSymmetricMatrix(self, *args)
    def setZero(self): return ___init__.btVector3_setZero(self)
    def isZero(self): return ___init__.btVector3_isZero(self)
    def fuzzyZero(self): return ___init__.btVector3_fuzzyZero(self)
    def serialize(self, *args): return ___init__.btVector3_serialize(self, *args)
    def deSerialize(self, *args): return ___init__.btVector3_deSerialize(self, *args)
    def serializeFloat(self, *args): return ___init__.btVector3_serializeFloat(self, *args)
    def deSerializeFloat(self, *args): return ___init__.btVector3_deSerializeFloat(self, *args)
    def serializeDouble(self, *args): return ___init__.btVector3_serializeDouble(self, *args)
    def deSerializeDouble(self, *args): return ___init__.btVector3_deSerializeDouble(self, *args)
    def __add__(self, *args): return ___init__.btVector3___add__(self, *args)
    def __sub__(self, *args): return ___init__.btVector3___sub__(self, *args)
    def __mul__(self, *args): return ___init__.btVector3___mul__(self, *args)
    def __getitem__(self, k):
        if k==0:
            return self.getX()
        elif k==1:
            return self.getY()
        elif k==2:
            return self.getZ()
        else:
            raise KeyError()

    def __setitem__(self, k, v):
        if k==0:
            self.setX(v)
        elif k==1:
            self.setY(v)
        elif k==2:
            self.setZ(v)
        else:
            raise KeyError()

    __swig_destroy__ = ___init__.delete_btVector3
    __del__ = lambda self : None;
btVector3_swigregister = ___init__.btVector3_swigregister
btVector3_swigregister(btVector3)


def btDot(*args):
  return ___init__.btDot(*args)
btDot = ___init__.btDot

def btDistance2(*args):
  return ___init__.btDistance2(*args)
btDistance2 = ___init__.btDistance2

def btDistance(*args):
  return ___init__.btDistance(*args)
btDistance = ___init__.btDistance

def btAngle(*args):
  return ___init__.btAngle(*args)
btAngle = ___init__.btAngle

def btCross(*args):
  return ___init__.btCross(*args)
btCross = ___init__.btCross

def btTriple(*args):
  return ___init__.btTriple(*args)
btTriple = ___init__.btTriple

def lerp(*args):
  return ___init__.lerp(*args)
lerp = ___init__.lerp
class btVector4(btVector3):
    __swig_setmethods__ = {}
    for _s in [btVector3]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btVector4, name, value)
    __swig_getmethods__ = {}
    for _s in [btVector3]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, btVector4, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = ___init__.new_btVector4(*args)
        try: self.this.append(this)
        except: self.this = this
    def absolute4(self): return ___init__.btVector4_absolute4(self)
    def getW(self): return ___init__.btVector4_getW(self)
    def maxAxis4(self): return ___init__.btVector4_maxAxis4(self)
    def minAxis4(self): return ___init__.btVector4_minAxis4(self)
    def closestAxis4(self): return ___init__.btVector4_closestAxis4(self)
    def setValue(self, *args): return ___init__.btVector4_setValue(self, *args)
    __swig_destroy__ = ___init__.delete_btVector4
    __del__ = lambda self : None;
btVector4_swigregister = ___init__.btVector4_swigregister
btVector4_swigregister(btVector4)


def btSwapScalarEndian(*args):
  return ___init__.btSwapScalarEndian(*args)
btSwapScalarEndian = ___init__.btSwapScalarEndian

def btSwapVector3Endian(*args):
  return ___init__.btSwapVector3Endian(*args)
btSwapVector3Endian = ___init__.btSwapVector3Endian

def btUnSwapVector3Endian(*args):
  return ___init__.btUnSwapVector3Endian(*args)
btUnSwapVector3Endian = ___init__.btUnSwapVector3Endian
class btVector3FloatData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btVector3FloatData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btVector3FloatData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_floats"] = ___init__.btVector3FloatData_m_floats_set
    __swig_getmethods__["m_floats"] = ___init__.btVector3FloatData_m_floats_get
    if _newclass:m_floats = _swig_property(___init__.btVector3FloatData_m_floats_get, ___init__.btVector3FloatData_m_floats_set)
    def __init__(self): 
        this = ___init__.new_btVector3FloatData()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = ___init__.delete_btVector3FloatData
    __del__ = lambda self : None;
btVector3FloatData_swigregister = ___init__.btVector3FloatData_swigregister
btVector3FloatData_swigregister(btVector3FloatData)

class btVector3DoubleData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btVector3DoubleData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btVector3DoubleData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_floats"] = ___init__.btVector3DoubleData_m_floats_set
    __swig_getmethods__["m_floats"] = ___init__.btVector3DoubleData_m_floats_get
    if _newclass:m_floats = _swig_property(___init__.btVector3DoubleData_m_floats_get, ___init__.btVector3DoubleData_m_floats_set)
    def __init__(self): 
        this = ___init__.new_btVector3DoubleData()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = ___init__.delete_btVector3DoubleData
    __del__ = lambda self : None;
btVector3DoubleData_swigregister = ___init__.btVector3DoubleData_swigregister
btVector3DoubleData_swigregister(btVector3DoubleData)

class btQuaternion(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btQuaternion, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btQuaternion, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = ___init__.new_btQuaternion(*args)
        try: self.this.append(this)
        except: self.this = this
    def setRotation(self, *args): return ___init__.btQuaternion_setRotation(self, *args)
    def setEuler(self, *args): return ___init__.btQuaternion_setEuler(self, *args)
    def setEulerZYX(self, *args): return ___init__.btQuaternion_setEulerZYX(self, *args)
    def __iadd__(self, *args): return ___init__.btQuaternion___iadd__(self, *args)
    def __isub__(self, *args): return ___init__.btQuaternion___isub__(self, *args)
    def __imul__(self, *args): return ___init__.btQuaternion___imul__(self, *args)
    def dot(self, *args): return ___init__.btQuaternion_dot(self, *args)
    def length2(self): return ___init__.btQuaternion_length2(self)
    def length(self): return ___init__.btQuaternion_length(self)
    def normalize(self): return ___init__.btQuaternion_normalize(self)
    def __mul__(self, *args): return ___init__.btQuaternion___mul__(self, *args)
    def __div__(self, *args): return ___init__.btQuaternion___div__(self, *args)
    def __idiv__(self, *args): return ___init__.btQuaternion___idiv__(self, *args)
    def normalized(self): return ___init__.btQuaternion_normalized(self)
    def angle(self, *args): return ___init__.btQuaternion_angle(self, *args)
    def getAngle(self): return ___init__.btQuaternion_getAngle(self)
    def getAxis(self): return ___init__.btQuaternion_getAxis(self)
    def inverse(self): return ___init__.btQuaternion_inverse(self)
    def __add__(self, *args): return ___init__.btQuaternion___add__(self, *args)
    def __sub__(self, *args): return ___init__.btQuaternion___sub__(self, *args)
    def __neg__(self): return ___init__.btQuaternion___neg__(self)
    def farthest(self, *args): return ___init__.btQuaternion_farthest(self, *args)
    def nearest(self, *args): return ___init__.btQuaternion_nearest(self, *args)
    def slerp(self, *args): return ___init__.btQuaternion_slerp(self, *args)
    __swig_getmethods__["getIdentity"] = lambda x: ___init__.btQuaternion_getIdentity
    if _newclass:getIdentity = staticmethod(___init__.btQuaternion_getIdentity)
    def getW(self): return ___init__.btQuaternion_getW(self)
    __swig_destroy__ = ___init__.delete_btQuaternion
    __del__ = lambda self : None;
btQuaternion_swigregister = ___init__.btQuaternion_swigregister
btQuaternion_swigregister(btQuaternion)

def btQuaternion_getIdentity():
  return ___init__.btQuaternion_getIdentity()
btQuaternion_getIdentity = ___init__.btQuaternion_getIdentity


def dot(*args):
  return ___init__.dot(*args)
dot = ___init__.dot

def length(*args):
  return ___init__.length(*args)
length = ___init__.length

def angle(*args):
  return ___init__.angle(*args)
angle = ___init__.angle

def inverse(*args):
  return ___init__.inverse(*args)
inverse = ___init__.inverse

def slerp(*args):
  return ___init__.slerp(*args)
slerp = ___init__.slerp

def quatRotate(*args):
  return ___init__.quatRotate(*args)
quatRotate = ___init__.quatRotate

def shortestArcQuat(*args):
  return ___init__.shortestArcQuat(*args)
shortestArcQuat = ___init__.shortestArcQuat

def shortestArcQuatNormalize2(*args):
  return ___init__.shortestArcQuatNormalize2(*args)
shortestArcQuatNormalize2 = ___init__.shortestArcQuatNormalize2
class btTransform(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btTransform, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btTransform, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = ___init__.new_btTransform(*args)
        try: self.this.append(this)
        except: self.this = this
    def mult(self, *args): return ___init__.btTransform_mult(self, *args)
    def __call__(self, *args): return ___init__.btTransform___call__(self, *args)
    def getBasis(self, *args): return ___init__.btTransform_getBasis(self, *args)
    def getOrigin(self, *args): return ___init__.btTransform_getOrigin(self, *args)
    def getRotation(self): return ___init__.btTransform_getRotation(self)
    def setFromOpenGLMatrix(self, *args): return ___init__.btTransform_setFromOpenGLMatrix(self, *args)
    def getOpenGLMatrix(self): return ___init__.btTransform_getOpenGLMatrix(self)
    def setOrigin(self, *args): return ___init__.btTransform_setOrigin(self, *args)
    def invXform(self, *args): return ___init__.btTransform_invXform(self, *args)
    def setBasis(self, *args): return ___init__.btTransform_setBasis(self, *args)
    def setRotation(self, *args): return ___init__.btTransform_setRotation(self, *args)
    def setIdentity(self): return ___init__.btTransform_setIdentity(self)
    def __imul__(self, *args): return ___init__.btTransform___imul__(self, *args)
    def inverse(self): return ___init__.btTransform_inverse(self)
    def inverseTimes(self, *args): return ___init__.btTransform_inverseTimes(self, *args)
    def __mul__(self, *args): return ___init__.btTransform___mul__(self, *args)
    __swig_getmethods__["getIdentity"] = lambda x: ___init__.btTransform_getIdentity
    if _newclass:getIdentity = staticmethod(___init__.btTransform_getIdentity)
    def serialize(self, *args): return ___init__.btTransform_serialize(self, *args)
    def serializeFloat(self, *args): return ___init__.btTransform_serializeFloat(self, *args)
    def deSerialize(self, *args): return ___init__.btTransform_deSerialize(self, *args)
    def deSerializeDouble(self, *args): return ___init__.btTransform_deSerializeDouble(self, *args)
    def deSerializeFloat(self, *args): return ___init__.btTransform_deSerializeFloat(self, *args)
    def apply(self, *args): return ___init__.btTransform_apply(self, *args)
    __swig_destroy__ = ___init__.delete_btTransform
    __del__ = lambda self : None;
btTransform_swigregister = ___init__.btTransform_swigregister
btTransform_swigregister(btTransform)

def btTransform_getIdentity():
  return ___init__.btTransform_getIdentity()
btTransform_getIdentity = ___init__.btTransform_getIdentity

class btTransformFloatData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btTransformFloatData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btTransformFloatData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_basis"] = ___init__.btTransformFloatData_m_basis_set
    __swig_getmethods__["m_basis"] = ___init__.btTransformFloatData_m_basis_get
    if _newclass:m_basis = _swig_property(___init__.btTransformFloatData_m_basis_get, ___init__.btTransformFloatData_m_basis_set)
    __swig_setmethods__["m_origin"] = ___init__.btTransformFloatData_m_origin_set
    __swig_getmethods__["m_origin"] = ___init__.btTransformFloatData_m_origin_get
    if _newclass:m_origin = _swig_property(___init__.btTransformFloatData_m_origin_get, ___init__.btTransformFloatData_m_origin_set)
    def __init__(self): 
        this = ___init__.new_btTransformFloatData()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = ___init__.delete_btTransformFloatData
    __del__ = lambda self : None;
btTransformFloatData_swigregister = ___init__.btTransformFloatData_swigregister
btTransformFloatData_swigregister(btTransformFloatData)

class btTransformDoubleData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btTransformDoubleData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btTransformDoubleData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_basis"] = ___init__.btTransformDoubleData_m_basis_set
    __swig_getmethods__["m_basis"] = ___init__.btTransformDoubleData_m_basis_get
    if _newclass:m_basis = _swig_property(___init__.btTransformDoubleData_m_basis_get, ___init__.btTransformDoubleData_m_basis_set)
    __swig_setmethods__["m_origin"] = ___init__.btTransformDoubleData_m_origin_set
    __swig_getmethods__["m_origin"] = ___init__.btTransformDoubleData_m_origin_get
    if _newclass:m_origin = _swig_property(___init__.btTransformDoubleData_m_origin_get, ___init__.btTransformDoubleData_m_origin_set)
    def __init__(self): 
        this = ___init__.new_btTransformDoubleData()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = ___init__.delete_btTransformDoubleData
    __del__ = lambda self : None;
btTransformDoubleData_swigregister = ___init__.btTransformDoubleData_swigregister
btTransformDoubleData_swigregister(btTransformDoubleData)

class btMatrix3x3(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btMatrix3x3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btMatrix3x3, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = ___init__.new_btMatrix3x3(*args)
        try: self.this.append(this)
        except: self.this = this
    def getColumn(self, *args): return ___init__.btMatrix3x3_getColumn(self, *args)
    def getRow(self, *args): return ___init__.btMatrix3x3_getRow(self, *args)
    def __imul__(self, *args): return ___init__.btMatrix3x3___imul__(self, *args)
    def __iadd__(self, *args): return ___init__.btMatrix3x3___iadd__(self, *args)
    def __isub__(self, *args): return ___init__.btMatrix3x3___isub__(self, *args)
    def setFromOpenGLSubMatrix(self, *args): return ___init__.btMatrix3x3_setFromOpenGLSubMatrix(self, *args)
    def setValue(self, *args): return ___init__.btMatrix3x3_setValue(self, *args)
    def setRotation(self, *args): return ___init__.btMatrix3x3_setRotation(self, *args)
    def setEulerYPR(self, *args): return ___init__.btMatrix3x3_setEulerYPR(self, *args)
    def setEulerZYX(self, *args): return ___init__.btMatrix3x3_setEulerZYX(self, *args)
    def setIdentity(self): return ___init__.btMatrix3x3_setIdentity(self)
    __swig_getmethods__["getIdentity"] = lambda x: ___init__.btMatrix3x3_getIdentity
    if _newclass:getIdentity = staticmethod(___init__.btMatrix3x3_getIdentity)
    def getOpenGLSubMatrix(self): return ___init__.btMatrix3x3_getOpenGLSubMatrix(self)
    def getRotation(self, *args): return ___init__.btMatrix3x3_getRotation(self, *args)
    def getEulerYPR(self, *args): return ___init__.btMatrix3x3_getEulerYPR(self, *args)
    def getEulerZYX(self, *args): return ___init__.btMatrix3x3_getEulerZYX(self, *args)
    def scaled(self, *args): return ___init__.btMatrix3x3_scaled(self, *args)
    def determinant(self): return ___init__.btMatrix3x3_determinant(self)
    def adjoint(self): return ___init__.btMatrix3x3_adjoint(self)
    def absolute(self): return ___init__.btMatrix3x3_absolute(self)
    def transpose(self): return ___init__.btMatrix3x3_transpose(self)
    def inverse(self): return ___init__.btMatrix3x3_inverse(self)
    def transposeTimes(self, *args): return ___init__.btMatrix3x3_transposeTimes(self, *args)
    def timesTranspose(self, *args): return ___init__.btMatrix3x3_timesTranspose(self, *args)
    def tdotx(self, *args): return ___init__.btMatrix3x3_tdotx(self, *args)
    def tdoty(self, *args): return ___init__.btMatrix3x3_tdoty(self, *args)
    def tdotz(self, *args): return ___init__.btMatrix3x3_tdotz(self, *args)
    def diagonalize(self, *args): return ___init__.btMatrix3x3_diagonalize(self, *args)
    def cofac(self, *args): return ___init__.btMatrix3x3_cofac(self, *args)
    def serialize(self, *args): return ___init__.btMatrix3x3_serialize(self, *args)
    def serializeFloat(self, *args): return ___init__.btMatrix3x3_serializeFloat(self, *args)
    def deSerialize(self, *args): return ___init__.btMatrix3x3_deSerialize(self, *args)
    def deSerializeFloat(self, *args): return ___init__.btMatrix3x3_deSerializeFloat(self, *args)
    def deSerializeDouble(self, *args): return ___init__.btMatrix3x3_deSerializeDouble(self, *args)
    def apply(self, *args): return ___init__.btMatrix3x3_apply(self, *args)
    def __mul__(self, *args): return ___init__.btMatrix3x3___mul__(self, *args)
    __swig_destroy__ = ___init__.delete_btMatrix3x3
    __del__ = lambda self : None;
btMatrix3x3_swigregister = ___init__.btMatrix3x3_swigregister
btMatrix3x3_swigregister(btMatrix3x3)

def btMatrix3x3_getIdentity():
  return ___init__.btMatrix3x3_getIdentity()
btMatrix3x3_getIdentity = ___init__.btMatrix3x3_getIdentity

class btMatrix3x3FloatData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btMatrix3x3FloatData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btMatrix3x3FloatData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_el"] = ___init__.btMatrix3x3FloatData_m_el_set
    __swig_getmethods__["m_el"] = ___init__.btMatrix3x3FloatData_m_el_get
    if _newclass:m_el = _swig_property(___init__.btMatrix3x3FloatData_m_el_get, ___init__.btMatrix3x3FloatData_m_el_set)
    def __init__(self): 
        this = ___init__.new_btMatrix3x3FloatData()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = ___init__.delete_btMatrix3x3FloatData
    __del__ = lambda self : None;
btMatrix3x3FloatData_swigregister = ___init__.btMatrix3x3FloatData_swigregister
btMatrix3x3FloatData_swigregister(btMatrix3x3FloatData)

class btMatrix3x3DoubleData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btMatrix3x3DoubleData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btMatrix3x3DoubleData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_el"] = ___init__.btMatrix3x3DoubleData_m_el_set
    __swig_getmethods__["m_el"] = ___init__.btMatrix3x3DoubleData_m_el_get
    if _newclass:m_el = _swig_property(___init__.btMatrix3x3DoubleData_m_el_get, ___init__.btMatrix3x3DoubleData_m_el_set)
    def __init__(self): 
        this = ___init__.new_btMatrix3x3DoubleData()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = ___init__.delete_btMatrix3x3DoubleData
    __del__ = lambda self : None;
btMatrix3x3DoubleData_swigregister = ___init__.btMatrix3x3DoubleData_swigregister
btMatrix3x3DoubleData_swigregister(btMatrix3x3DoubleData)

class btMotionState(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btMotionState, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btMotionState, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = ___init__.delete_btMotionState
    __del__ = lambda self : None;
    def getWorldTransform(self, *args): return ___init__.btMotionState_getWorldTransform(self, *args)
    def setWorldTransform(self, *args): return ___init__.btMotionState_setWorldTransform(self, *args)
btMotionState_swigregister = ___init__.btMotionState_swigregister
btMotionState_swigregister(btMotionState)

BT_USE_PLACEMENT_NEW = ___init__.BT_USE_PLACEMENT_NEW
class btDefaultMotionState(btMotionState):
    __swig_setmethods__ = {}
    for _s in [btMotionState]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btDefaultMotionState, name, value)
    __swig_getmethods__ = {}
    for _s in [btMotionState]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, btDefaultMotionState, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_graphicsWorldTrans"] = ___init__.btDefaultMotionState_m_graphicsWorldTrans_set
    __swig_getmethods__["m_graphicsWorldTrans"] = ___init__.btDefaultMotionState_m_graphicsWorldTrans_get
    if _newclass:m_graphicsWorldTrans = _swig_property(___init__.btDefaultMotionState_m_graphicsWorldTrans_get, ___init__.btDefaultMotionState_m_graphicsWorldTrans_set)
    __swig_setmethods__["m_centerOfMassOffset"] = ___init__.btDefaultMotionState_m_centerOfMassOffset_set
    __swig_getmethods__["m_centerOfMassOffset"] = ___init__.btDefaultMotionState_m_centerOfMassOffset_get
    if _newclass:m_centerOfMassOffset = _swig_property(___init__.btDefaultMotionState_m_centerOfMassOffset_get, ___init__.btDefaultMotionState_m_centerOfMassOffset_set)
    __swig_setmethods__["m_startWorldTrans"] = ___init__.btDefaultMotionState_m_startWorldTrans_set
    __swig_getmethods__["m_startWorldTrans"] = ___init__.btDefaultMotionState_m_startWorldTrans_get
    if _newclass:m_startWorldTrans = _swig_property(___init__.btDefaultMotionState_m_startWorldTrans_get, ___init__.btDefaultMotionState_m_startWorldTrans_set)
    __swig_setmethods__["m_userPointer"] = ___init__.btDefaultMotionState_m_userPointer_set
    __swig_getmethods__["m_userPointer"] = ___init__.btDefaultMotionState_m_userPointer_get
    if _newclass:m_userPointer = _swig_property(___init__.btDefaultMotionState_m_userPointer_get, ___init__.btDefaultMotionState_m_userPointer_set)
    def __init__(self, *args): 
        this = ___init__.new_btDefaultMotionState(*args)
        try: self.this.append(this)
        except: self.this = this
    def getWorldTransform(self, *args): return ___init__.btDefaultMotionState_getWorldTransform(self, *args)
    def setWorldTransform(self, *args): return ___init__.btDefaultMotionState_setWorldTransform(self, *args)
    __swig_getmethods__["downcast"] = lambda x: ___init__.btDefaultMotionState_downcast
    if _newclass:downcast = staticmethod(___init__.btDefaultMotionState_downcast)
    __swig_destroy__ = ___init__.delete_btDefaultMotionState
    __del__ = lambda self : None;
btDefaultMotionState_swigregister = ___init__.btDefaultMotionState_swigregister
btDefaultMotionState_swigregister(btDefaultMotionState)

def btDefaultMotionState_downcast(*args):
  return ___init__.btDefaultMotionState_downcast(*args)
btDefaultMotionState_downcast = ___init__.btDefaultMotionState_downcast

class btIDebugDraw(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btIDebugDraw, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btIDebugDraw, name)
    __repr__ = _swig_repr
    DBG_NoDebug = ___init__.btIDebugDraw_DBG_NoDebug
    DBG_DrawWireframe = ___init__.btIDebugDraw_DBG_DrawWireframe
    DBG_DrawAabb = ___init__.btIDebugDraw_DBG_DrawAabb
    DBG_DrawFeaturesText = ___init__.btIDebugDraw_DBG_DrawFeaturesText
    DBG_DrawContactPoints = ___init__.btIDebugDraw_DBG_DrawContactPoints
    DBG_NoDeactivation = ___init__.btIDebugDraw_DBG_NoDeactivation
    DBG_NoHelpText = ___init__.btIDebugDraw_DBG_NoHelpText
    DBG_DrawText = ___init__.btIDebugDraw_DBG_DrawText
    DBG_ProfileTimings = ___init__.btIDebugDraw_DBG_ProfileTimings
    DBG_EnableSatComparison = ___init__.btIDebugDraw_DBG_EnableSatComparison
    DBG_DisableBulletLCP = ___init__.btIDebugDraw_DBG_DisableBulletLCP
    DBG_EnableCCD = ___init__.btIDebugDraw_DBG_EnableCCD
    DBG_DrawConstraints = ___init__.btIDebugDraw_DBG_DrawConstraints
    DBG_DrawConstraintLimits = ___init__.btIDebugDraw_DBG_DrawConstraintLimits
    DBG_FastWireframe = ___init__.btIDebugDraw_DBG_FastWireframe
    DBG_MAX_DEBUG_DRAW_MODE = ___init__.btIDebugDraw_DBG_MAX_DEBUG_DRAW_MODE
    __swig_destroy__ = ___init__.delete_btIDebugDraw
    __del__ = lambda self : None;
    def drawLine(self, *args): return ___init__.btIDebugDraw_drawLine(self, *args)
    def drawSphere(self, *args): return ___init__.btIDebugDraw_drawSphere(self, *args)
    def drawTriangle(self, *args): return ___init__.btIDebugDraw_drawTriangle(self, *args)
    def drawContactPoint(self, *args): return ___init__.btIDebugDraw_drawContactPoint(self, *args)
    def reportErrorWarning(self, *args): return ___init__.btIDebugDraw_reportErrorWarning(self, *args)
    def draw3dText(self, *args): return ___init__.btIDebugDraw_draw3dText(self, *args)
    def setDebugMode(self, *args): return ___init__.btIDebugDraw_setDebugMode(self, *args)
    def getDebugMode(self): return ___init__.btIDebugDraw_getDebugMode(self)
    def drawAabb(self, *args): return ___init__.btIDebugDraw_drawAabb(self, *args)
    def drawTransform(self, *args): return ___init__.btIDebugDraw_drawTransform(self, *args)
    def drawArc(self, *args): return ___init__.btIDebugDraw_drawArc(self, *args)
    def drawSpherePatch(self, *args): return ___init__.btIDebugDraw_drawSpherePatch(self, *args)
    def drawBox(self, *args): return ___init__.btIDebugDraw_drawBox(self, *args)
    def drawCapsule(self, *args): return ___init__.btIDebugDraw_drawCapsule(self, *args)
    def drawCylinder(self, *args): return ___init__.btIDebugDraw_drawCylinder(self, *args)
    def drawCone(self, *args): return ___init__.btIDebugDraw_drawCone(self, *args)
    def drawPlane(self, *args): return ___init__.btIDebugDraw_drawPlane(self, *args)
    def __init__(self): 
        if self.__class__ == btIDebugDraw:
            _self = None
        else:
            _self = self
        this = ___init__.new_btIDebugDraw(_self, )
        try: self.this.append(this)
        except: self.this = this
    def __disown__(self):
        self.this.disown()
        ___init__.disown_btIDebugDraw(self)
        return weakref_proxy(self)
btIDebugDraw_swigregister = ___init__.btIDebugDraw_swigregister
btIDebugDraw_swigregister(btIDebugDraw)

USE_BT_CLOCK = ___init__.USE_BT_CLOCK
class btClock(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btClock, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btClock, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = ___init__.new_btClock(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = ___init__.delete_btClock
    __del__ = lambda self : None;
    def reset(self): return ___init__.btClock_reset(self)
    def getTimeMilliseconds(self): return ___init__.btClock_getTimeMilliseconds(self)
    def getTimeMicroseconds(self): return ___init__.btClock_getTimeMicroseconds(self)
btClock_swigregister = ___init__.btClock_swigregister
btClock_swigregister(btClock)

class CProfileNode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CProfileNode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CProfileNode, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = ___init__.new_CProfileNode(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = ___init__.delete_CProfileNode
    __del__ = lambda self : None;
    def Get_Sub_Node(self, *args): return ___init__.CProfileNode_Get_Sub_Node(self, *args)
    def Get_Parent(self): return ___init__.CProfileNode_Get_Parent(self)
    def Get_Sibling(self): return ___init__.CProfileNode_Get_Sibling(self)
    def Get_Child(self): return ___init__.CProfileNode_Get_Child(self)
    def CleanupMemory(self): return ___init__.CProfileNode_CleanupMemory(self)
    def Reset(self): return ___init__.CProfileNode_Reset(self)
    def Call(self): return ___init__.CProfileNode_Call(self)
    def Return(self): return ___init__.CProfileNode_Return(self)
    def Get_Name(self): return ___init__.CProfileNode_Get_Name(self)
    def Get_Total_Calls(self): return ___init__.CProfileNode_Get_Total_Calls(self)
    def Get_Total_Time(self): return ___init__.CProfileNode_Get_Total_Time(self)
    def GetUserPointer(self): return ___init__.CProfileNode_GetUserPointer(self)
    def SetUserPointer(self, *args): return ___init__.CProfileNode_SetUserPointer(self, *args)
CProfileNode_swigregister = ___init__.CProfileNode_swigregister
CProfileNode_swigregister(CProfileNode)

class CProfileIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CProfileIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CProfileIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def First(self): return ___init__.CProfileIterator_First(self)
    def Next(self): return ___init__.CProfileIterator_Next(self)
    def Is_Done(self): return ___init__.CProfileIterator_Is_Done(self)
    def Is_Root(self): return ___init__.CProfileIterator_Is_Root(self)
    def Enter_Child(self, *args): return ___init__.CProfileIterator_Enter_Child(self, *args)
    def Enter_Parent(self): return ___init__.CProfileIterator_Enter_Parent(self)
    def Get_Current_Name(self): return ___init__.CProfileIterator_Get_Current_Name(self)
    def Get_Current_Total_Calls(self): return ___init__.CProfileIterator_Get_Current_Total_Calls(self)
    def Get_Current_Total_Time(self): return ___init__.CProfileIterator_Get_Current_Total_Time(self)
    def Get_Current_UserPointer(self): return ___init__.CProfileIterator_Get_Current_UserPointer(self)
    def Set_Current_UserPointer(self, *args): return ___init__.CProfileIterator_Set_Current_UserPointer(self, *args)
    def Get_Current_Parent_Name(self): return ___init__.CProfileIterator_Get_Current_Parent_Name(self)
    def Get_Current_Parent_Total_Calls(self): return ___init__.CProfileIterator_Get_Current_Parent_Total_Calls(self)
    def Get_Current_Parent_Total_Time(self): return ___init__.CProfileIterator_Get_Current_Parent_Total_Time(self)
    __swig_destroy__ = ___init__.delete_CProfileIterator
    __del__ = lambda self : None;
CProfileIterator_swigregister = ___init__.CProfileIterator_swigregister
CProfileIterator_swigregister(CProfileIterator)

class CProfileManager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CProfileManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CProfileManager, name)
    __repr__ = _swig_repr
    __swig_getmethods__["Start_Profile"] = lambda x: ___init__.CProfileManager_Start_Profile
    if _newclass:Start_Profile = staticmethod(___init__.CProfileManager_Start_Profile)
    __swig_getmethods__["Stop_Profile"] = lambda x: ___init__.CProfileManager_Stop_Profile
    if _newclass:Stop_Profile = staticmethod(___init__.CProfileManager_Stop_Profile)
    __swig_getmethods__["CleanupMemory"] = lambda x: ___init__.CProfileManager_CleanupMemory
    if _newclass:CleanupMemory = staticmethod(___init__.CProfileManager_CleanupMemory)
    __swig_getmethods__["Reset"] = lambda x: ___init__.CProfileManager_Reset
    if _newclass:Reset = staticmethod(___init__.CProfileManager_Reset)
    __swig_getmethods__["Increment_Frame_Counter"] = lambda x: ___init__.CProfileManager_Increment_Frame_Counter
    if _newclass:Increment_Frame_Counter = staticmethod(___init__.CProfileManager_Increment_Frame_Counter)
    __swig_getmethods__["Get_Frame_Count_Since_Reset"] = lambda x: ___init__.CProfileManager_Get_Frame_Count_Since_Reset
    if _newclass:Get_Frame_Count_Since_Reset = staticmethod(___init__.CProfileManager_Get_Frame_Count_Since_Reset)
    __swig_getmethods__["Get_Time_Since_Reset"] = lambda x: ___init__.CProfileManager_Get_Time_Since_Reset
    if _newclass:Get_Time_Since_Reset = staticmethod(___init__.CProfileManager_Get_Time_Since_Reset)
    __swig_getmethods__["Get_Iterator"] = lambda x: ___init__.CProfileManager_Get_Iterator
    if _newclass:Get_Iterator = staticmethod(___init__.CProfileManager_Get_Iterator)
    __swig_getmethods__["Release_Iterator"] = lambda x: ___init__.CProfileManager_Release_Iterator
    if _newclass:Release_Iterator = staticmethod(___init__.CProfileManager_Release_Iterator)
    __swig_getmethods__["dumpRecursive"] = lambda x: ___init__.CProfileManager_dumpRecursive
    if _newclass:dumpRecursive = staticmethod(___init__.CProfileManager_dumpRecursive)
    __swig_getmethods__["dumpAll"] = lambda x: ___init__.CProfileManager_dumpAll
    if _newclass:dumpAll = staticmethod(___init__.CProfileManager_dumpAll)
    def __init__(self): 
        this = ___init__.new_CProfileManager()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = ___init__.delete_CProfileManager
    __del__ = lambda self : None;
CProfileManager_swigregister = ___init__.CProfileManager_swigregister
CProfileManager_swigregister(CProfileManager)

def CProfileManager_Start_Profile(*args):
  return ___init__.CProfileManager_Start_Profile(*args)
CProfileManager_Start_Profile = ___init__.CProfileManager_Start_Profile

def CProfileManager_Stop_Profile():
  return ___init__.CProfileManager_Stop_Profile()
CProfileManager_Stop_Profile = ___init__.CProfileManager_Stop_Profile

def CProfileManager_CleanupMemory():
  return ___init__.CProfileManager_CleanupMemory()
CProfileManager_CleanupMemory = ___init__.CProfileManager_CleanupMemory

def CProfileManager_Reset():
  return ___init__.CProfileManager_Reset()
CProfileManager_Reset = ___init__.CProfileManager_Reset

def CProfileManager_Increment_Frame_Counter():
  return ___init__.CProfileManager_Increment_Frame_Counter()
CProfileManager_Increment_Frame_Counter = ___init__.CProfileManager_Increment_Frame_Counter

def CProfileManager_Get_Frame_Count_Since_Reset():
  return ___init__.CProfileManager_Get_Frame_Count_Since_Reset()
CProfileManager_Get_Frame_Count_Since_Reset = ___init__.CProfileManager_Get_Frame_Count_Since_Reset

def CProfileManager_Get_Time_Since_Reset():
  return ___init__.CProfileManager_Get_Time_Since_Reset()
CProfileManager_Get_Time_Since_Reset = ___init__.CProfileManager_Get_Time_Since_Reset

def CProfileManager_Get_Iterator():
  return ___init__.CProfileManager_Get_Iterator()
CProfileManager_Get_Iterator = ___init__.CProfileManager_Get_Iterator

def CProfileManager_Release_Iterator(*args):
  return ___init__.CProfileManager_Release_Iterator(*args)
CProfileManager_Release_Iterator = ___init__.CProfileManager_Release_Iterator

def CProfileManager_dumpRecursive(*args):
  return ___init__.CProfileManager_dumpRecursive(*args)
CProfileManager_dumpRecursive = ___init__.CProfileManager_dumpRecursive

def CProfileManager_dumpAll():
  return ___init__.CProfileManager_dumpAll()
CProfileManager_dumpAll = ___init__.CProfileManager_dumpAll

class CProfileSample(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CProfileSample, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CProfileSample, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = ___init__.new_CProfileSample(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = ___init__.delete_CProfileSample
    __del__ = lambda self : None;
CProfileSample_swigregister = ___init__.CProfileSample_swigregister
CProfileSample_swigregister(CProfileSample)

BOX_SHAPE_PROXYTYPE = ___init__.BOX_SHAPE_PROXYTYPE
TRIANGLE_SHAPE_PROXYTYPE = ___init__.TRIANGLE_SHAPE_PROXYTYPE
TETRAHEDRAL_SHAPE_PROXYTYPE = ___init__.TETRAHEDRAL_SHAPE_PROXYTYPE
CONVEX_TRIANGLEMESH_SHAPE_PROXYTYPE = ___init__.CONVEX_TRIANGLEMESH_SHAPE_PROXYTYPE
CONVEX_HULL_SHAPE_PROXYTYPE = ___init__.CONVEX_HULL_SHAPE_PROXYTYPE
CONVEX_POINT_CLOUD_SHAPE_PROXYTYPE = ___init__.CONVEX_POINT_CLOUD_SHAPE_PROXYTYPE
CUSTOM_POLYHEDRAL_SHAPE_TYPE = ___init__.CUSTOM_POLYHEDRAL_SHAPE_TYPE
IMPLICIT_CONVEX_SHAPES_START_HERE = ___init__.IMPLICIT_CONVEX_SHAPES_START_HERE
SPHERE_SHAPE_PROXYTYPE = ___init__.SPHERE_SHAPE_PROXYTYPE
MULTI_SPHERE_SHAPE_PROXYTYPE = ___init__.MULTI_SPHERE_SHAPE_PROXYTYPE
CAPSULE_SHAPE_PROXYTYPE = ___init__.CAPSULE_SHAPE_PROXYTYPE
CONE_SHAPE_PROXYTYPE = ___init__.CONE_SHAPE_PROXYTYPE
CONVEX_SHAPE_PROXYTYPE = ___init__.CONVEX_SHAPE_PROXYTYPE
CYLINDER_SHAPE_PROXYTYPE = ___init__.CYLINDER_SHAPE_PROXYTYPE
UNIFORM_SCALING_SHAPE_PROXYTYPE = ___init__.UNIFORM_SCALING_SHAPE_PROXYTYPE
MINKOWSKI_SUM_SHAPE_PROXYTYPE = ___init__.MINKOWSKI_SUM_SHAPE_PROXYTYPE
MINKOWSKI_DIFFERENCE_SHAPE_PROXYTYPE = ___init__.MINKOWSKI_DIFFERENCE_SHAPE_PROXYTYPE
BOX_2D_SHAPE_PROXYTYPE = ___init__.BOX_2D_SHAPE_PROXYTYPE
CONVEX_2D_SHAPE_PROXYTYPE = ___init__.CONVEX_2D_SHAPE_PROXYTYPE
CUSTOM_CONVEX_SHAPE_TYPE = ___init__.CUSTOM_CONVEX_SHAPE_TYPE
CONCAVE_SHAPES_START_HERE = ___init__.CONCAVE_SHAPES_START_HERE
TRIANGLE_MESH_SHAPE_PROXYTYPE = ___init__.TRIANGLE_MESH_SHAPE_PROXYTYPE
SCALED_TRIANGLE_MESH_SHAPE_PROXYTYPE = ___init__.SCALED_TRIANGLE_MESH_SHAPE_PROXYTYPE
FAST_CONCAVE_MESH_PROXYTYPE = ___init__.FAST_CONCAVE_MESH_PROXYTYPE
TERRAIN_SHAPE_PROXYTYPE = ___init__.TERRAIN_SHAPE_PROXYTYPE
GIMPACT_SHAPE_PROXYTYPE = ___init__.GIMPACT_SHAPE_PROXYTYPE
MULTIMATERIAL_TRIANGLE_MESH_PROXYTYPE = ___init__.MULTIMATERIAL_TRIANGLE_MESH_PROXYTYPE
EMPTY_SHAPE_PROXYTYPE = ___init__.EMPTY_SHAPE_PROXYTYPE
STATIC_PLANE_PROXYTYPE = ___init__.STATIC_PLANE_PROXYTYPE
CUSTOM_CONCAVE_SHAPE_TYPE = ___init__.CUSTOM_CONCAVE_SHAPE_TYPE
CONCAVE_SHAPES_END_HERE = ___init__.CONCAVE_SHAPES_END_HERE
COMPOUND_SHAPE_PROXYTYPE = ___init__.COMPOUND_SHAPE_PROXYTYPE
SOFTBODY_SHAPE_PROXYTYPE = ___init__.SOFTBODY_SHAPE_PROXYTYPE
HFFLUID_SHAPE_PROXYTYPE = ___init__.HFFLUID_SHAPE_PROXYTYPE
HFFLUID_BUOYANT_CONVEX_SHAPE_PROXYTYPE = ___init__.HFFLUID_BUOYANT_CONVEX_SHAPE_PROXYTYPE
INVALID_SHAPE_PROXYTYPE = ___init__.INVALID_SHAPE_PROXYTYPE
MAX_BROADPHASE_COLLISION_TYPES = ___init__.MAX_BROADPHASE_COLLISION_TYPES
class btBroadphaseProxy(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btBroadphaseProxy, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btBroadphaseProxy, name)
    __repr__ = _swig_repr
    DefaultFilter = ___init__.btBroadphaseProxy_DefaultFilter
    StaticFilter = ___init__.btBroadphaseProxy_StaticFilter
    KinematicFilter = ___init__.btBroadphaseProxy_KinematicFilter
    DebrisFilter = ___init__.btBroadphaseProxy_DebrisFilter
    SensorTrigger = ___init__.btBroadphaseProxy_SensorTrigger
    CharacterFilter = ___init__.btBroadphaseProxy_CharacterFilter
    AllFilter = ___init__.btBroadphaseProxy_AllFilter
    __swig_setmethods__["m_clientObject"] = ___init__.btBroadphaseProxy_m_clientObject_set
    __swig_getmethods__["m_clientObject"] = ___init__.btBroadphaseProxy_m_clientObject_get
    if _newclass:m_clientObject = _swig_property(___init__.btBroadphaseProxy_m_clientObject_get, ___init__.btBroadphaseProxy_m_clientObject_set)
    __swig_setmethods__["m_collisionFilterGroup"] = ___init__.btBroadphaseProxy_m_collisionFilterGroup_set
    __swig_getmethods__["m_collisionFilterGroup"] = ___init__.btBroadphaseProxy_m_collisionFilterGroup_get
    if _newclass:m_collisionFilterGroup = _swig_property(___init__.btBroadphaseProxy_m_collisionFilterGroup_get, ___init__.btBroadphaseProxy_m_collisionFilterGroup_set)
    __swig_setmethods__["m_collisionFilterMask"] = ___init__.btBroadphaseProxy_m_collisionFilterMask_set
    __swig_getmethods__["m_collisionFilterMask"] = ___init__.btBroadphaseProxy_m_collisionFilterMask_get
    if _newclass:m_collisionFilterMask = _swig_property(___init__.btBroadphaseProxy_m_collisionFilterMask_get, ___init__.btBroadphaseProxy_m_collisionFilterMask_set)
    __swig_setmethods__["m_multiSapParentProxy"] = ___init__.btBroadphaseProxy_m_multiSapParentProxy_set
    __swig_getmethods__["m_multiSapParentProxy"] = ___init__.btBroadphaseProxy_m_multiSapParentProxy_get
    if _newclass:m_multiSapParentProxy = _swig_property(___init__.btBroadphaseProxy_m_multiSapParentProxy_get, ___init__.btBroadphaseProxy_m_multiSapParentProxy_set)
    __swig_setmethods__["m_uniqueId"] = ___init__.btBroadphaseProxy_m_uniqueId_set
    __swig_getmethods__["m_uniqueId"] = ___init__.btBroadphaseProxy_m_uniqueId_get
    if _newclass:m_uniqueId = _swig_property(___init__.btBroadphaseProxy_m_uniqueId_get, ___init__.btBroadphaseProxy_m_uniqueId_set)
    __swig_setmethods__["m_aabbMin"] = ___init__.btBroadphaseProxy_m_aabbMin_set
    __swig_getmethods__["m_aabbMin"] = ___init__.btBroadphaseProxy_m_aabbMin_get
    if _newclass:m_aabbMin = _swig_property(___init__.btBroadphaseProxy_m_aabbMin_get, ___init__.btBroadphaseProxy_m_aabbMin_set)
    __swig_setmethods__["m_aabbMax"] = ___init__.btBroadphaseProxy_m_aabbMax_set
    __swig_getmethods__["m_aabbMax"] = ___init__.btBroadphaseProxy_m_aabbMax_get
    if _newclass:m_aabbMax = _swig_property(___init__.btBroadphaseProxy_m_aabbMax_get, ___init__.btBroadphaseProxy_m_aabbMax_set)
    def getUid(self): return ___init__.btBroadphaseProxy_getUid(self)
    def __init__(self, *args): 
        this = ___init__.new_btBroadphaseProxy(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_getmethods__["isPolyhedral"] = lambda x: ___init__.btBroadphaseProxy_isPolyhedral
    if _newclass:isPolyhedral = staticmethod(___init__.btBroadphaseProxy_isPolyhedral)
    __swig_getmethods__["isConvex"] = lambda x: ___init__.btBroadphaseProxy_isConvex
    if _newclass:isConvex = staticmethod(___init__.btBroadphaseProxy_isConvex)
    __swig_getmethods__["isNonMoving"] = lambda x: ___init__.btBroadphaseProxy_isNonMoving
    if _newclass:isNonMoving = staticmethod(___init__.btBroadphaseProxy_isNonMoving)
    __swig_getmethods__["isConcave"] = lambda x: ___init__.btBroadphaseProxy_isConcave
    if _newclass:isConcave = staticmethod(___init__.btBroadphaseProxy_isConcave)
    __swig_getmethods__["isCompound"] = lambda x: ___init__.btBroadphaseProxy_isCompound
    if _newclass:isCompound = staticmethod(___init__.btBroadphaseProxy_isCompound)
    __swig_getmethods__["isSoftBody"] = lambda x: ___init__.btBroadphaseProxy_isSoftBody
    if _newclass:isSoftBody = staticmethod(___init__.btBroadphaseProxy_isSoftBody)
    __swig_getmethods__["isInfinite"] = lambda x: ___init__.btBroadphaseProxy_isInfinite
    if _newclass:isInfinite = staticmethod(___init__.btBroadphaseProxy_isInfinite)
    __swig_getmethods__["isConvex2d"] = lambda x: ___init__.btBroadphaseProxy_isConvex2d
    if _newclass:isConvex2d = staticmethod(___init__.btBroadphaseProxy_isConvex2d)
    __swig_destroy__ = ___init__.delete_btBroadphaseProxy
    __del__ = lambda self : None;
btBroadphaseProxy_swigregister = ___init__.btBroadphaseProxy_swigregister
btBroadphaseProxy_swigregister(btBroadphaseProxy)

def btBroadphaseProxy_isPolyhedral(*args):
  return ___init__.btBroadphaseProxy_isPolyhedral(*args)
btBroadphaseProxy_isPolyhedral = ___init__.btBroadphaseProxy_isPolyhedral

def btBroadphaseProxy_isConvex(*args):
  return ___init__.btBroadphaseProxy_isConvex(*args)
btBroadphaseProxy_isConvex = ___init__.btBroadphaseProxy_isConvex

def btBroadphaseProxy_isNonMoving(*args):
  return ___init__.btBroadphaseProxy_isNonMoving(*args)
btBroadphaseProxy_isNonMoving = ___init__.btBroadphaseProxy_isNonMoving

def btBroadphaseProxy_isConcave(*args):
  return ___init__.btBroadphaseProxy_isConcave(*args)
btBroadphaseProxy_isConcave = ___init__.btBroadphaseProxy_isConcave

def btBroadphaseProxy_isCompound(*args):
  return ___init__.btBroadphaseProxy_isCompound(*args)
btBroadphaseProxy_isCompound = ___init__.btBroadphaseProxy_isCompound

def btBroadphaseProxy_isSoftBody(*args):
  return ___init__.btBroadphaseProxy_isSoftBody(*args)
btBroadphaseProxy_isSoftBody = ___init__.btBroadphaseProxy_isSoftBody

def btBroadphaseProxy_isInfinite(*args):
  return ___init__.btBroadphaseProxy_isInfinite(*args)
btBroadphaseProxy_isInfinite = ___init__.btBroadphaseProxy_isInfinite

def btBroadphaseProxy_isConvex2d(*args):
  return ___init__.btBroadphaseProxy_isConvex2d(*args)
btBroadphaseProxy_isConvex2d = ___init__.btBroadphaseProxy_isConvex2d

class btBroadphasePair(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btBroadphasePair, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btBroadphasePair, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = ___init__.new_btBroadphasePair(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["m_pProxy0"] = ___init__.btBroadphasePair_m_pProxy0_set
    __swig_getmethods__["m_pProxy0"] = ___init__.btBroadphasePair_m_pProxy0_get
    if _newclass:m_pProxy0 = _swig_property(___init__.btBroadphasePair_m_pProxy0_get, ___init__.btBroadphasePair_m_pProxy0_set)
    __swig_setmethods__["m_pProxy1"] = ___init__.btBroadphasePair_m_pProxy1_set
    __swig_getmethods__["m_pProxy1"] = ___init__.btBroadphasePair_m_pProxy1_get
    if _newclass:m_pProxy1 = _swig_property(___init__.btBroadphasePair_m_pProxy1_get, ___init__.btBroadphasePair_m_pProxy1_set)
    __swig_setmethods__["m_algorithm"] = ___init__.btBroadphasePair_m_algorithm_set
    __swig_getmethods__["m_algorithm"] = ___init__.btBroadphasePair_m_algorithm_get
    if _newclass:m_algorithm = _swig_property(___init__.btBroadphasePair_m_algorithm_get, ___init__.btBroadphasePair_m_algorithm_set)
    __swig_destroy__ = ___init__.delete_btBroadphasePair
    __del__ = lambda self : None;
btBroadphasePair_swigregister = ___init__.btBroadphasePair_swigregister
btBroadphasePair_swigregister(btBroadphasePair)

class btBroadphasePairSortPredicate(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btBroadphasePairSortPredicate, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btBroadphasePairSortPredicate, name)
    __repr__ = _swig_repr
    def __call__(self, *args): return ___init__.btBroadphasePairSortPredicate___call__(self, *args)
    def __init__(self): 
        this = ___init__.new_btBroadphasePairSortPredicate()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = ___init__.delete_btBroadphasePairSortPredicate
    __del__ = lambda self : None;
btBroadphasePairSortPredicate_swigregister = ___init__.btBroadphasePairSortPredicate_swigregister
btBroadphasePairSortPredicate_swigregister(btBroadphasePairSortPredicate)

class btBroadphaseAabbCallback(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btBroadphaseAabbCallback, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btBroadphaseAabbCallback, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = ___init__.delete_btBroadphaseAabbCallback
    __del__ = lambda self : None;
    def process(self, *args): return ___init__.btBroadphaseAabbCallback_process(self, *args)
btBroadphaseAabbCallback_swigregister = ___init__.btBroadphaseAabbCallback_swigregister
btBroadphaseAabbCallback_swigregister(btBroadphaseAabbCallback)

class btBroadphaseRayCallback(btBroadphaseAabbCallback):
    __swig_setmethods__ = {}
    for _s in [btBroadphaseAabbCallback]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btBroadphaseRayCallback, name, value)
    __swig_getmethods__ = {}
    for _s in [btBroadphaseAabbCallback]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, btBroadphaseRayCallback, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_setmethods__["m_rayDirectionInverse"] = ___init__.btBroadphaseRayCallback_m_rayDirectionInverse_set
    __swig_getmethods__["m_rayDirectionInverse"] = ___init__.btBroadphaseRayCallback_m_rayDirectionInverse_get
    if _newclass:m_rayDirectionInverse = _swig_property(___init__.btBroadphaseRayCallback_m_rayDirectionInverse_get, ___init__.btBroadphaseRayCallback_m_rayDirectionInverse_set)
    __swig_setmethods__["m_signs"] = ___init__.btBroadphaseRayCallback_m_signs_set
    __swig_getmethods__["m_signs"] = ___init__.btBroadphaseRayCallback_m_signs_get
    if _newclass:m_signs = _swig_property(___init__.btBroadphaseRayCallback_m_signs_get, ___init__.btBroadphaseRayCallback_m_signs_set)
    __swig_setmethods__["m_lambda_max"] = ___init__.btBroadphaseRayCallback_m_lambda_max_set
    __swig_getmethods__["m_lambda_max"] = ___init__.btBroadphaseRayCallback_m_lambda_max_get
    if _newclass:m_lambda_max = _swig_property(___init__.btBroadphaseRayCallback_m_lambda_max_get, ___init__.btBroadphaseRayCallback_m_lambda_max_set)
    __swig_destroy__ = ___init__.delete_btBroadphaseRayCallback
    __del__ = lambda self : None;
btBroadphaseRayCallback_swigregister = ___init__.btBroadphaseRayCallback_swigregister
btBroadphaseRayCallback_swigregister(btBroadphaseRayCallback)

class btBroadphaseInterface(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btBroadphaseInterface, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btBroadphaseInterface, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = ___init__.delete_btBroadphaseInterface
    __del__ = lambda self : None;
    def createProxy(self, *args): return ___init__.btBroadphaseInterface_createProxy(self, *args)
    def destroyProxy(self, *args): return ___init__.btBroadphaseInterface_destroyProxy(self, *args)
    def setAabb(self, *args): return ___init__.btBroadphaseInterface_setAabb(self, *args)
    def getAabb(self, *args): return ___init__.btBroadphaseInterface_getAabb(self, *args)
    def rayTest(self, *args): return ___init__.btBroadphaseInterface_rayTest(self, *args)
    def aabbTest(self, *args): return ___init__.btBroadphaseInterface_aabbTest(self, *args)
    def calculateOverlappingPairs(self, *args): return ___init__.btBroadphaseInterface_calculateOverlappingPairs(self, *args)
    def getOverlappingPairCache(self, *args): return ___init__.btBroadphaseInterface_getOverlappingPairCache(self, *args)
    def getBroadphaseAabb(self): return ___init__.btBroadphaseInterface_getBroadphaseAabb(self)
    def resetPool(self, *args): return ___init__.btBroadphaseInterface_resetPool(self, *args)
    def printStats(self): return ___init__.btBroadphaseInterface_printStats(self)
btBroadphaseInterface_swigregister = ___init__.btBroadphaseInterface_swigregister
btBroadphaseInterface_swigregister(btBroadphaseInterface)

DBVT_BP_PROFILE = ___init__.DBVT_BP_PROFILE
DBVT_BP_PREVENTFALSEUPDATE = ___init__.DBVT_BP_PREVENTFALSEUPDATE
DBVT_BP_ACCURATESLEEPING = ___init__.DBVT_BP_ACCURATESLEEPING
DBVT_BP_ENABLE_BENCHMARK = ___init__.DBVT_BP_ENABLE_BENCHMARK
class btDbvtProxy(btBroadphaseProxy):
    __swig_setmethods__ = {}
    for _s in [btBroadphaseProxy]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btDbvtProxy, name, value)
    __swig_getmethods__ = {}
    for _s in [btBroadphaseProxy]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, btDbvtProxy, name)
    __repr__ = _swig_repr
    __swig_setmethods__["leaf"] = ___init__.btDbvtProxy_leaf_set
    __swig_getmethods__["leaf"] = ___init__.btDbvtProxy_leaf_get
    if _newclass:leaf = _swig_property(___init__.btDbvtProxy_leaf_get, ___init__.btDbvtProxy_leaf_set)
    __swig_setmethods__["links"] = ___init__.btDbvtProxy_links_set
    __swig_getmethods__["links"] = ___init__.btDbvtProxy_links_get
    if _newclass:links = _swig_property(___init__.btDbvtProxy_links_get, ___init__.btDbvtProxy_links_set)
    __swig_setmethods__["stage"] = ___init__.btDbvtProxy_stage_set
    __swig_getmethods__["stage"] = ___init__.btDbvtProxy_stage_get
    if _newclass:stage = _swig_property(___init__.btDbvtProxy_stage_get, ___init__.btDbvtProxy_stage_set)
    def __init__(self, *args): 
        this = ___init__.new_btDbvtProxy(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = ___init__.delete_btDbvtProxy
    __del__ = lambda self : None;
btDbvtProxy_swigregister = ___init__.btDbvtProxy_swigregister
btDbvtProxy_swigregister(btDbvtProxy)

class btDbvtBroadphase(btBroadphaseInterface):
    __swig_setmethods__ = {}
    for _s in [btBroadphaseInterface]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btDbvtBroadphase, name, value)
    __swig_getmethods__ = {}
    for _s in [btBroadphaseInterface]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, btDbvtBroadphase, name)
    __repr__ = _swig_repr
    DYNAMIC_SET = ___init__.btDbvtBroadphase_DYNAMIC_SET
    FIXED_SET = ___init__.btDbvtBroadphase_FIXED_SET
    STAGECOUNT = ___init__.btDbvtBroadphase_STAGECOUNT
    __swig_setmethods__["m_sets"] = ___init__.btDbvtBroadphase_m_sets_set
    __swig_getmethods__["m_sets"] = ___init__.btDbvtBroadphase_m_sets_get
    if _newclass:m_sets = _swig_property(___init__.btDbvtBroadphase_m_sets_get, ___init__.btDbvtBroadphase_m_sets_set)
    __swig_setmethods__["m_stageRoots"] = ___init__.btDbvtBroadphase_m_stageRoots_set
    __swig_getmethods__["m_stageRoots"] = ___init__.btDbvtBroadphase_m_stageRoots_get
    if _newclass:m_stageRoots = _swig_property(___init__.btDbvtBroadphase_m_stageRoots_get, ___init__.btDbvtBroadphase_m_stageRoots_set)
    __swig_setmethods__["m_paircache"] = ___init__.btDbvtBroadphase_m_paircache_set
    __swig_getmethods__["m_paircache"] = ___init__.btDbvtBroadphase_m_paircache_get
    if _newclass:m_paircache = _swig_property(___init__.btDbvtBroadphase_m_paircache_get, ___init__.btDbvtBroadphase_m_paircache_set)
    __swig_setmethods__["m_prediction"] = ___init__.btDbvtBroadphase_m_prediction_set
    __swig_getmethods__["m_prediction"] = ___init__.btDbvtBroadphase_m_prediction_get
    if _newclass:m_prediction = _swig_property(___init__.btDbvtBroadphase_m_prediction_get, ___init__.btDbvtBroadphase_m_prediction_set)
    __swig_setmethods__["m_stageCurrent"] = ___init__.btDbvtBroadphase_m_stageCurrent_set
    __swig_getmethods__["m_stageCurrent"] = ___init__.btDbvtBroadphase_m_stageCurrent_get
    if _newclass:m_stageCurrent = _swig_property(___init__.btDbvtBroadphase_m_stageCurrent_get, ___init__.btDbvtBroadphase_m_stageCurrent_set)
    __swig_setmethods__["m_fupdates"] = ___init__.btDbvtBroadphase_m_fupdates_set
    __swig_getmethods__["m_fupdates"] = ___init__.btDbvtBroadphase_m_fupdates_get
    if _newclass:m_fupdates = _swig_property(___init__.btDbvtBroadphase_m_fupdates_get, ___init__.btDbvtBroadphase_m_fupdates_set)
    __swig_setmethods__["m_dupdates"] = ___init__.btDbvtBroadphase_m_dupdates_set
    __swig_getmethods__["m_dupdates"] = ___init__.btDbvtBroadphase_m_dupdates_get
    if _newclass:m_dupdates = _swig_property(___init__.btDbvtBroadphase_m_dupdates_get, ___init__.btDbvtBroadphase_m_dupdates_set)
    __swig_setmethods__["m_cupdates"] = ___init__.btDbvtBroadphase_m_cupdates_set
    __swig_getmethods__["m_cupdates"] = ___init__.btDbvtBroadphase_m_cupdates_get
    if _newclass:m_cupdates = _swig_property(___init__.btDbvtBroadphase_m_cupdates_get, ___init__.btDbvtBroadphase_m_cupdates_set)
    __swig_setmethods__["m_newpairs"] = ___init__.btDbvtBroadphase_m_newpairs_set
    __swig_getmethods__["m_newpairs"] = ___init__.btDbvtBroadphase_m_newpairs_get
    if _newclass:m_newpairs = _swig_property(___init__.btDbvtBroadphase_m_newpairs_get, ___init__.btDbvtBroadphase_m_newpairs_set)
    __swig_setmethods__["m_fixedleft"] = ___init__.btDbvtBroadphase_m_fixedleft_set
    __swig_getmethods__["m_fixedleft"] = ___init__.btDbvtBroadphase_m_fixedleft_get
    if _newclass:m_fixedleft = _swig_property(___init__.btDbvtBroadphase_m_fixedleft_get, ___init__.btDbvtBroadphase_m_fixedleft_set)
    __swig_setmethods__["m_updates_call"] = ___init__.btDbvtBroadphase_m_updates_call_set
    __swig_getmethods__["m_updates_call"] = ___init__.btDbvtBroadphase_m_updates_call_get
    if _newclass:m_updates_call = _swig_property(___init__.btDbvtBroadphase_m_updates_call_get, ___init__.btDbvtBroadphase_m_updates_call_set)
    __swig_setmethods__["m_updates_done"] = ___init__.btDbvtBroadphase_m_updates_done_set
    __swig_getmethods__["m_updates_done"] = ___init__.btDbvtBroadphase_m_updates_done_get
    if _newclass:m_updates_done = _swig_property(___init__.btDbvtBroadphase_m_updates_done_get, ___init__.btDbvtBroadphase_m_updates_done_set)
    __swig_setmethods__["m_updates_ratio"] = ___init__.btDbvtBroadphase_m_updates_ratio_set
    __swig_getmethods__["m_updates_ratio"] = ___init__.btDbvtBroadphase_m_updates_ratio_get
    if _newclass:m_updates_ratio = _swig_property(___init__.btDbvtBroadphase_m_updates_ratio_get, ___init__.btDbvtBroadphase_m_updates_ratio_set)
    __swig_setmethods__["m_pid"] = ___init__.btDbvtBroadphase_m_pid_set
    __swig_getmethods__["m_pid"] = ___init__.btDbvtBroadphase_m_pid_get
    if _newclass:m_pid = _swig_property(___init__.btDbvtBroadphase_m_pid_get, ___init__.btDbvtBroadphase_m_pid_set)
    __swig_setmethods__["m_cid"] = ___init__.btDbvtBroadphase_m_cid_set
    __swig_getmethods__["m_cid"] = ___init__.btDbvtBroadphase_m_cid_get
    if _newclass:m_cid = _swig_property(___init__.btDbvtBroadphase_m_cid_get, ___init__.btDbvtBroadphase_m_cid_set)
    __swig_setmethods__["m_gid"] = ___init__.btDbvtBroadphase_m_gid_set
    __swig_getmethods__["m_gid"] = ___init__.btDbvtBroadphase_m_gid_get
    if _newclass:m_gid = _swig_property(___init__.btDbvtBroadphase_m_gid_get, ___init__.btDbvtBroadphase_m_gid_set)
    __swig_setmethods__["m_releasepaircache"] = ___init__.btDbvtBroadphase_m_releasepaircache_set
    __swig_getmethods__["m_releasepaircache"] = ___init__.btDbvtBroadphase_m_releasepaircache_get
    if _newclass:m_releasepaircache = _swig_property(___init__.btDbvtBroadphase_m_releasepaircache_get, ___init__.btDbvtBroadphase_m_releasepaircache_set)
    __swig_setmethods__["m_deferedcollide"] = ___init__.btDbvtBroadphase_m_deferedcollide_set
    __swig_getmethods__["m_deferedcollide"] = ___init__.btDbvtBroadphase_m_deferedcollide_get
    if _newclass:m_deferedcollide = _swig_property(___init__.btDbvtBroadphase_m_deferedcollide_get, ___init__.btDbvtBroadphase_m_deferedcollide_set)
    __swig_setmethods__["m_needcleanup"] = ___init__.btDbvtBroadphase_m_needcleanup_set
    __swig_getmethods__["m_needcleanup"] = ___init__.btDbvtBroadphase_m_needcleanup_get
    if _newclass:m_needcleanup = _swig_property(___init__.btDbvtBroadphase_m_needcleanup_get, ___init__.btDbvtBroadphase_m_needcleanup_set)
    def __init__(self, paircache = None): 
        this = ___init__.new_btDbvtBroadphase(paircache)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = ___init__.delete_btDbvtBroadphase
    __del__ = lambda self : None;
    def collide(self, *args): return ___init__.btDbvtBroadphase_collide(self, *args)
    def optimize(self): return ___init__.btDbvtBroadphase_optimize(self)
    def createProxy(self, *args): return ___init__.btDbvtBroadphase_createProxy(self, *args)
    def destroyProxy(self, *args): return ___init__.btDbvtBroadphase_destroyProxy(self, *args)
    def setAabb(self, *args): return ___init__.btDbvtBroadphase_setAabb(self, *args)
    def rayTest(self, *args): return ___init__.btDbvtBroadphase_rayTest(self, *args)
    def aabbTest(self, *args): return ___init__.btDbvtBroadphase_aabbTest(self, *args)
    def getAabb(self, *args): return ___init__.btDbvtBroadphase_getAabb(self, *args)
    def calculateOverlappingPairs(self, *args): return ___init__.btDbvtBroadphase_calculateOverlappingPairs(self, *args)
    def getOverlappingPairCache(self, *args): return ___init__.btDbvtBroadphase_getOverlappingPairCache(self, *args)
    def getBroadphaseAabb(self): return ___init__.btDbvtBroadphase_getBroadphaseAabb(self)
    def printStats(self): return ___init__.btDbvtBroadphase_printStats(self)
    def resetPool(self, *args): return ___init__.btDbvtBroadphase_resetPool(self, *args)
    def performDeferredRemoval(self, *args): return ___init__.btDbvtBroadphase_performDeferredRemoval(self, *args)
    def setVelocityPrediction(self, *args): return ___init__.btDbvtBroadphase_setVelocityPrediction(self, *args)
    def getVelocityPrediction(self): return ___init__.btDbvtBroadphase_getVelocityPrediction(self)
    def setAabbForceUpdate(self, *args): return ___init__.btDbvtBroadphase_setAabbForceUpdate(self, *args)
    __swig_getmethods__["benchmark"] = lambda x: ___init__.btDbvtBroadphase_benchmark
    if _newclass:benchmark = staticmethod(___init__.btDbvtBroadphase_benchmark)
btDbvtBroadphase_swigregister = ___init__.btDbvtBroadphase_swigregister
btDbvtBroadphase_swigregister(btDbvtBroadphase)

def btDbvtBroadphase_benchmark(*args):
  return ___init__.btDbvtBroadphase_benchmark(*args)
btDbvtBroadphase_benchmark = ___init__.btDbvtBroadphase_benchmark

class btDispatcherInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btDispatcherInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btDispatcherInfo, name)
    __repr__ = _swig_repr
    DISPATCH_DISCRETE = ___init__.btDispatcherInfo_DISPATCH_DISCRETE
    DISPATCH_CONTINUOUS = ___init__.btDispatcherInfo_DISPATCH_CONTINUOUS
    def __init__(self): 
        this = ___init__.new_btDispatcherInfo()
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["m_timeStep"] = ___init__.btDispatcherInfo_m_timeStep_set
    __swig_getmethods__["m_timeStep"] = ___init__.btDispatcherInfo_m_timeStep_get
    if _newclass:m_timeStep = _swig_property(___init__.btDispatcherInfo_m_timeStep_get, ___init__.btDispatcherInfo_m_timeStep_set)
    __swig_setmethods__["m_stepCount"] = ___init__.btDispatcherInfo_m_stepCount_set
    __swig_getmethods__["m_stepCount"] = ___init__.btDispatcherInfo_m_stepCount_get
    if _newclass:m_stepCount = _swig_property(___init__.btDispatcherInfo_m_stepCount_get, ___init__.btDispatcherInfo_m_stepCount_set)
    __swig_setmethods__["m_dispatchFunc"] = ___init__.btDispatcherInfo_m_dispatchFunc_set
    __swig_getmethods__["m_dispatchFunc"] = ___init__.btDispatcherInfo_m_dispatchFunc_get
    if _newclass:m_dispatchFunc = _swig_property(___init__.btDispatcherInfo_m_dispatchFunc_get, ___init__.btDispatcherInfo_m_dispatchFunc_set)
    __swig_setmethods__["m_timeOfImpact"] = ___init__.btDispatcherInfo_m_timeOfImpact_set
    __swig_getmethods__["m_timeOfImpact"] = ___init__.btDispatcherInfo_m_timeOfImpact_get
    if _newclass:m_timeOfImpact = _swig_property(___init__.btDispatcherInfo_m_timeOfImpact_get, ___init__.btDispatcherInfo_m_timeOfImpact_set)
    __swig_setmethods__["m_useContinuous"] = ___init__.btDispatcherInfo_m_useContinuous_set
    __swig_getmethods__["m_useContinuous"] = ___init__.btDispatcherInfo_m_useContinuous_get
    if _newclass:m_useContinuous = _swig_property(___init__.btDispatcherInfo_m_useContinuous_get, ___init__.btDispatcherInfo_m_useContinuous_set)
    __swig_setmethods__["m_debugDraw"] = ___init__.btDispatcherInfo_m_debugDraw_set
    __swig_getmethods__["m_debugDraw"] = ___init__.btDispatcherInfo_m_debugDraw_get
    if _newclass:m_debugDraw = _swig_property(___init__.btDispatcherInfo_m_debugDraw_get, ___init__.btDispatcherInfo_m_debugDraw_set)
    __swig_setmethods__["m_enableSatConvex"] = ___init__.btDispatcherInfo_m_enableSatConvex_set
    __swig_getmethods__["m_enableSatConvex"] = ___init__.btDispatcherInfo_m_enableSatConvex_get
    if _newclass:m_enableSatConvex = _swig_property(___init__.btDispatcherInfo_m_enableSatConvex_get, ___init__.btDispatcherInfo_m_enableSatConvex_set)
    __swig_setmethods__["m_enableSPU"] = ___init__.btDispatcherInfo_m_enableSPU_set
    __swig_getmethods__["m_enableSPU"] = ___init__.btDispatcherInfo_m_enableSPU_get
    if _newclass:m_enableSPU = _swig_property(___init__.btDispatcherInfo_m_enableSPU_get, ___init__.btDispatcherInfo_m_enableSPU_set)
    __swig_setmethods__["m_useEpa"] = ___init__.btDispatcherInfo_m_useEpa_set
    __swig_getmethods__["m_useEpa"] = ___init__.btDispatcherInfo_m_useEpa_get
    if _newclass:m_useEpa = _swig_property(___init__.btDispatcherInfo_m_useEpa_get, ___init__.btDispatcherInfo_m_useEpa_set)
    __swig_setmethods__["m_allowedCcdPenetration"] = ___init__.btDispatcherInfo_m_allowedCcdPenetration_set
    __swig_getmethods__["m_allowedCcdPenetration"] = ___init__.btDispatcherInfo_m_allowedCcdPenetration_get
    if _newclass:m_allowedCcdPenetration = _swig_property(___init__.btDispatcherInfo_m_allowedCcdPenetration_get, ___init__.btDispatcherInfo_m_allowedCcdPenetration_set)
    __swig_setmethods__["m_useConvexConservativeDistanceUtil"] = ___init__.btDispatcherInfo_m_useConvexConservativeDistanceUtil_set
    __swig_getmethods__["m_useConvexConservativeDistanceUtil"] = ___init__.btDispatcherInfo_m_useConvexConservativeDistanceUtil_get
    if _newclass:m_useConvexConservativeDistanceUtil = _swig_property(___init__.btDispatcherInfo_m_useConvexConservativeDistanceUtil_get, ___init__.btDispatcherInfo_m_useConvexConservativeDistanceUtil_set)
    __swig_setmethods__["m_convexConservativeDistanceThreshold"] = ___init__.btDispatcherInfo_m_convexConservativeDistanceThreshold_set
    __swig_getmethods__["m_convexConservativeDistanceThreshold"] = ___init__.btDispatcherInfo_m_convexConservativeDistanceThreshold_get
    if _newclass:m_convexConservativeDistanceThreshold = _swig_property(___init__.btDispatcherInfo_m_convexConservativeDistanceThreshold_get, ___init__.btDispatcherInfo_m_convexConservativeDistanceThreshold_set)
    __swig_setmethods__["m_stackAllocator"] = ___init__.btDispatcherInfo_m_stackAllocator_set
    __swig_getmethods__["m_stackAllocator"] = ___init__.btDispatcherInfo_m_stackAllocator_get
    if _newclass:m_stackAllocator = _swig_property(___init__.btDispatcherInfo_m_stackAllocator_get, ___init__.btDispatcherInfo_m_stackAllocator_set)
    __swig_destroy__ = ___init__.delete_btDispatcherInfo
    __del__ = lambda self : None;
btDispatcherInfo_swigregister = ___init__.btDispatcherInfo_swigregister
btDispatcherInfo_swigregister(btDispatcherInfo)

class btDispatcher(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btDispatcher, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btDispatcher, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = ___init__.delete_btDispatcher
    __del__ = lambda self : None;
    def findAlgorithm(self, *args): return ___init__.btDispatcher_findAlgorithm(self, *args)
    def getNewManifold(self, *args): return ___init__.btDispatcher_getNewManifold(self, *args)
    def releaseManifold(self, *args): return ___init__.btDispatcher_releaseManifold(self, *args)
    def clearManifold(self, *args): return ___init__.btDispatcher_clearManifold(self, *args)
    def needsCollision(self, *args): return ___init__.btDispatcher_needsCollision(self, *args)
    def needsResponse(self, *args): return ___init__.btDispatcher_needsResponse(self, *args)
    def dispatchAllCollisionPairs(self, *args): return ___init__.btDispatcher_dispatchAllCollisionPairs(self, *args)
    def getNumManifolds(self): return ___init__.btDispatcher_getNumManifolds(self)
    def getManifoldByIndexInternal(self, *args): return ___init__.btDispatcher_getManifoldByIndexInternal(self, *args)
    def getInternalManifoldPointer(self): return ___init__.btDispatcher_getInternalManifoldPointer(self)
    def getInternalManifoldPool(self, *args): return ___init__.btDispatcher_getInternalManifoldPool(self, *args)
    def allocateCollisionAlgorithm(self, *args): return ___init__.btDispatcher_allocateCollisionAlgorithm(self, *args)
    def freeCollisionAlgorithm(self, *args): return ___init__.btDispatcher_freeCollisionAlgorithm(self, *args)
btDispatcher_swigregister = ___init__.btDispatcher_swigregister
btDispatcher_swigregister(btDispatcher)

class btCollisionConfiguration(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btCollisionConfiguration, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btCollisionConfiguration, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = ___init__.delete_btCollisionConfiguration
    __del__ = lambda self : None;
    def getPersistentManifoldPool(self): return ___init__.btCollisionConfiguration_getPersistentManifoldPool(self)
    def getCollisionAlgorithmPool(self): return ___init__.btCollisionConfiguration_getCollisionAlgorithmPool(self)
    def getStackAllocator(self): return ___init__.btCollisionConfiguration_getStackAllocator(self)
    def getCollisionAlgorithmCreateFunc(self, *args): return ___init__.btCollisionConfiguration_getCollisionAlgorithmCreateFunc(self, *args)
btCollisionConfiguration_swigregister = ___init__.btCollisionConfiguration_swigregister
btCollisionConfiguration_swigregister(btCollisionConfiguration)

class btDefaultCollisionConstructionInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btDefaultCollisionConstructionInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btDefaultCollisionConstructionInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_stackAlloc"] = ___init__.btDefaultCollisionConstructionInfo_m_stackAlloc_set
    __swig_getmethods__["m_stackAlloc"] = ___init__.btDefaultCollisionConstructionInfo_m_stackAlloc_get
    if _newclass:m_stackAlloc = _swig_property(___init__.btDefaultCollisionConstructionInfo_m_stackAlloc_get, ___init__.btDefaultCollisionConstructionInfo_m_stackAlloc_set)
    __swig_setmethods__["m_persistentManifoldPool"] = ___init__.btDefaultCollisionConstructionInfo_m_persistentManifoldPool_set
    __swig_getmethods__["m_persistentManifoldPool"] = ___init__.btDefaultCollisionConstructionInfo_m_persistentManifoldPool_get
    if _newclass:m_persistentManifoldPool = _swig_property(___init__.btDefaultCollisionConstructionInfo_m_persistentManifoldPool_get, ___init__.btDefaultCollisionConstructionInfo_m_persistentManifoldPool_set)
    __swig_setmethods__["m_collisionAlgorithmPool"] = ___init__.btDefaultCollisionConstructionInfo_m_collisionAlgorithmPool_set
    __swig_getmethods__["m_collisionAlgorithmPool"] = ___init__.btDefaultCollisionConstructionInfo_m_collisionAlgorithmPool_get
    if _newclass:m_collisionAlgorithmPool = _swig_property(___init__.btDefaultCollisionConstructionInfo_m_collisionAlgorithmPool_get, ___init__.btDefaultCollisionConstructionInfo_m_collisionAlgorithmPool_set)
    __swig_setmethods__["m_defaultMaxPersistentManifoldPoolSize"] = ___init__.btDefaultCollisionConstructionInfo_m_defaultMaxPersistentManifoldPoolSize_set
    __swig_getmethods__["m_defaultMaxPersistentManifoldPoolSize"] = ___init__.btDefaultCollisionConstructionInfo_m_defaultMaxPersistentManifoldPoolSize_get
    if _newclass:m_defaultMaxPersistentManifoldPoolSize = _swig_property(___init__.btDefaultCollisionConstructionInfo_m_defaultMaxPersistentManifoldPoolSize_get, ___init__.btDefaultCollisionConstructionInfo_m_defaultMaxPersistentManifoldPoolSize_set)
    __swig_setmethods__["m_defaultMaxCollisionAlgorithmPoolSize"] = ___init__.btDefaultCollisionConstructionInfo_m_defaultMaxCollisionAlgorithmPoolSize_set
    __swig_getmethods__["m_defaultMaxCollisionAlgorithmPoolSize"] = ___init__.btDefaultCollisionConstructionInfo_m_defaultMaxCollisionAlgorithmPoolSize_get
    if _newclass:m_defaultMaxCollisionAlgorithmPoolSize = _swig_property(___init__.btDefaultCollisionConstructionInfo_m_defaultMaxCollisionAlgorithmPoolSize_get, ___init__.btDefaultCollisionConstructionInfo_m_defaultMaxCollisionAlgorithmPoolSize_set)
    __swig_setmethods__["m_customCollisionAlgorithmMaxElementSize"] = ___init__.btDefaultCollisionConstructionInfo_m_customCollisionAlgorithmMaxElementSize_set
    __swig_getmethods__["m_customCollisionAlgorithmMaxElementSize"] = ___init__.btDefaultCollisionConstructionInfo_m_customCollisionAlgorithmMaxElementSize_get
    if _newclass:m_customCollisionAlgorithmMaxElementSize = _swig_property(___init__.btDefaultCollisionConstructionInfo_m_customCollisionAlgorithmMaxElementSize_get, ___init__.btDefaultCollisionConstructionInfo_m_customCollisionAlgorithmMaxElementSize_set)
    __swig_setmethods__["m_defaultStackAllocatorSize"] = ___init__.btDefaultCollisionConstructionInfo_m_defaultStackAllocatorSize_set
    __swig_getmethods__["m_defaultStackAllocatorSize"] = ___init__.btDefaultCollisionConstructionInfo_m_defaultStackAllocatorSize_get
    if _newclass:m_defaultStackAllocatorSize = _swig_property(___init__.btDefaultCollisionConstructionInfo_m_defaultStackAllocatorSize_get, ___init__.btDefaultCollisionConstructionInfo_m_defaultStackAllocatorSize_set)
    __swig_setmethods__["m_useEpaPenetrationAlgorithm"] = ___init__.btDefaultCollisionConstructionInfo_m_useEpaPenetrationAlgorithm_set
    __swig_getmethods__["m_useEpaPenetrationAlgorithm"] = ___init__.btDefaultCollisionConstructionInfo_m_useEpaPenetrationAlgorithm_get
    if _newclass:m_useEpaPenetrationAlgorithm = _swig_property(___init__.btDefaultCollisionConstructionInfo_m_useEpaPenetrationAlgorithm_get, ___init__.btDefaultCollisionConstructionInfo_m_useEpaPenetrationAlgorithm_set)
    def __init__(self): 
        this = ___init__.new_btDefaultCollisionConstructionInfo()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = ___init__.delete_btDefaultCollisionConstructionInfo
    __del__ = lambda self : None;
btDefaultCollisionConstructionInfo_swigregister = ___init__.btDefaultCollisionConstructionInfo_swigregister
btDefaultCollisionConstructionInfo_swigregister(btDefaultCollisionConstructionInfo)

class btDefaultCollisionConfiguration(btCollisionConfiguration):
    __swig_setmethods__ = {}
    for _s in [btCollisionConfiguration]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btDefaultCollisionConfiguration, name, value)
    __swig_getmethods__ = {}
    for _s in [btCollisionConfiguration]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, btDefaultCollisionConfiguration, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = ___init__.new_btDefaultCollisionConfiguration(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = ___init__.delete_btDefaultCollisionConfiguration
    __del__ = lambda self : None;
    def getPersistentManifoldPool(self): return ___init__.btDefaultCollisionConfiguration_getPersistentManifoldPool(self)
    def getCollisionAlgorithmPool(self): return ___init__.btDefaultCollisionConfiguration_getCollisionAlgorithmPool(self)
    def getStackAllocator(self): return ___init__.btDefaultCollisionConfiguration_getStackAllocator(self)
    def getSimplexSolver(self): return ___init__.btDefaultCollisionConfiguration_getSimplexSolver(self)
    def getCollisionAlgorithmCreateFunc(self, *args): return ___init__.btDefaultCollisionConfiguration_getCollisionAlgorithmCreateFunc(self, *args)
    def setConvexConvexMultipointIterations(self, numPerturbationIterations = 3, minimumPointsPerturbationThreshold = 3): return ___init__.btDefaultCollisionConfiguration_setConvexConvexMultipointIterations(self, numPerturbationIterations, minimumPointsPerturbationThreshold)
    def setPlaneConvexMultipointIterations(self, numPerturbationIterations = 3, minimumPointsPerturbationThreshold = 3): return ___init__.btDefaultCollisionConfiguration_setPlaneConvexMultipointIterations(self, numPerturbationIterations, minimumPointsPerturbationThreshold)
btDefaultCollisionConfiguration_swigregister = ___init__.btDefaultCollisionConfiguration_swigregister
btDefaultCollisionConfiguration_swigregister(btDefaultCollisionConfiguration)

USE_DISPATCH_REGISTRY_ARRAY = ___init__.USE_DISPATCH_REGISTRY_ARRAY
class btCollisionDispatcher(btDispatcher):
    __swig_setmethods__ = {}
    for _s in [btDispatcher]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btCollisionDispatcher, name, value)
    __swig_getmethods__ = {}
    for _s in [btDispatcher]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, btCollisionDispatcher, name)
    __repr__ = _swig_repr
    CD_STATIC_STATIC_REPORTED = ___init__.btCollisionDispatcher_CD_STATIC_STATIC_REPORTED
    CD_USE_RELATIVE_CONTACT_BREAKING_THRESHOLD = ___init__.btCollisionDispatcher_CD_USE_RELATIVE_CONTACT_BREAKING_THRESHOLD
    CD_DISABLE_CONTACTPOOL_DYNAMIC_ALLOCATION = ___init__.btCollisionDispatcher_CD_DISABLE_CONTACTPOOL_DYNAMIC_ALLOCATION
    def getDispatcherFlags(self): return ___init__.btCollisionDispatcher_getDispatcherFlags(self)
    def setDispatcherFlags(self, *args): return ___init__.btCollisionDispatcher_setDispatcherFlags(self, *args)
    def registerCollisionCreateFunc(self, *args): return ___init__.btCollisionDispatcher_registerCollisionCreateFunc(self, *args)
    def getNumManifolds(self): return ___init__.btCollisionDispatcher_getNumManifolds(self)
    def getInternalManifoldPointer(self): return ___init__.btCollisionDispatcher_getInternalManifoldPointer(self)
    def getManifoldByIndexInternal(self, *args): return ___init__.btCollisionDispatcher_getManifoldByIndexInternal(self, *args)
    def __init__(self, *args): 
        this = ___init__.new_btCollisionDispatcher(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = ___init__.delete_btCollisionDispatcher
    __del__ = lambda self : None;
    def getNewManifold(self, *args): return ___init__.btCollisionDispatcher_getNewManifold(self, *args)
    def releaseManifold(self, *args): return ___init__.btCollisionDispatcher_releaseManifold(self, *args)
    def clearManifold(self, *args): return ___init__.btCollisionDispatcher_clearManifold(self, *args)
    def findAlgorithm(self, *args): return ___init__.btCollisionDispatcher_findAlgorithm(self, *args)
    def needsCollision(self, *args): return ___init__.btCollisionDispatcher_needsCollision(self, *args)
    def needsResponse(self, *args): return ___init__.btCollisionDispatcher_needsResponse(self, *args)
    def dispatchAllCollisionPairs(self, *args): return ___init__.btCollisionDispatcher_dispatchAllCollisionPairs(self, *args)
    def setNearCallback(self, *args): return ___init__.btCollisionDispatcher_setNearCallback(self, *args)
    def getNearCallback(self): return ___init__.btCollisionDispatcher_getNearCallback(self)
    __swig_getmethods__["defaultNearCallback"] = lambda x: ___init__.btCollisionDispatcher_defaultNearCallback
    if _newclass:defaultNearCallback = staticmethod(___init__.btCollisionDispatcher_defaultNearCallback)
    def allocateCollisionAlgorithm(self, *args): return ___init__.btCollisionDispatcher_allocateCollisionAlgorithm(self, *args)
    def freeCollisionAlgorithm(self, *args): return ___init__.btCollisionDispatcher_freeCollisionAlgorithm(self, *args)
    def getCollisionConfiguration(self, *args): return ___init__.btCollisionDispatcher_getCollisionConfiguration(self, *args)
    def setCollisionConfiguration(self, *args): return ___init__.btCollisionDispatcher_setCollisionConfiguration(self, *args)
    def getInternalManifoldPool(self, *args): return ___init__.btCollisionDispatcher_getInternalManifoldPool(self, *args)
btCollisionDispatcher_swigregister = ___init__.btCollisionDispatcher_swigregister
btCollisionDispatcher_swigregister(btCollisionDispatcher)

def btCollisionDispatcher_defaultNearCallback(*args):
  return ___init__.btCollisionDispatcher_defaultNearCallback(*args)
btCollisionDispatcher_defaultNearCallback = ___init__.btCollisionDispatcher_defaultNearCallback

class btCollisionShape(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btCollisionShape, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btCollisionShape, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = ___init__.delete_btCollisionShape
    __del__ = lambda self : None;
    def getAabb(self, *args): return ___init__.btCollisionShape_getAabb(self, *args)
    def getBoundingSphere(self, *args): return ___init__.btCollisionShape_getBoundingSphere(self, *args)
    def getAngularMotionDisc(self): return ___init__.btCollisionShape_getAngularMotionDisc(self)
    def getContactBreakingThreshold(self, *args): return ___init__.btCollisionShape_getContactBreakingThreshold(self, *args)
    def calculateTemporalAabb(self, *args): return ___init__.btCollisionShape_calculateTemporalAabb(self, *args)
    def isPolyhedral(self): return ___init__.btCollisionShape_isPolyhedral(self)
    def isConvex2d(self): return ___init__.btCollisionShape_isConvex2d(self)
    def isConvex(self): return ___init__.btCollisionShape_isConvex(self)
    def isNonMoving(self): return ___init__.btCollisionShape_isNonMoving(self)
    def isConcave(self): return ___init__.btCollisionShape_isConcave(self)
    def isCompound(self): return ___init__.btCollisionShape_isCompound(self)
    def isSoftBody(self): return ___init__.btCollisionShape_isSoftBody(self)
    def isInfinite(self): return ___init__.btCollisionShape_isInfinite(self)
    def setLocalScaling(self, *args): return ___init__.btCollisionShape_setLocalScaling(self, *args)
    def getLocalScaling(self): return ___init__.btCollisionShape_getLocalScaling(self)
    def calculateLocalInertia(self, *args): return ___init__.btCollisionShape_calculateLocalInertia(self, *args)
    def getName(self): return ___init__.btCollisionShape_getName(self)
    def getShapeType(self): return ___init__.btCollisionShape_getShapeType(self)
    def setMargin(self, *args): return ___init__.btCollisionShape_setMargin(self, *args)
    def getMargin(self): return ___init__.btCollisionShape_getMargin(self)
    def setUserPointer(self, *args): return ___init__.btCollisionShape_setUserPointer(self, *args)
    def getUserPointer(self): return ___init__.btCollisionShape_getUserPointer(self)
    def calculateSerializeBufferSize(self): return ___init__.btCollisionShape_calculateSerializeBufferSize(self)
    def serialize(self, *args): return ___init__.btCollisionShape_serialize(self, *args)
    def serializeSingleShape(self, *args): return ___init__.btCollisionShape_serializeSingleShape(self, *args)
btCollisionShape_swigregister = ___init__.btCollisionShape_swigregister
btCollisionShape_swigregister(btCollisionShape)

class btCollisionShapeData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btCollisionShapeData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btCollisionShapeData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_name"] = ___init__.btCollisionShapeData_m_name_set
    __swig_getmethods__["m_name"] = ___init__.btCollisionShapeData_m_name_get
    if _newclass:m_name = _swig_property(___init__.btCollisionShapeData_m_name_get, ___init__.btCollisionShapeData_m_name_set)
    __swig_setmethods__["m_shapeType"] = ___init__.btCollisionShapeData_m_shapeType_set
    __swig_getmethods__["m_shapeType"] = ___init__.btCollisionShapeData_m_shapeType_get
    if _newclass:m_shapeType = _swig_property(___init__.btCollisionShapeData_m_shapeType_get, ___init__.btCollisionShapeData_m_shapeType_set)
    __swig_setmethods__["m_padding"] = ___init__.btCollisionShapeData_m_padding_set
    __swig_getmethods__["m_padding"] = ___init__.btCollisionShapeData_m_padding_get
    if _newclass:m_padding = _swig_property(___init__.btCollisionShapeData_m_padding_get, ___init__.btCollisionShapeData_m_padding_set)
    def __init__(self): 
        this = ___init__.new_btCollisionShapeData()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = ___init__.delete_btCollisionShapeData
    __del__ = lambda self : None;
btCollisionShapeData_swigregister = ___init__.btCollisionShapeData_swigregister
btCollisionShapeData_swigregister(btCollisionShapeData)

MAX_PREFERRED_PENETRATION_DIRECTIONS = ___init__.MAX_PREFERRED_PENETRATION_DIRECTIONS
class btConvexShape(btCollisionShape):
    __swig_setmethods__ = {}
    for _s in [btCollisionShape]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btConvexShape, name, value)
    __swig_getmethods__ = {}
    for _s in [btCollisionShape]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, btConvexShape, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = ___init__.delete_btConvexShape
    __del__ = lambda self : None;
    def localGetSupportingVertex(self, *args): return ___init__.btConvexShape_localGetSupportingVertex(self, *args)
    def localGetSupportingVertexWithoutMargin(self, *args): return ___init__.btConvexShape_localGetSupportingVertexWithoutMargin(self, *args)
    def localGetSupportVertexWithoutMarginNonVirtual(self, *args): return ___init__.btConvexShape_localGetSupportVertexWithoutMarginNonVirtual(self, *args)
    def localGetSupportVertexNonVirtual(self, *args): return ___init__.btConvexShape_localGetSupportVertexNonVirtual(self, *args)
    def getMarginNonVirtual(self): return ___init__.btConvexShape_getMarginNonVirtual(self)
    def getAabbNonVirtual(self, *args): return ___init__.btConvexShape_getAabbNonVirtual(self, *args)
    def project(self, *args): return ___init__.btConvexShape_project(self, *args)
    def batchedUnitVectorGetSupportingVertexWithoutMargin(self, *args): return ___init__.btConvexShape_batchedUnitVectorGetSupportingVertexWithoutMargin(self, *args)
    def getAabb(self, *args): return ___init__.btConvexShape_getAabb(self, *args)
    def getAabbSlow(self, *args): return ___init__.btConvexShape_getAabbSlow(self, *args)
    def setLocalScaling(self, *args): return ___init__.btConvexShape_setLocalScaling(self, *args)
    def getLocalScaling(self): return ___init__.btConvexShape_getLocalScaling(self)
    def setMargin(self, *args): return ___init__.btConvexShape_setMargin(self, *args)
    def getMargin(self): return ___init__.btConvexShape_getMargin(self)
    def getNumPreferredPenetrationDirections(self): return ___init__.btConvexShape_getNumPreferredPenetrationDirections(self)
    def getPreferredPenetrationDirection(self, *args): return ___init__.btConvexShape_getPreferredPenetrationDirection(self, *args)
    __swig_getmethods__["downcast"] = lambda x: ___init__.btConvexShape_downcast
    if _newclass:downcast = staticmethod(___init__.btConvexShape_downcast)
btConvexShape_swigregister = ___init__.btConvexShape_swigregister
btConvexShape_swigregister(btConvexShape)

def btConvexShape_downcast(*args):
  return ___init__.btConvexShape_downcast(*args)
btConvexShape_downcast = ___init__.btConvexShape_downcast

class btConvexInternalShape(btConvexShape):
    __swig_setmethods__ = {}
    for _s in [btConvexShape]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btConvexInternalShape, name, value)
    __swig_getmethods__ = {}
    for _s in [btConvexShape]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, btConvexInternalShape, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = ___init__.delete_btConvexInternalShape
    __del__ = lambda self : None;
    def localGetSupportingVertex(self, *args): return ___init__.btConvexInternalShape_localGetSupportingVertex(self, *args)
    def getImplicitShapeDimensions(self): return ___init__.btConvexInternalShape_getImplicitShapeDimensions(self)
    def setImplicitShapeDimensions(self, *args): return ___init__.btConvexInternalShape_setImplicitShapeDimensions(self, *args)
    def setSafeMargin(self, *args): return ___init__.btConvexInternalShape_setSafeMargin(self, *args)
    def getAabb(self, *args): return ___init__.btConvexInternalShape_getAabb(self, *args)
    def getAabbSlow(self, *args): return ___init__.btConvexInternalShape_getAabbSlow(self, *args)
    def setLocalScaling(self, *args): return ___init__.btConvexInternalShape_setLocalScaling(self, *args)
    def getLocalScaling(self): return ___init__.btConvexInternalShape_getLocalScaling(self)
    def getLocalScalingNV(self): return ___init__.btConvexInternalShape_getLocalScalingNV(self)
    def setMargin(self, *args): return ___init__.btConvexInternalShape_setMargin(self, *args)
    def getMargin(self): return ___init__.btConvexInternalShape_getMargin(self)
    def getMarginNV(self): return ___init__.btConvexInternalShape_getMarginNV(self)
    def getNumPreferredPenetrationDirections(self): return ___init__.btConvexInternalShape_getNumPreferredPenetrationDirections(self)
    def getPreferredPenetrationDirection(self, *args): return ___init__.btConvexInternalShape_getPreferredPenetrationDirection(self, *args)
    def calculateSerializeBufferSize(self): return ___init__.btConvexInternalShape_calculateSerializeBufferSize(self)
    def serialize(self, *args): return ___init__.btConvexInternalShape_serialize(self, *args)
btConvexInternalShape_swigregister = ___init__.btConvexInternalShape_swigregister
btConvexInternalShape_swigregister(btConvexInternalShape)

class btConvexInternalShapeData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btConvexInternalShapeData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btConvexInternalShapeData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_collisionShapeData"] = ___init__.btConvexInternalShapeData_m_collisionShapeData_set
    __swig_getmethods__["m_collisionShapeData"] = ___init__.btConvexInternalShapeData_m_collisionShapeData_get
    if _newclass:m_collisionShapeData = _swig_property(___init__.btConvexInternalShapeData_m_collisionShapeData_get, ___init__.btConvexInternalShapeData_m_collisionShapeData_set)
    __swig_setmethods__["m_localScaling"] = ___init__.btConvexInternalShapeData_m_localScaling_set
    __swig_getmethods__["m_localScaling"] = ___init__.btConvexInternalShapeData_m_localScaling_get
    if _newclass:m_localScaling = _swig_property(___init__.btConvexInternalShapeData_m_localScaling_get, ___init__.btConvexInternalShapeData_m_localScaling_set)
    __swig_setmethods__["m_implicitShapeDimensions"] = ___init__.btConvexInternalShapeData_m_implicitShapeDimensions_set
    __swig_getmethods__["m_implicitShapeDimensions"] = ___init__.btConvexInternalShapeData_m_implicitShapeDimensions_get
    if _newclass:m_implicitShapeDimensions = _swig_property(___init__.btConvexInternalShapeData_m_implicitShapeDimensions_get, ___init__.btConvexInternalShapeData_m_implicitShapeDimensions_set)
    __swig_setmethods__["m_collisionMargin"] = ___init__.btConvexInternalShapeData_m_collisionMargin_set
    __swig_getmethods__["m_collisionMargin"] = ___init__.btConvexInternalShapeData_m_collisionMargin_get
    if _newclass:m_collisionMargin = _swig_property(___init__.btConvexInternalShapeData_m_collisionMargin_get, ___init__.btConvexInternalShapeData_m_collisionMargin_set)
    __swig_setmethods__["m_padding"] = ___init__.btConvexInternalShapeData_m_padding_set
    __swig_getmethods__["m_padding"] = ___init__.btConvexInternalShapeData_m_padding_get
    if _newclass:m_padding = _swig_property(___init__.btConvexInternalShapeData_m_padding_get, ___init__.btConvexInternalShapeData_m_padding_set)
    def __init__(self): 
        this = ___init__.new_btConvexInternalShapeData()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = ___init__.delete_btConvexInternalShapeData
    __del__ = lambda self : None;
btConvexInternalShapeData_swigregister = ___init__.btConvexInternalShapeData_swigregister
btConvexInternalShapeData_swigregister(btConvexInternalShapeData)

class btConvexInternalAabbCachingShape(btConvexInternalShape):
    __swig_setmethods__ = {}
    for _s in [btConvexInternalShape]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btConvexInternalAabbCachingShape, name, value)
    __swig_getmethods__ = {}
    for _s in [btConvexInternalShape]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, btConvexInternalAabbCachingShape, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def setLocalScaling(self, *args): return ___init__.btConvexInternalAabbCachingShape_setLocalScaling(self, *args)
    def getAabb(self, *args): return ___init__.btConvexInternalAabbCachingShape_getAabb(self, *args)
    def recalcLocalAabb(self): return ___init__.btConvexInternalAabbCachingShape_recalcLocalAabb(self)
    __swig_destroy__ = ___init__.delete_btConvexInternalAabbCachingShape
    __del__ = lambda self : None;
btConvexInternalAabbCachingShape_swigregister = ___init__.btConvexInternalAabbCachingShape_swigregister
btConvexInternalAabbCachingShape_swigregister(btConvexInternalAabbCachingShape)

class btSphereShape(btConvexInternalShape):
    __swig_setmethods__ = {}
    for _s in [btConvexInternalShape]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btSphereShape, name, value)
    __swig_getmethods__ = {}
    for _s in [btConvexInternalShape]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, btSphereShape, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = ___init__.new_btSphereShape(*args)
        try: self.this.append(this)
        except: self.this = this
    def localGetSupportingVertex(self, *args): return ___init__.btSphereShape_localGetSupportingVertex(self, *args)
    def localGetSupportingVertexWithoutMargin(self, *args): return ___init__.btSphereShape_localGetSupportingVertexWithoutMargin(self, *args)
    def batchedUnitVectorGetSupportingVertexWithoutMargin(self, *args): return ___init__.btSphereShape_batchedUnitVectorGetSupportingVertexWithoutMargin(self, *args)
    def calculateLocalInertia(self, *args): return ___init__.btSphereShape_calculateLocalInertia(self, *args)
    def getAabb(self, *args): return ___init__.btSphereShape_getAabb(self, *args)
    def getRadius(self): return ___init__.btSphereShape_getRadius(self)
    def setUnscaledRadius(self, *args): return ___init__.btSphereShape_setUnscaledRadius(self, *args)
    def getName(self): return ___init__.btSphereShape_getName(self)
    def setMargin(self, *args): return ___init__.btSphereShape_setMargin(self, *args)
    def getMargin(self): return ___init__.btSphereShape_getMargin(self)
    __swig_getmethods__["downcast"] = lambda x: ___init__.btSphereShape_downcast
    if _newclass:downcast = staticmethod(___init__.btSphereShape_downcast)
    __swig_destroy__ = ___init__.delete_btSphereShape
    __del__ = lambda self : None;
btSphereShape_swigregister = ___init__.btSphereShape_swigregister
btSphereShape_swigregister(btSphereShape)

def btSphereShape_downcast(*args):
  return ___init__.btSphereShape_downcast(*args)
btSphereShape_downcast = ___init__.btSphereShape_downcast

class btMultiSphereShape(btConvexInternalAabbCachingShape):
    __swig_setmethods__ = {}
    for _s in [btConvexInternalAabbCachingShape]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btMultiSphereShape, name, value)
    __swig_getmethods__ = {}
    for _s in [btConvexInternalAabbCachingShape]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, btMultiSphereShape, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = ___init__.new_btMultiSphereShape(*args)
        try: self.this.append(this)
        except: self.this = this
    def calculateLocalInertia(self, *args): return ___init__.btMultiSphereShape_calculateLocalInertia(self, *args)
    def localGetSupportingVertexWithoutMargin(self, *args): return ___init__.btMultiSphereShape_localGetSupportingVertexWithoutMargin(self, *args)
    def batchedUnitVectorGetSupportingVertexWithoutMargin(self, *args): return ___init__.btMultiSphereShape_batchedUnitVectorGetSupportingVertexWithoutMargin(self, *args)
    def getSphereCount(self): return ___init__.btMultiSphereShape_getSphereCount(self)
    def getSpherePosition(self, *args): return ___init__.btMultiSphereShape_getSpherePosition(self, *args)
    def getSphereRadius(self, *args): return ___init__.btMultiSphereShape_getSphereRadius(self, *args)
    def getName(self): return ___init__.btMultiSphereShape_getName(self)
    def calculateSerializeBufferSize(self): return ___init__.btMultiSphereShape_calculateSerializeBufferSize(self)
    def serialize(self, *args): return ___init__.btMultiSphereShape_serialize(self, *args)
    __swig_getmethods__["downcast"] = lambda x: ___init__.btMultiSphereShape_downcast
    if _newclass:downcast = staticmethod(___init__.btMultiSphereShape_downcast)
    __swig_destroy__ = ___init__.delete_btMultiSphereShape
    __del__ = lambda self : None;
btMultiSphereShape_swigregister = ___init__.btMultiSphereShape_swigregister
btMultiSphereShape_swigregister(btMultiSphereShape)

def btMultiSphereShape_downcast(*args):
  return ___init__.btMultiSphereShape_downcast(*args)
btMultiSphereShape_downcast = ___init__.btMultiSphereShape_downcast

class btPositionAndRadius(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btPositionAndRadius, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btPositionAndRadius, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_pos"] = ___init__.btPositionAndRadius_m_pos_set
    __swig_getmethods__["m_pos"] = ___init__.btPositionAndRadius_m_pos_get
    if _newclass:m_pos = _swig_property(___init__.btPositionAndRadius_m_pos_get, ___init__.btPositionAndRadius_m_pos_set)
    __swig_setmethods__["m_radius"] = ___init__.btPositionAndRadius_m_radius_set
    __swig_getmethods__["m_radius"] = ___init__.btPositionAndRadius_m_radius_get
    if _newclass:m_radius = _swig_property(___init__.btPositionAndRadius_m_radius_get, ___init__.btPositionAndRadius_m_radius_set)
    def __init__(self): 
        this = ___init__.new_btPositionAndRadius()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = ___init__.delete_btPositionAndRadius
    __del__ = lambda self : None;
btPositionAndRadius_swigregister = ___init__.btPositionAndRadius_swigregister
btPositionAndRadius_swigregister(btPositionAndRadius)

class btMultiSphereShapeData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btMultiSphereShapeData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btMultiSphereShapeData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_convexInternalShapeData"] = ___init__.btMultiSphereShapeData_m_convexInternalShapeData_set
    __swig_getmethods__["m_convexInternalShapeData"] = ___init__.btMultiSphereShapeData_m_convexInternalShapeData_get
    if _newclass:m_convexInternalShapeData = _swig_property(___init__.btMultiSphereShapeData_m_convexInternalShapeData_get, ___init__.btMultiSphereShapeData_m_convexInternalShapeData_set)
    __swig_setmethods__["m_localPositionArrayPtr"] = ___init__.btMultiSphereShapeData_m_localPositionArrayPtr_set
    __swig_getmethods__["m_localPositionArrayPtr"] = ___init__.btMultiSphereShapeData_m_localPositionArrayPtr_get
    if _newclass:m_localPositionArrayPtr = _swig_property(___init__.btMultiSphereShapeData_m_localPositionArrayPtr_get, ___init__.btMultiSphereShapeData_m_localPositionArrayPtr_set)
    __swig_setmethods__["m_localPositionArraySize"] = ___init__.btMultiSphereShapeData_m_localPositionArraySize_set
    __swig_getmethods__["m_localPositionArraySize"] = ___init__.btMultiSphereShapeData_m_localPositionArraySize_get
    if _newclass:m_localPositionArraySize = _swig_property(___init__.btMultiSphereShapeData_m_localPositionArraySize_get, ___init__.btMultiSphereShapeData_m_localPositionArraySize_set)
    __swig_setmethods__["m_padding"] = ___init__.btMultiSphereShapeData_m_padding_set
    __swig_getmethods__["m_padding"] = ___init__.btMultiSphereShapeData_m_padding_get
    if _newclass:m_padding = _swig_property(___init__.btMultiSphereShapeData_m_padding_get, ___init__.btMultiSphereShapeData_m_padding_set)
    def __init__(self): 
        this = ___init__.new_btMultiSphereShapeData()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = ___init__.delete_btMultiSphereShapeData
    __del__ = lambda self : None;
btMultiSphereShapeData_swigregister = ___init__.btMultiSphereShapeData_swigregister
btMultiSphereShapeData_swigregister(btMultiSphereShapeData)

PHY_FLOAT = ___init__.PHY_FLOAT
PHY_DOUBLE = ___init__.PHY_DOUBLE
PHY_INTEGER = ___init__.PHY_INTEGER
PHY_SHORT = ___init__.PHY_SHORT
PHY_FIXEDPOINT88 = ___init__.PHY_FIXEDPOINT88
PHY_UCHAR = ___init__.PHY_UCHAR
class btConcaveShape(btCollisionShape):
    __swig_setmethods__ = {}
    for _s in [btCollisionShape]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btConcaveShape, name, value)
    __swig_getmethods__ = {}
    for _s in [btCollisionShape]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, btConcaveShape, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = ___init__.delete_btConcaveShape
    __del__ = lambda self : None;
    def processAllTriangles(self, *args): return ___init__.btConcaveShape_processAllTriangles(self, *args)
    def getMargin(self): return ___init__.btConcaveShape_getMargin(self)
    def setMargin(self, *args): return ___init__.btConcaveShape_setMargin(self, *args)
    __swig_getmethods__["downcast"] = lambda x: ___init__.btConcaveShape_downcast
    if _newclass:downcast = staticmethod(___init__.btConcaveShape_downcast)
btConcaveShape_swigregister = ___init__.btConcaveShape_swigregister
btConcaveShape_swigregister(btConcaveShape)

def btConcaveShape_downcast(*args):
  return ___init__.btConcaveShape_downcast(*args)
btConcaveShape_downcast = ___init__.btConcaveShape_downcast

class btStaticPlaneShape(btConcaveShape):
    __swig_setmethods__ = {}
    for _s in [btConcaveShape]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btStaticPlaneShape, name, value)
    __swig_getmethods__ = {}
    for _s in [btConcaveShape]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, btStaticPlaneShape, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = ___init__.new_btStaticPlaneShape(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = ___init__.delete_btStaticPlaneShape
    __del__ = lambda self : None;
    def getAabb(self, *args): return ___init__.btStaticPlaneShape_getAabb(self, *args)
    def processAllTriangles(self, *args): return ___init__.btStaticPlaneShape_processAllTriangles(self, *args)
    def calculateLocalInertia(self, *args): return ___init__.btStaticPlaneShape_calculateLocalInertia(self, *args)
    def setLocalScaling(self, *args): return ___init__.btStaticPlaneShape_setLocalScaling(self, *args)
    def getLocalScaling(self): return ___init__.btStaticPlaneShape_getLocalScaling(self)
    def getPlaneNormal(self): return ___init__.btStaticPlaneShape_getPlaneNormal(self)
    def getPlaneConstant(self): return ___init__.btStaticPlaneShape_getPlaneConstant(self)
    def getName(self): return ___init__.btStaticPlaneShape_getName(self)
    def calculateSerializeBufferSize(self): return ___init__.btStaticPlaneShape_calculateSerializeBufferSize(self)
    def serialize(self, *args): return ___init__.btStaticPlaneShape_serialize(self, *args)
    __swig_getmethods__["downcast"] = lambda x: ___init__.btStaticPlaneShape_downcast
    if _newclass:downcast = staticmethod(___init__.btStaticPlaneShape_downcast)
btStaticPlaneShape_swigregister = ___init__.btStaticPlaneShape_swigregister
btStaticPlaneShape_swigregister(btStaticPlaneShape)

def btStaticPlaneShape_downcast(*args):
  return ___init__.btStaticPlaneShape_downcast(*args)
btStaticPlaneShape_downcast = ___init__.btStaticPlaneShape_downcast

class btStaticPlaneShapeData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btStaticPlaneShapeData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btStaticPlaneShapeData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_collisionShapeData"] = ___init__.btStaticPlaneShapeData_m_collisionShapeData_set
    __swig_getmethods__["m_collisionShapeData"] = ___init__.btStaticPlaneShapeData_m_collisionShapeData_get
    if _newclass:m_collisionShapeData = _swig_property(___init__.btStaticPlaneShapeData_m_collisionShapeData_get, ___init__.btStaticPlaneShapeData_m_collisionShapeData_set)
    __swig_setmethods__["m_localScaling"] = ___init__.btStaticPlaneShapeData_m_localScaling_set
    __swig_getmethods__["m_localScaling"] = ___init__.btStaticPlaneShapeData_m_localScaling_get
    if _newclass:m_localScaling = _swig_property(___init__.btStaticPlaneShapeData_m_localScaling_get, ___init__.btStaticPlaneShapeData_m_localScaling_set)
    __swig_setmethods__["m_planeNormal"] = ___init__.btStaticPlaneShapeData_m_planeNormal_set
    __swig_getmethods__["m_planeNormal"] = ___init__.btStaticPlaneShapeData_m_planeNormal_get
    if _newclass:m_planeNormal = _swig_property(___init__.btStaticPlaneShapeData_m_planeNormal_get, ___init__.btStaticPlaneShapeData_m_planeNormal_set)
    __swig_setmethods__["m_planeConstant"] = ___init__.btStaticPlaneShapeData_m_planeConstant_set
    __swig_getmethods__["m_planeConstant"] = ___init__.btStaticPlaneShapeData_m_planeConstant_get
    if _newclass:m_planeConstant = _swig_property(___init__.btStaticPlaneShapeData_m_planeConstant_get, ___init__.btStaticPlaneShapeData_m_planeConstant_set)
    __swig_setmethods__["m_pad"] = ___init__.btStaticPlaneShapeData_m_pad_set
    __swig_getmethods__["m_pad"] = ___init__.btStaticPlaneShapeData_m_pad_get
    if _newclass:m_pad = _swig_property(___init__.btStaticPlaneShapeData_m_pad_get, ___init__.btStaticPlaneShapeData_m_pad_set)
    def __init__(self): 
        this = ___init__.new_btStaticPlaneShapeData()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = ___init__.delete_btStaticPlaneShapeData
    __del__ = lambda self : None;
btStaticPlaneShapeData_swigregister = ___init__.btStaticPlaneShapeData_swigregister
btStaticPlaneShapeData_swigregister(btStaticPlaneShapeData)

class btPolyhedralConvexShape(btConvexInternalShape):
    __swig_setmethods__ = {}
    for _s in [btConvexInternalShape]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btPolyhedralConvexShape, name, value)
    __swig_getmethods__ = {}
    for _s in [btConvexInternalShape]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, btPolyhedralConvexShape, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = ___init__.delete_btPolyhedralConvexShape
    __del__ = lambda self : None;
    def initializePolyhedralFeatures(self): return ___init__.btPolyhedralConvexShape_initializePolyhedralFeatures(self)
    def getConvexPolyhedron(self): return ___init__.btPolyhedralConvexShape_getConvexPolyhedron(self)
    def localGetSupportingVertexWithoutMargin(self, *args): return ___init__.btPolyhedralConvexShape_localGetSupportingVertexWithoutMargin(self, *args)
    def batchedUnitVectorGetSupportingVertexWithoutMargin(self, *args): return ___init__.btPolyhedralConvexShape_batchedUnitVectorGetSupportingVertexWithoutMargin(self, *args)
    def calculateLocalInertia(self, *args): return ___init__.btPolyhedralConvexShape_calculateLocalInertia(self, *args)
    def getNumVertices(self): return ___init__.btPolyhedralConvexShape_getNumVertices(self)
    def getNumEdges(self): return ___init__.btPolyhedralConvexShape_getNumEdges(self)
    def getEdge(self, *args): return ___init__.btPolyhedralConvexShape_getEdge(self, *args)
    def getVertex(self, *args): return ___init__.btPolyhedralConvexShape_getVertex(self, *args)
    def getNumPlanes(self): return ___init__.btPolyhedralConvexShape_getNumPlanes(self)
    def getPlane(self, *args): return ___init__.btPolyhedralConvexShape_getPlane(self, *args)
    def isInside(self, *args): return ___init__.btPolyhedralConvexShape_isInside(self, *args)
    __swig_getmethods__["downcast"] = lambda x: ___init__.btPolyhedralConvexShape_downcast
    if _newclass:downcast = staticmethod(___init__.btPolyhedralConvexShape_downcast)
btPolyhedralConvexShape_swigregister = ___init__.btPolyhedralConvexShape_swigregister
btPolyhedralConvexShape_swigregister(btPolyhedralConvexShape)

def btPolyhedralConvexShape_downcast(*args):
  return ___init__.btPolyhedralConvexShape_downcast(*args)
btPolyhedralConvexShape_downcast = ___init__.btPolyhedralConvexShape_downcast

class btPolyhedralConvexAabbCachingShape(btPolyhedralConvexShape):
    __swig_setmethods__ = {}
    for _s in [btPolyhedralConvexShape]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btPolyhedralConvexAabbCachingShape, name, value)
    __swig_getmethods__ = {}
    for _s in [btPolyhedralConvexShape]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, btPolyhedralConvexAabbCachingShape, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def getNonvirtualAabb(self, *args): return ___init__.btPolyhedralConvexAabbCachingShape_getNonvirtualAabb(self, *args)
    def setLocalScaling(self, *args): return ___init__.btPolyhedralConvexAabbCachingShape_setLocalScaling(self, *args)
    def getAabb(self, *args): return ___init__.btPolyhedralConvexAabbCachingShape_getAabb(self, *args)
    def recalcLocalAabb(self): return ___init__.btPolyhedralConvexAabbCachingShape_recalcLocalAabb(self)
    __swig_destroy__ = ___init__.delete_btPolyhedralConvexAabbCachingShape
    __del__ = lambda self : None;
btPolyhedralConvexAabbCachingShape_swigregister = ___init__.btPolyhedralConvexAabbCachingShape_swigregister
btPolyhedralConvexAabbCachingShape_swigregister(btPolyhedralConvexAabbCachingShape)

class btBoxShape(btPolyhedralConvexShape):
    __swig_setmethods__ = {}
    for _s in [btPolyhedralConvexShape]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btBoxShape, name, value)
    __swig_getmethods__ = {}
    for _s in [btPolyhedralConvexShape]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, btBoxShape, name)
    __repr__ = _swig_repr
    def getHalfExtentsWithMargin(self): return ___init__.btBoxShape_getHalfExtentsWithMargin(self)
    def getHalfExtentsWithoutMargin(self): return ___init__.btBoxShape_getHalfExtentsWithoutMargin(self)
    def localGetSupportingVertex(self, *args): return ___init__.btBoxShape_localGetSupportingVertex(self, *args)
    def localGetSupportingVertexWithoutMargin(self, *args): return ___init__.btBoxShape_localGetSupportingVertexWithoutMargin(self, *args)
    def batchedUnitVectorGetSupportingVertexWithoutMargin(self, *args): return ___init__.btBoxShape_batchedUnitVectorGetSupportingVertexWithoutMargin(self, *args)
    def __init__(self, *args): 
        this = ___init__.new_btBoxShape(*args)
        try: self.this.append(this)
        except: self.this = this
    def setMargin(self, *args): return ___init__.btBoxShape_setMargin(self, *args)
    def setLocalScaling(self, *args): return ___init__.btBoxShape_setLocalScaling(self, *args)
    def getAabb(self, *args): return ___init__.btBoxShape_getAabb(self, *args)
    def calculateLocalInertia(self, *args): return ___init__.btBoxShape_calculateLocalInertia(self, *args)
    def getPlane(self, *args): return ___init__.btBoxShape_getPlane(self, *args)
    def getNumPlanes(self): return ___init__.btBoxShape_getNumPlanes(self)
    def getNumVertices(self): return ___init__.btBoxShape_getNumVertices(self)
    def getNumEdges(self): return ___init__.btBoxShape_getNumEdges(self)
    def getVertex(self, *args): return ___init__.btBoxShape_getVertex(self, *args)
    def getPlaneEquation(self, *args): return ___init__.btBoxShape_getPlaneEquation(self, *args)
    def getEdge(self, *args): return ___init__.btBoxShape_getEdge(self, *args)
    def isInside(self, *args): return ___init__.btBoxShape_isInside(self, *args)
    def getName(self): return ___init__.btBoxShape_getName(self)
    def getNumPreferredPenetrationDirections(self): return ___init__.btBoxShape_getNumPreferredPenetrationDirections(self)
    def getPreferredPenetrationDirection(self, *args): return ___init__.btBoxShape_getPreferredPenetrationDirection(self, *args)
    __swig_getmethods__["downcast"] = lambda x: ___init__.btBoxShape_downcast
    if _newclass:downcast = staticmethod(___init__.btBoxShape_downcast)
    __swig_destroy__ = ___init__.delete_btBoxShape
    __del__ = lambda self : None;
btBoxShape_swigregister = ___init__.btBoxShape_swigregister
btBoxShape_swigregister(btBoxShape)

def btBoxShape_downcast(*args):
  return ___init__.btBoxShape_downcast(*args)
btBoxShape_downcast = ___init__.btBoxShape_downcast

ACTIVE_TAG = ___init__.ACTIVE_TAG
ISLAND_SLEEPING = ___init__.ISLAND_SLEEPING
WANTS_DEACTIVATION = ___init__.WANTS_DEACTIVATION
DISABLE_DEACTIVATION = ___init__.DISABLE_DEACTIVATION
DISABLE_SIMULATION = ___init__.DISABLE_SIMULATION
btCollisionObjectDataName = ___init__.btCollisionObjectDataName
class btCollisionObject(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btCollisionObject, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btCollisionObject, name)
    __repr__ = _swig_repr
    CF_STATIC_OBJECT = ___init__.btCollisionObject_CF_STATIC_OBJECT
    CF_KINEMATIC_OBJECT = ___init__.btCollisionObject_CF_KINEMATIC_OBJECT
    CF_NO_CONTACT_RESPONSE = ___init__.btCollisionObject_CF_NO_CONTACT_RESPONSE
    CF_CUSTOM_MATERIAL_CALLBACK = ___init__.btCollisionObject_CF_CUSTOM_MATERIAL_CALLBACK
    CF_CHARACTER_OBJECT = ___init__.btCollisionObject_CF_CHARACTER_OBJECT
    CF_DISABLE_VISUALIZE_OBJECT = ___init__.btCollisionObject_CF_DISABLE_VISUALIZE_OBJECT
    CF_DISABLE_SPU_COLLISION_PROCESSING = ___init__.btCollisionObject_CF_DISABLE_SPU_COLLISION_PROCESSING
    CO_COLLISION_OBJECT = ___init__.btCollisionObject_CO_COLLISION_OBJECT
    CO_RIGID_BODY = ___init__.btCollisionObject_CO_RIGID_BODY
    CO_GHOST_OBJECT = ___init__.btCollisionObject_CO_GHOST_OBJECT
    CO_SOFT_BODY = ___init__.btCollisionObject_CO_SOFT_BODY
    CO_HF_FLUID = ___init__.btCollisionObject_CO_HF_FLUID
    CO_USER_TYPE = ___init__.btCollisionObject_CO_USER_TYPE
    def mergesSimulationIslands(self): return ___init__.btCollisionObject_mergesSimulationIslands(self)
    def getAnisotropicFriction(self): return ___init__.btCollisionObject_getAnisotropicFriction(self)
    def setAnisotropicFriction(self, *args): return ___init__.btCollisionObject_setAnisotropicFriction(self, *args)
    def hasAnisotropicFriction(self): return ___init__.btCollisionObject_hasAnisotropicFriction(self)
    def setContactProcessingThreshold(self, *args): return ___init__.btCollisionObject_setContactProcessingThreshold(self, *args)
    def getContactProcessingThreshold(self): return ___init__.btCollisionObject_getContactProcessingThreshold(self)
    def isStaticObject(self): return ___init__.btCollisionObject_isStaticObject(self)
    def isKinematicObject(self): return ___init__.btCollisionObject_isKinematicObject(self)
    def isStaticOrKinematicObject(self): return ___init__.btCollisionObject_isStaticOrKinematicObject(self)
    def hasContactResponse(self): return ___init__.btCollisionObject_hasContactResponse(self)
    def __init__(self): 
        this = ___init__.new_btCollisionObject()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = ___init__.delete_btCollisionObject
    __del__ = lambda self : None;
    def setCollisionShape(self, *args): return ___init__.btCollisionObject_setCollisionShape(self, *args)
    def getCollisionShape(self, *args): return ___init__.btCollisionObject_getCollisionShape(self, *args)
    def getRootCollisionShape(self, *args): return ___init__.btCollisionObject_getRootCollisionShape(self, *args)
    def internalSetTemporaryCollisionShape(self, *args): return ___init__.btCollisionObject_internalSetTemporaryCollisionShape(self, *args)
    def internalGetExtensionPointer(self): return ___init__.btCollisionObject_internalGetExtensionPointer(self)
    def internalSetExtensionPointer(self, *args): return ___init__.btCollisionObject_internalSetExtensionPointer(self, *args)
    def getActivationState(self): return ___init__.btCollisionObject_getActivationState(self)
    def setActivationState(self, *args): return ___init__.btCollisionObject_setActivationState(self, *args)
    def setDeactivationTime(self, *args): return ___init__.btCollisionObject_setDeactivationTime(self, *args)
    def getDeactivationTime(self): return ___init__.btCollisionObject_getDeactivationTime(self)
    def forceActivationState(self, *args): return ___init__.btCollisionObject_forceActivationState(self, *args)
    def activate(self, forceActivation = False): return ___init__.btCollisionObject_activate(self, forceActivation)
    def isActive(self): return ___init__.btCollisionObject_isActive(self)
    def setRestitution(self, *args): return ___init__.btCollisionObject_setRestitution(self, *args)
    def getRestitution(self): return ___init__.btCollisionObject_getRestitution(self)
    def setFriction(self, *args): return ___init__.btCollisionObject_setFriction(self, *args)
    def getFriction(self): return ___init__.btCollisionObject_getFriction(self)
    def getInternalType(self): return ___init__.btCollisionObject_getInternalType(self)
    def getWorldTransform(self, *args): return ___init__.btCollisionObject_getWorldTransform(self, *args)
    def setWorldTransform(self, *args): return ___init__.btCollisionObject_setWorldTransform(self, *args)
    def getBroadphaseHandle(self, *args): return ___init__.btCollisionObject_getBroadphaseHandle(self, *args)
    def setBroadphaseHandle(self, *args): return ___init__.btCollisionObject_setBroadphaseHandle(self, *args)
    def getInterpolationWorldTransform(self, *args): return ___init__.btCollisionObject_getInterpolationWorldTransform(self, *args)
    def setInterpolationWorldTransform(self, *args): return ___init__.btCollisionObject_setInterpolationWorldTransform(self, *args)
    def setInterpolationLinearVelocity(self, *args): return ___init__.btCollisionObject_setInterpolationLinearVelocity(self, *args)
    def setInterpolationAngularVelocity(self, *args): return ___init__.btCollisionObject_setInterpolationAngularVelocity(self, *args)
    def getInterpolationLinearVelocity(self): return ___init__.btCollisionObject_getInterpolationLinearVelocity(self)
    def getInterpolationAngularVelocity(self): return ___init__.btCollisionObject_getInterpolationAngularVelocity(self)
    def getIslandTag(self): return ___init__.btCollisionObject_getIslandTag(self)
    def setIslandTag(self, *args): return ___init__.btCollisionObject_setIslandTag(self, *args)
    def getCompanionId(self): return ___init__.btCollisionObject_getCompanionId(self)
    def setCompanionId(self, *args): return ___init__.btCollisionObject_setCompanionId(self, *args)
    def getHitFraction(self): return ___init__.btCollisionObject_getHitFraction(self)
    def setHitFraction(self, *args): return ___init__.btCollisionObject_setHitFraction(self, *args)
    def getCollisionFlags(self): return ___init__.btCollisionObject_getCollisionFlags(self)
    def setCollisionFlags(self, *args): return ___init__.btCollisionObject_setCollisionFlags(self, *args)
    def getCcdSweptSphereRadius(self): return ___init__.btCollisionObject_getCcdSweptSphereRadius(self)
    def setCcdSweptSphereRadius(self, *args): return ___init__.btCollisionObject_setCcdSweptSphereRadius(self, *args)
    def getCcdMotionThreshold(self): return ___init__.btCollisionObject_getCcdMotionThreshold(self)
    def getCcdSquareMotionThreshold(self): return ___init__.btCollisionObject_getCcdSquareMotionThreshold(self)
    def setCcdMotionThreshold(self, *args): return ___init__.btCollisionObject_setCcdMotionThreshold(self, *args)
    def getUserPointer(self): return ___init__.btCollisionObject_getUserPointer(self)
    def setUserPointer(self, *args): return ___init__.btCollisionObject_setUserPointer(self, *args)
    def checkCollideWith(self, *args): return ___init__.btCollisionObject_checkCollideWith(self, *args)
    def calculateSerializeBufferSize(self): return ___init__.btCollisionObject_calculateSerializeBufferSize(self)
    def serialize(self, *args): return ___init__.btCollisionObject_serialize(self, *args)
    def serializeSingleObject(self, *args): return ___init__.btCollisionObject_serializeSingleObject(self, *args)
btCollisionObject_swigregister = ___init__.btCollisionObject_swigregister
btCollisionObject_swigregister(btCollisionObject)

class btCollisionObjectDoubleData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btCollisionObjectDoubleData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btCollisionObjectDoubleData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_broadphaseHandle"] = ___init__.btCollisionObjectDoubleData_m_broadphaseHandle_set
    __swig_getmethods__["m_broadphaseHandle"] = ___init__.btCollisionObjectDoubleData_m_broadphaseHandle_get
    if _newclass:m_broadphaseHandle = _swig_property(___init__.btCollisionObjectDoubleData_m_broadphaseHandle_get, ___init__.btCollisionObjectDoubleData_m_broadphaseHandle_set)
    __swig_setmethods__["m_collisionShape"] = ___init__.btCollisionObjectDoubleData_m_collisionShape_set
    __swig_getmethods__["m_collisionShape"] = ___init__.btCollisionObjectDoubleData_m_collisionShape_get
    if _newclass:m_collisionShape = _swig_property(___init__.btCollisionObjectDoubleData_m_collisionShape_get, ___init__.btCollisionObjectDoubleData_m_collisionShape_set)
    __swig_setmethods__["m_rootCollisionShape"] = ___init__.btCollisionObjectDoubleData_m_rootCollisionShape_set
    __swig_getmethods__["m_rootCollisionShape"] = ___init__.btCollisionObjectDoubleData_m_rootCollisionShape_get
    if _newclass:m_rootCollisionShape = _swig_property(___init__.btCollisionObjectDoubleData_m_rootCollisionShape_get, ___init__.btCollisionObjectDoubleData_m_rootCollisionShape_set)
    __swig_setmethods__["m_name"] = ___init__.btCollisionObjectDoubleData_m_name_set
    __swig_getmethods__["m_name"] = ___init__.btCollisionObjectDoubleData_m_name_get
    if _newclass:m_name = _swig_property(___init__.btCollisionObjectDoubleData_m_name_get, ___init__.btCollisionObjectDoubleData_m_name_set)
    __swig_setmethods__["m_worldTransform"] = ___init__.btCollisionObjectDoubleData_m_worldTransform_set
    __swig_getmethods__["m_worldTransform"] = ___init__.btCollisionObjectDoubleData_m_worldTransform_get
    if _newclass:m_worldTransform = _swig_property(___init__.btCollisionObjectDoubleData_m_worldTransform_get, ___init__.btCollisionObjectDoubleData_m_worldTransform_set)
    __swig_setmethods__["m_interpolationWorldTransform"] = ___init__.btCollisionObjectDoubleData_m_interpolationWorldTransform_set
    __swig_getmethods__["m_interpolationWorldTransform"] = ___init__.btCollisionObjectDoubleData_m_interpolationWorldTransform_get
    if _newclass:m_interpolationWorldTransform = _swig_property(___init__.btCollisionObjectDoubleData_m_interpolationWorldTransform_get, ___init__.btCollisionObjectDoubleData_m_interpolationWorldTransform_set)
    __swig_setmethods__["m_interpolationLinearVelocity"] = ___init__.btCollisionObjectDoubleData_m_interpolationLinearVelocity_set
    __swig_getmethods__["m_interpolationLinearVelocity"] = ___init__.btCollisionObjectDoubleData_m_interpolationLinearVelocity_get
    if _newclass:m_interpolationLinearVelocity = _swig_property(___init__.btCollisionObjectDoubleData_m_interpolationLinearVelocity_get, ___init__.btCollisionObjectDoubleData_m_interpolationLinearVelocity_set)
    __swig_setmethods__["m_interpolationAngularVelocity"] = ___init__.btCollisionObjectDoubleData_m_interpolationAngularVelocity_set
    __swig_getmethods__["m_interpolationAngularVelocity"] = ___init__.btCollisionObjectDoubleData_m_interpolationAngularVelocity_get
    if _newclass:m_interpolationAngularVelocity = _swig_property(___init__.btCollisionObjectDoubleData_m_interpolationAngularVelocity_get, ___init__.btCollisionObjectDoubleData_m_interpolationAngularVelocity_set)
    __swig_setmethods__["m_anisotropicFriction"] = ___init__.btCollisionObjectDoubleData_m_anisotropicFriction_set
    __swig_getmethods__["m_anisotropicFriction"] = ___init__.btCollisionObjectDoubleData_m_anisotropicFriction_get
    if _newclass:m_anisotropicFriction = _swig_property(___init__.btCollisionObjectDoubleData_m_anisotropicFriction_get, ___init__.btCollisionObjectDoubleData_m_anisotropicFriction_set)
    __swig_setmethods__["m_contactProcessingThreshold"] = ___init__.btCollisionObjectDoubleData_m_contactProcessingThreshold_set
    __swig_getmethods__["m_contactProcessingThreshold"] = ___init__.btCollisionObjectDoubleData_m_contactProcessingThreshold_get
    if _newclass:m_contactProcessingThreshold = _swig_property(___init__.btCollisionObjectDoubleData_m_contactProcessingThreshold_get, ___init__.btCollisionObjectDoubleData_m_contactProcessingThreshold_set)
    __swig_setmethods__["m_deactivationTime"] = ___init__.btCollisionObjectDoubleData_m_deactivationTime_set
    __swig_getmethods__["m_deactivationTime"] = ___init__.btCollisionObjectDoubleData_m_deactivationTime_get
    if _newclass:m_deactivationTime = _swig_property(___init__.btCollisionObjectDoubleData_m_deactivationTime_get, ___init__.btCollisionObjectDoubleData_m_deactivationTime_set)
    __swig_setmethods__["m_friction"] = ___init__.btCollisionObjectDoubleData_m_friction_set
    __swig_getmethods__["m_friction"] = ___init__.btCollisionObjectDoubleData_m_friction_get
    if _newclass:m_friction = _swig_property(___init__.btCollisionObjectDoubleData_m_friction_get, ___init__.btCollisionObjectDoubleData_m_friction_set)
    __swig_setmethods__["m_restitution"] = ___init__.btCollisionObjectDoubleData_m_restitution_set
    __swig_getmethods__["m_restitution"] = ___init__.btCollisionObjectDoubleData_m_restitution_get
    if _newclass:m_restitution = _swig_property(___init__.btCollisionObjectDoubleData_m_restitution_get, ___init__.btCollisionObjectDoubleData_m_restitution_set)
    __swig_setmethods__["m_hitFraction"] = ___init__.btCollisionObjectDoubleData_m_hitFraction_set
    __swig_getmethods__["m_hitFraction"] = ___init__.btCollisionObjectDoubleData_m_hitFraction_get
    if _newclass:m_hitFraction = _swig_property(___init__.btCollisionObjectDoubleData_m_hitFraction_get, ___init__.btCollisionObjectDoubleData_m_hitFraction_set)
    __swig_setmethods__["m_ccdSweptSphereRadius"] = ___init__.btCollisionObjectDoubleData_m_ccdSweptSphereRadius_set
    __swig_getmethods__["m_ccdSweptSphereRadius"] = ___init__.btCollisionObjectDoubleData_m_ccdSweptSphereRadius_get
    if _newclass:m_ccdSweptSphereRadius = _swig_property(___init__.btCollisionObjectDoubleData_m_ccdSweptSphereRadius_get, ___init__.btCollisionObjectDoubleData_m_ccdSweptSphereRadius_set)
    __swig_setmethods__["m_ccdMotionThreshold"] = ___init__.btCollisionObjectDoubleData_m_ccdMotionThreshold_set
    __swig_getmethods__["m_ccdMotionThreshold"] = ___init__.btCollisionObjectDoubleData_m_ccdMotionThreshold_get
    if _newclass:m_ccdMotionThreshold = _swig_property(___init__.btCollisionObjectDoubleData_m_ccdMotionThreshold_get, ___init__.btCollisionObjectDoubleData_m_ccdMotionThreshold_set)
    __swig_setmethods__["m_hasAnisotropicFriction"] = ___init__.btCollisionObjectDoubleData_m_hasAnisotropicFriction_set
    __swig_getmethods__["m_hasAnisotropicFriction"] = ___init__.btCollisionObjectDoubleData_m_hasAnisotropicFriction_get
    if _newclass:m_hasAnisotropicFriction = _swig_property(___init__.btCollisionObjectDoubleData_m_hasAnisotropicFriction_get, ___init__.btCollisionObjectDoubleData_m_hasAnisotropicFriction_set)
    __swig_setmethods__["m_collisionFlags"] = ___init__.btCollisionObjectDoubleData_m_collisionFlags_set
    __swig_getmethods__["m_collisionFlags"] = ___init__.btCollisionObjectDoubleData_m_collisionFlags_get
    if _newclass:m_collisionFlags = _swig_property(___init__.btCollisionObjectDoubleData_m_collisionFlags_get, ___init__.btCollisionObjectDoubleData_m_collisionFlags_set)
    __swig_setmethods__["m_islandTag1"] = ___init__.btCollisionObjectDoubleData_m_islandTag1_set
    __swig_getmethods__["m_islandTag1"] = ___init__.btCollisionObjectDoubleData_m_islandTag1_get
    if _newclass:m_islandTag1 = _swig_property(___init__.btCollisionObjectDoubleData_m_islandTag1_get, ___init__.btCollisionObjectDoubleData_m_islandTag1_set)
    __swig_setmethods__["m_companionId"] = ___init__.btCollisionObjectDoubleData_m_companionId_set
    __swig_getmethods__["m_companionId"] = ___init__.btCollisionObjectDoubleData_m_companionId_get
    if _newclass:m_companionId = _swig_property(___init__.btCollisionObjectDoubleData_m_companionId_get, ___init__.btCollisionObjectDoubleData_m_companionId_set)
    __swig_setmethods__["m_activationState1"] = ___init__.btCollisionObjectDoubleData_m_activationState1_set
    __swig_getmethods__["m_activationState1"] = ___init__.btCollisionObjectDoubleData_m_activationState1_get
    if _newclass:m_activationState1 = _swig_property(___init__.btCollisionObjectDoubleData_m_activationState1_get, ___init__.btCollisionObjectDoubleData_m_activationState1_set)
    __swig_setmethods__["m_internalType"] = ___init__.btCollisionObjectDoubleData_m_internalType_set
    __swig_getmethods__["m_internalType"] = ___init__.btCollisionObjectDoubleData_m_internalType_get
    if _newclass:m_internalType = _swig_property(___init__.btCollisionObjectDoubleData_m_internalType_get, ___init__.btCollisionObjectDoubleData_m_internalType_set)
    __swig_setmethods__["m_checkCollideWith"] = ___init__.btCollisionObjectDoubleData_m_checkCollideWith_set
    __swig_getmethods__["m_checkCollideWith"] = ___init__.btCollisionObjectDoubleData_m_checkCollideWith_get
    if _newclass:m_checkCollideWith = _swig_property(___init__.btCollisionObjectDoubleData_m_checkCollideWith_get, ___init__.btCollisionObjectDoubleData_m_checkCollideWith_set)
    __swig_setmethods__["m_padding"] = ___init__.btCollisionObjectDoubleData_m_padding_set
    __swig_getmethods__["m_padding"] = ___init__.btCollisionObjectDoubleData_m_padding_get
    if _newclass:m_padding = _swig_property(___init__.btCollisionObjectDoubleData_m_padding_get, ___init__.btCollisionObjectDoubleData_m_padding_set)
    def __init__(self): 
        this = ___init__.new_btCollisionObjectDoubleData()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = ___init__.delete_btCollisionObjectDoubleData
    __del__ = lambda self : None;
btCollisionObjectDoubleData_swigregister = ___init__.btCollisionObjectDoubleData_swigregister
btCollisionObjectDoubleData_swigregister(btCollisionObjectDoubleData)

class btCollisionObjectFloatData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btCollisionObjectFloatData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btCollisionObjectFloatData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_broadphaseHandle"] = ___init__.btCollisionObjectFloatData_m_broadphaseHandle_set
    __swig_getmethods__["m_broadphaseHandle"] = ___init__.btCollisionObjectFloatData_m_broadphaseHandle_get
    if _newclass:m_broadphaseHandle = _swig_property(___init__.btCollisionObjectFloatData_m_broadphaseHandle_get, ___init__.btCollisionObjectFloatData_m_broadphaseHandle_set)
    __swig_setmethods__["m_collisionShape"] = ___init__.btCollisionObjectFloatData_m_collisionShape_set
    __swig_getmethods__["m_collisionShape"] = ___init__.btCollisionObjectFloatData_m_collisionShape_get
    if _newclass:m_collisionShape = _swig_property(___init__.btCollisionObjectFloatData_m_collisionShape_get, ___init__.btCollisionObjectFloatData_m_collisionShape_set)
    __swig_setmethods__["m_rootCollisionShape"] = ___init__.btCollisionObjectFloatData_m_rootCollisionShape_set
    __swig_getmethods__["m_rootCollisionShape"] = ___init__.btCollisionObjectFloatData_m_rootCollisionShape_get
    if _newclass:m_rootCollisionShape = _swig_property(___init__.btCollisionObjectFloatData_m_rootCollisionShape_get, ___init__.btCollisionObjectFloatData_m_rootCollisionShape_set)
    __swig_setmethods__["m_name"] = ___init__.btCollisionObjectFloatData_m_name_set
    __swig_getmethods__["m_name"] = ___init__.btCollisionObjectFloatData_m_name_get
    if _newclass:m_name = _swig_property(___init__.btCollisionObjectFloatData_m_name_get, ___init__.btCollisionObjectFloatData_m_name_set)
    __swig_setmethods__["m_worldTransform"] = ___init__.btCollisionObjectFloatData_m_worldTransform_set
    __swig_getmethods__["m_worldTransform"] = ___init__.btCollisionObjectFloatData_m_worldTransform_get
    if _newclass:m_worldTransform = _swig_property(___init__.btCollisionObjectFloatData_m_worldTransform_get, ___init__.btCollisionObjectFloatData_m_worldTransform_set)
    __swig_setmethods__["m_interpolationWorldTransform"] = ___init__.btCollisionObjectFloatData_m_interpolationWorldTransform_set
    __swig_getmethods__["m_interpolationWorldTransform"] = ___init__.btCollisionObjectFloatData_m_interpolationWorldTransform_get
    if _newclass:m_interpolationWorldTransform = _swig_property(___init__.btCollisionObjectFloatData_m_interpolationWorldTransform_get, ___init__.btCollisionObjectFloatData_m_interpolationWorldTransform_set)
    __swig_setmethods__["m_interpolationLinearVelocity"] = ___init__.btCollisionObjectFloatData_m_interpolationLinearVelocity_set
    __swig_getmethods__["m_interpolationLinearVelocity"] = ___init__.btCollisionObjectFloatData_m_interpolationLinearVelocity_get
    if _newclass:m_interpolationLinearVelocity = _swig_property(___init__.btCollisionObjectFloatData_m_interpolationLinearVelocity_get, ___init__.btCollisionObjectFloatData_m_interpolationLinearVelocity_set)
    __swig_setmethods__["m_interpolationAngularVelocity"] = ___init__.btCollisionObjectFloatData_m_interpolationAngularVelocity_set
    __swig_getmethods__["m_interpolationAngularVelocity"] = ___init__.btCollisionObjectFloatData_m_interpolationAngularVelocity_get
    if _newclass:m_interpolationAngularVelocity = _swig_property(___init__.btCollisionObjectFloatData_m_interpolationAngularVelocity_get, ___init__.btCollisionObjectFloatData_m_interpolationAngularVelocity_set)
    __swig_setmethods__["m_anisotropicFriction"] = ___init__.btCollisionObjectFloatData_m_anisotropicFriction_set
    __swig_getmethods__["m_anisotropicFriction"] = ___init__.btCollisionObjectFloatData_m_anisotropicFriction_get
    if _newclass:m_anisotropicFriction = _swig_property(___init__.btCollisionObjectFloatData_m_anisotropicFriction_get, ___init__.btCollisionObjectFloatData_m_anisotropicFriction_set)
    __swig_setmethods__["m_contactProcessingThreshold"] = ___init__.btCollisionObjectFloatData_m_contactProcessingThreshold_set
    __swig_getmethods__["m_contactProcessingThreshold"] = ___init__.btCollisionObjectFloatData_m_contactProcessingThreshold_get
    if _newclass:m_contactProcessingThreshold = _swig_property(___init__.btCollisionObjectFloatData_m_contactProcessingThreshold_get, ___init__.btCollisionObjectFloatData_m_contactProcessingThreshold_set)
    __swig_setmethods__["m_deactivationTime"] = ___init__.btCollisionObjectFloatData_m_deactivationTime_set
    __swig_getmethods__["m_deactivationTime"] = ___init__.btCollisionObjectFloatData_m_deactivationTime_get
    if _newclass:m_deactivationTime = _swig_property(___init__.btCollisionObjectFloatData_m_deactivationTime_get, ___init__.btCollisionObjectFloatData_m_deactivationTime_set)
    __swig_setmethods__["m_friction"] = ___init__.btCollisionObjectFloatData_m_friction_set
    __swig_getmethods__["m_friction"] = ___init__.btCollisionObjectFloatData_m_friction_get
    if _newclass:m_friction = _swig_property(___init__.btCollisionObjectFloatData_m_friction_get, ___init__.btCollisionObjectFloatData_m_friction_set)
    __swig_setmethods__["m_restitution"] = ___init__.btCollisionObjectFloatData_m_restitution_set
    __swig_getmethods__["m_restitution"] = ___init__.btCollisionObjectFloatData_m_restitution_get
    if _newclass:m_restitution = _swig_property(___init__.btCollisionObjectFloatData_m_restitution_get, ___init__.btCollisionObjectFloatData_m_restitution_set)
    __swig_setmethods__["m_hitFraction"] = ___init__.btCollisionObjectFloatData_m_hitFraction_set
    __swig_getmethods__["m_hitFraction"] = ___init__.btCollisionObjectFloatData_m_hitFraction_get
    if _newclass:m_hitFraction = _swig_property(___init__.btCollisionObjectFloatData_m_hitFraction_get, ___init__.btCollisionObjectFloatData_m_hitFraction_set)
    __swig_setmethods__["m_ccdSweptSphereRadius"] = ___init__.btCollisionObjectFloatData_m_ccdSweptSphereRadius_set
    __swig_getmethods__["m_ccdSweptSphereRadius"] = ___init__.btCollisionObjectFloatData_m_ccdSweptSphereRadius_get
    if _newclass:m_ccdSweptSphereRadius = _swig_property(___init__.btCollisionObjectFloatData_m_ccdSweptSphereRadius_get, ___init__.btCollisionObjectFloatData_m_ccdSweptSphereRadius_set)
    __swig_setmethods__["m_ccdMotionThreshold"] = ___init__.btCollisionObjectFloatData_m_ccdMotionThreshold_set
    __swig_getmethods__["m_ccdMotionThreshold"] = ___init__.btCollisionObjectFloatData_m_ccdMotionThreshold_get
    if _newclass:m_ccdMotionThreshold = _swig_property(___init__.btCollisionObjectFloatData_m_ccdMotionThreshold_get, ___init__.btCollisionObjectFloatData_m_ccdMotionThreshold_set)
    __swig_setmethods__["m_hasAnisotropicFriction"] = ___init__.btCollisionObjectFloatData_m_hasAnisotropicFriction_set
    __swig_getmethods__["m_hasAnisotropicFriction"] = ___init__.btCollisionObjectFloatData_m_hasAnisotropicFriction_get
    if _newclass:m_hasAnisotropicFriction = _swig_property(___init__.btCollisionObjectFloatData_m_hasAnisotropicFriction_get, ___init__.btCollisionObjectFloatData_m_hasAnisotropicFriction_set)
    __swig_setmethods__["m_collisionFlags"] = ___init__.btCollisionObjectFloatData_m_collisionFlags_set
    __swig_getmethods__["m_collisionFlags"] = ___init__.btCollisionObjectFloatData_m_collisionFlags_get
    if _newclass:m_collisionFlags = _swig_property(___init__.btCollisionObjectFloatData_m_collisionFlags_get, ___init__.btCollisionObjectFloatData_m_collisionFlags_set)
    __swig_setmethods__["m_islandTag1"] = ___init__.btCollisionObjectFloatData_m_islandTag1_set
    __swig_getmethods__["m_islandTag1"] = ___init__.btCollisionObjectFloatData_m_islandTag1_get
    if _newclass:m_islandTag1 = _swig_property(___init__.btCollisionObjectFloatData_m_islandTag1_get, ___init__.btCollisionObjectFloatData_m_islandTag1_set)
    __swig_setmethods__["m_companionId"] = ___init__.btCollisionObjectFloatData_m_companionId_set
    __swig_getmethods__["m_companionId"] = ___init__.btCollisionObjectFloatData_m_companionId_get
    if _newclass:m_companionId = _swig_property(___init__.btCollisionObjectFloatData_m_companionId_get, ___init__.btCollisionObjectFloatData_m_companionId_set)
    __swig_setmethods__["m_activationState1"] = ___init__.btCollisionObjectFloatData_m_activationState1_set
    __swig_getmethods__["m_activationState1"] = ___init__.btCollisionObjectFloatData_m_activationState1_get
    if _newclass:m_activationState1 = _swig_property(___init__.btCollisionObjectFloatData_m_activationState1_get, ___init__.btCollisionObjectFloatData_m_activationState1_set)
    __swig_setmethods__["m_internalType"] = ___init__.btCollisionObjectFloatData_m_internalType_set
    __swig_getmethods__["m_internalType"] = ___init__.btCollisionObjectFloatData_m_internalType_get
    if _newclass:m_internalType = _swig_property(___init__.btCollisionObjectFloatData_m_internalType_get, ___init__.btCollisionObjectFloatData_m_internalType_set)
    __swig_setmethods__["m_checkCollideWith"] = ___init__.btCollisionObjectFloatData_m_checkCollideWith_set
    __swig_getmethods__["m_checkCollideWith"] = ___init__.btCollisionObjectFloatData_m_checkCollideWith_get
    if _newclass:m_checkCollideWith = _swig_property(___init__.btCollisionObjectFloatData_m_checkCollideWith_get, ___init__.btCollisionObjectFloatData_m_checkCollideWith_set)
    def __init__(self): 
        this = ___init__.new_btCollisionObjectFloatData()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = ___init__.delete_btCollisionObjectFloatData
    __del__ = lambda self : None;
btCollisionObjectFloatData_swigregister = ___init__.btCollisionObjectFloatData_swigregister
btCollisionObjectFloatData_swigregister(btCollisionObjectFloatData)

class LocalShapeInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LocalShapeInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LocalShapeInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_shapePart"] = ___init__.LocalShapeInfo_m_shapePart_set
    __swig_getmethods__["m_shapePart"] = ___init__.LocalShapeInfo_m_shapePart_get
    if _newclass:m_shapePart = _swig_property(___init__.LocalShapeInfo_m_shapePart_get, ___init__.LocalShapeInfo_m_shapePart_set)
    __swig_setmethods__["m_triangleIndex"] = ___init__.LocalShapeInfo_m_triangleIndex_set
    __swig_getmethods__["m_triangleIndex"] = ___init__.LocalShapeInfo_m_triangleIndex_get
    if _newclass:m_triangleIndex = _swig_property(___init__.LocalShapeInfo_m_triangleIndex_get, ___init__.LocalShapeInfo_m_triangleIndex_set)
    def __init__(self): 
        this = ___init__.new_LocalShapeInfo()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = ___init__.delete_LocalShapeInfo
    __del__ = lambda self : None;
LocalShapeInfo_swigregister = ___init__.LocalShapeInfo_swigregister
LocalShapeInfo_swigregister(LocalShapeInfo)

class LocalRayResult(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LocalRayResult, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LocalRayResult, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = ___init__.new_LocalRayResult(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["m_collisionObject"] = ___init__.LocalRayResult_m_collisionObject_set
    __swig_getmethods__["m_collisionObject"] = ___init__.LocalRayResult_m_collisionObject_get
    if _newclass:m_collisionObject = _swig_property(___init__.LocalRayResult_m_collisionObject_get, ___init__.LocalRayResult_m_collisionObject_set)
    __swig_setmethods__["m_localShapeInfo"] = ___init__.LocalRayResult_m_localShapeInfo_set
    __swig_getmethods__["m_localShapeInfo"] = ___init__.LocalRayResult_m_localShapeInfo_get
    if _newclass:m_localShapeInfo = _swig_property(___init__.LocalRayResult_m_localShapeInfo_get, ___init__.LocalRayResult_m_localShapeInfo_set)
    __swig_setmethods__["m_hitNormalLocal"] = ___init__.LocalRayResult_m_hitNormalLocal_set
    __swig_getmethods__["m_hitNormalLocal"] = ___init__.LocalRayResult_m_hitNormalLocal_get
    if _newclass:m_hitNormalLocal = _swig_property(___init__.LocalRayResult_m_hitNormalLocal_get, ___init__.LocalRayResult_m_hitNormalLocal_set)
    __swig_setmethods__["m_hitFraction"] = ___init__.LocalRayResult_m_hitFraction_set
    __swig_getmethods__["m_hitFraction"] = ___init__.LocalRayResult_m_hitFraction_get
    if _newclass:m_hitFraction = _swig_property(___init__.LocalRayResult_m_hitFraction_get, ___init__.LocalRayResult_m_hitFraction_set)
    __swig_destroy__ = ___init__.delete_LocalRayResult
    __del__ = lambda self : None;
LocalRayResult_swigregister = ___init__.LocalRayResult_swigregister
LocalRayResult_swigregister(LocalRayResult)

class RayResultCallback(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RayResultCallback, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RayResultCallback, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_setmethods__["m_closestHitFraction"] = ___init__.RayResultCallback_m_closestHitFraction_set
    __swig_getmethods__["m_closestHitFraction"] = ___init__.RayResultCallback_m_closestHitFraction_get
    if _newclass:m_closestHitFraction = _swig_property(___init__.RayResultCallback_m_closestHitFraction_get, ___init__.RayResultCallback_m_closestHitFraction_set)
    __swig_setmethods__["m_collisionObject"] = ___init__.RayResultCallback_m_collisionObject_set
    __swig_getmethods__["m_collisionObject"] = ___init__.RayResultCallback_m_collisionObject_get
    if _newclass:m_collisionObject = _swig_property(___init__.RayResultCallback_m_collisionObject_get, ___init__.RayResultCallback_m_collisionObject_set)
    __swig_setmethods__["m_collisionFilterGroup"] = ___init__.RayResultCallback_m_collisionFilterGroup_set
    __swig_getmethods__["m_collisionFilterGroup"] = ___init__.RayResultCallback_m_collisionFilterGroup_get
    if _newclass:m_collisionFilterGroup = _swig_property(___init__.RayResultCallback_m_collisionFilterGroup_get, ___init__.RayResultCallback_m_collisionFilterGroup_set)
    __swig_setmethods__["m_collisionFilterMask"] = ___init__.RayResultCallback_m_collisionFilterMask_set
    __swig_getmethods__["m_collisionFilterMask"] = ___init__.RayResultCallback_m_collisionFilterMask_get
    if _newclass:m_collisionFilterMask = _swig_property(___init__.RayResultCallback_m_collisionFilterMask_get, ___init__.RayResultCallback_m_collisionFilterMask_set)
    __swig_setmethods__["m_flags"] = ___init__.RayResultCallback_m_flags_set
    __swig_getmethods__["m_flags"] = ___init__.RayResultCallback_m_flags_get
    if _newclass:m_flags = _swig_property(___init__.RayResultCallback_m_flags_get, ___init__.RayResultCallback_m_flags_set)
    __swig_destroy__ = ___init__.delete_RayResultCallback
    __del__ = lambda self : None;
    def hasHit(self): return ___init__.RayResultCallback_hasHit(self)
    def needsCollision(self, *args): return ___init__.RayResultCallback_needsCollision(self, *args)
    def addSingleResult(self, *args): return ___init__.RayResultCallback_addSingleResult(self, *args)
RayResultCallback_swigregister = ___init__.RayResultCallback_swigregister
RayResultCallback_swigregister(RayResultCallback)

class ClosestRayResultCallback(RayResultCallback):
    __swig_setmethods__ = {}
    for _s in [RayResultCallback]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ClosestRayResultCallback, name, value)
    __swig_getmethods__ = {}
    for _s in [RayResultCallback]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ClosestRayResultCallback, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = ___init__.new_ClosestRayResultCallback(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["m_rayFromWorld"] = ___init__.ClosestRayResultCallback_m_rayFromWorld_set
    __swig_getmethods__["m_rayFromWorld"] = ___init__.ClosestRayResultCallback_m_rayFromWorld_get
    if _newclass:m_rayFromWorld = _swig_property(___init__.ClosestRayResultCallback_m_rayFromWorld_get, ___init__.ClosestRayResultCallback_m_rayFromWorld_set)
    __swig_setmethods__["m_rayToWorld"] = ___init__.ClosestRayResultCallback_m_rayToWorld_set
    __swig_getmethods__["m_rayToWorld"] = ___init__.ClosestRayResultCallback_m_rayToWorld_get
    if _newclass:m_rayToWorld = _swig_property(___init__.ClosestRayResultCallback_m_rayToWorld_get, ___init__.ClosestRayResultCallback_m_rayToWorld_set)
    __swig_setmethods__["m_hitNormalWorld"] = ___init__.ClosestRayResultCallback_m_hitNormalWorld_set
    __swig_getmethods__["m_hitNormalWorld"] = ___init__.ClosestRayResultCallback_m_hitNormalWorld_get
    if _newclass:m_hitNormalWorld = _swig_property(___init__.ClosestRayResultCallback_m_hitNormalWorld_get, ___init__.ClosestRayResultCallback_m_hitNormalWorld_set)
    __swig_setmethods__["m_hitPointWorld"] = ___init__.ClosestRayResultCallback_m_hitPointWorld_set
    __swig_getmethods__["m_hitPointWorld"] = ___init__.ClosestRayResultCallback_m_hitPointWorld_get
    if _newclass:m_hitPointWorld = _swig_property(___init__.ClosestRayResultCallback_m_hitPointWorld_get, ___init__.ClosestRayResultCallback_m_hitPointWorld_set)
    def addSingleResult(self, *args): return ___init__.ClosestRayResultCallback_addSingleResult(self, *args)
    __swig_destroy__ = ___init__.delete_ClosestRayResultCallback
    __del__ = lambda self : None;
ClosestRayResultCallback_swigregister = ___init__.ClosestRayResultCallback_swigregister
ClosestRayResultCallback_swigregister(ClosestRayResultCallback)

class AllHitsRayResultCallback(RayResultCallback):
    __swig_setmethods__ = {}
    for _s in [RayResultCallback]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AllHitsRayResultCallback, name, value)
    __swig_getmethods__ = {}
    for _s in [RayResultCallback]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AllHitsRayResultCallback, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = ___init__.new_AllHitsRayResultCallback(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["m_collisionObjects"] = ___init__.AllHitsRayResultCallback_m_collisionObjects_set
    __swig_getmethods__["m_collisionObjects"] = ___init__.AllHitsRayResultCallback_m_collisionObjects_get
    if _newclass:m_collisionObjects = _swig_property(___init__.AllHitsRayResultCallback_m_collisionObjects_get, ___init__.AllHitsRayResultCallback_m_collisionObjects_set)
    __swig_setmethods__["m_rayFromWorld"] = ___init__.AllHitsRayResultCallback_m_rayFromWorld_set
    __swig_getmethods__["m_rayFromWorld"] = ___init__.AllHitsRayResultCallback_m_rayFromWorld_get
    if _newclass:m_rayFromWorld = _swig_property(___init__.AllHitsRayResultCallback_m_rayFromWorld_get, ___init__.AllHitsRayResultCallback_m_rayFromWorld_set)
    __swig_setmethods__["m_rayToWorld"] = ___init__.AllHitsRayResultCallback_m_rayToWorld_set
    __swig_getmethods__["m_rayToWorld"] = ___init__.AllHitsRayResultCallback_m_rayToWorld_get
    if _newclass:m_rayToWorld = _swig_property(___init__.AllHitsRayResultCallback_m_rayToWorld_get, ___init__.AllHitsRayResultCallback_m_rayToWorld_set)
    __swig_setmethods__["m_hitNormalWorld"] = ___init__.AllHitsRayResultCallback_m_hitNormalWorld_set
    __swig_getmethods__["m_hitNormalWorld"] = ___init__.AllHitsRayResultCallback_m_hitNormalWorld_get
    if _newclass:m_hitNormalWorld = _swig_property(___init__.AllHitsRayResultCallback_m_hitNormalWorld_get, ___init__.AllHitsRayResultCallback_m_hitNormalWorld_set)
    __swig_setmethods__["m_hitPointWorld"] = ___init__.AllHitsRayResultCallback_m_hitPointWorld_set
    __swig_getmethods__["m_hitPointWorld"] = ___init__.AllHitsRayResultCallback_m_hitPointWorld_get
    if _newclass:m_hitPointWorld = _swig_property(___init__.AllHitsRayResultCallback_m_hitPointWorld_get, ___init__.AllHitsRayResultCallback_m_hitPointWorld_set)
    __swig_setmethods__["m_hitFractions"] = ___init__.AllHitsRayResultCallback_m_hitFractions_set
    __swig_getmethods__["m_hitFractions"] = ___init__.AllHitsRayResultCallback_m_hitFractions_get
    if _newclass:m_hitFractions = _swig_property(___init__.AllHitsRayResultCallback_m_hitFractions_get, ___init__.AllHitsRayResultCallback_m_hitFractions_set)
    def addSingleResult(self, *args): return ___init__.AllHitsRayResultCallback_addSingleResult(self, *args)
    __swig_destroy__ = ___init__.delete_AllHitsRayResultCallback
    __del__ = lambda self : None;
AllHitsRayResultCallback_swigregister = ___init__.AllHitsRayResultCallback_swigregister
AllHitsRayResultCallback_swigregister(AllHitsRayResultCallback)

class LocalConvexResult(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LocalConvexResult, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LocalConvexResult, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = ___init__.new_LocalConvexResult(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["m_hitCollisionObject"] = ___init__.LocalConvexResult_m_hitCollisionObject_set
    __swig_getmethods__["m_hitCollisionObject"] = ___init__.LocalConvexResult_m_hitCollisionObject_get
    if _newclass:m_hitCollisionObject = _swig_property(___init__.LocalConvexResult_m_hitCollisionObject_get, ___init__.LocalConvexResult_m_hitCollisionObject_set)
    __swig_setmethods__["m_localShapeInfo"] = ___init__.LocalConvexResult_m_localShapeInfo_set
    __swig_getmethods__["m_localShapeInfo"] = ___init__.LocalConvexResult_m_localShapeInfo_get
    if _newclass:m_localShapeInfo = _swig_property(___init__.LocalConvexResult_m_localShapeInfo_get, ___init__.LocalConvexResult_m_localShapeInfo_set)
    __swig_setmethods__["m_hitNormalLocal"] = ___init__.LocalConvexResult_m_hitNormalLocal_set
    __swig_getmethods__["m_hitNormalLocal"] = ___init__.LocalConvexResult_m_hitNormalLocal_get
    if _newclass:m_hitNormalLocal = _swig_property(___init__.LocalConvexResult_m_hitNormalLocal_get, ___init__.LocalConvexResult_m_hitNormalLocal_set)
    __swig_setmethods__["m_hitPointLocal"] = ___init__.LocalConvexResult_m_hitPointLocal_set
    __swig_getmethods__["m_hitPointLocal"] = ___init__.LocalConvexResult_m_hitPointLocal_get
    if _newclass:m_hitPointLocal = _swig_property(___init__.LocalConvexResult_m_hitPointLocal_get, ___init__.LocalConvexResult_m_hitPointLocal_set)
    __swig_setmethods__["m_hitFraction"] = ___init__.LocalConvexResult_m_hitFraction_set
    __swig_getmethods__["m_hitFraction"] = ___init__.LocalConvexResult_m_hitFraction_get
    if _newclass:m_hitFraction = _swig_property(___init__.LocalConvexResult_m_hitFraction_get, ___init__.LocalConvexResult_m_hitFraction_set)
    __swig_destroy__ = ___init__.delete_LocalConvexResult
    __del__ = lambda self : None;
LocalConvexResult_swigregister = ___init__.LocalConvexResult_swigregister
LocalConvexResult_swigregister(LocalConvexResult)

class ConvexResultCallback(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConvexResultCallback, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConvexResultCallback, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_setmethods__["m_closestHitFraction"] = ___init__.ConvexResultCallback_m_closestHitFraction_set
    __swig_getmethods__["m_closestHitFraction"] = ___init__.ConvexResultCallback_m_closestHitFraction_get
    if _newclass:m_closestHitFraction = _swig_property(___init__.ConvexResultCallback_m_closestHitFraction_get, ___init__.ConvexResultCallback_m_closestHitFraction_set)
    __swig_setmethods__["m_collisionFilterGroup"] = ___init__.ConvexResultCallback_m_collisionFilterGroup_set
    __swig_getmethods__["m_collisionFilterGroup"] = ___init__.ConvexResultCallback_m_collisionFilterGroup_get
    if _newclass:m_collisionFilterGroup = _swig_property(___init__.ConvexResultCallback_m_collisionFilterGroup_get, ___init__.ConvexResultCallback_m_collisionFilterGroup_set)
    __swig_setmethods__["m_collisionFilterMask"] = ___init__.ConvexResultCallback_m_collisionFilterMask_set
    __swig_getmethods__["m_collisionFilterMask"] = ___init__.ConvexResultCallback_m_collisionFilterMask_get
    if _newclass:m_collisionFilterMask = _swig_property(___init__.ConvexResultCallback_m_collisionFilterMask_get, ___init__.ConvexResultCallback_m_collisionFilterMask_set)
    __swig_destroy__ = ___init__.delete_ConvexResultCallback
    __del__ = lambda self : None;
    def hasHit(self): return ___init__.ConvexResultCallback_hasHit(self)
    def needsCollision(self, *args): return ___init__.ConvexResultCallback_needsCollision(self, *args)
    def addSingleResult(self, *args): return ___init__.ConvexResultCallback_addSingleResult(self, *args)
ConvexResultCallback_swigregister = ___init__.ConvexResultCallback_swigregister
ConvexResultCallback_swigregister(ConvexResultCallback)

class ClosestConvexResultCallback(ConvexResultCallback):
    __swig_setmethods__ = {}
    for _s in [ConvexResultCallback]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ClosestConvexResultCallback, name, value)
    __swig_getmethods__ = {}
    for _s in [ConvexResultCallback]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ClosestConvexResultCallback, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = ___init__.new_ClosestConvexResultCallback(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["m_convexFromWorld"] = ___init__.ClosestConvexResultCallback_m_convexFromWorld_set
    __swig_getmethods__["m_convexFromWorld"] = ___init__.ClosestConvexResultCallback_m_convexFromWorld_get
    if _newclass:m_convexFromWorld = _swig_property(___init__.ClosestConvexResultCallback_m_convexFromWorld_get, ___init__.ClosestConvexResultCallback_m_convexFromWorld_set)
    __swig_setmethods__["m_convexToWorld"] = ___init__.ClosestConvexResultCallback_m_convexToWorld_set
    __swig_getmethods__["m_convexToWorld"] = ___init__.ClosestConvexResultCallback_m_convexToWorld_get
    if _newclass:m_convexToWorld = _swig_property(___init__.ClosestConvexResultCallback_m_convexToWorld_get, ___init__.ClosestConvexResultCallback_m_convexToWorld_set)
    __swig_setmethods__["m_hitNormalWorld"] = ___init__.ClosestConvexResultCallback_m_hitNormalWorld_set
    __swig_getmethods__["m_hitNormalWorld"] = ___init__.ClosestConvexResultCallback_m_hitNormalWorld_get
    if _newclass:m_hitNormalWorld = _swig_property(___init__.ClosestConvexResultCallback_m_hitNormalWorld_get, ___init__.ClosestConvexResultCallback_m_hitNormalWorld_set)
    __swig_setmethods__["m_hitPointWorld"] = ___init__.ClosestConvexResultCallback_m_hitPointWorld_set
    __swig_getmethods__["m_hitPointWorld"] = ___init__.ClosestConvexResultCallback_m_hitPointWorld_get
    if _newclass:m_hitPointWorld = _swig_property(___init__.ClosestConvexResultCallback_m_hitPointWorld_get, ___init__.ClosestConvexResultCallback_m_hitPointWorld_set)
    __swig_setmethods__["m_hitCollisionObject"] = ___init__.ClosestConvexResultCallback_m_hitCollisionObject_set
    __swig_getmethods__["m_hitCollisionObject"] = ___init__.ClosestConvexResultCallback_m_hitCollisionObject_get
    if _newclass:m_hitCollisionObject = _swig_property(___init__.ClosestConvexResultCallback_m_hitCollisionObject_get, ___init__.ClosestConvexResultCallback_m_hitCollisionObject_set)
    def addSingleResult(self, *args): return ___init__.ClosestConvexResultCallback_addSingleResult(self, *args)
    __swig_destroy__ = ___init__.delete_ClosestConvexResultCallback
    __del__ = lambda self : None;
ClosestConvexResultCallback_swigregister = ___init__.ClosestConvexResultCallback_swigregister
ClosestConvexResultCallback_swigregister(ClosestConvexResultCallback)

class ContactResultCallback(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ContactResultCallback, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ContactResultCallback, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_setmethods__["m_collisionFilterGroup"] = ___init__.ContactResultCallback_m_collisionFilterGroup_set
    __swig_getmethods__["m_collisionFilterGroup"] = ___init__.ContactResultCallback_m_collisionFilterGroup_get
    if _newclass:m_collisionFilterGroup = _swig_property(___init__.ContactResultCallback_m_collisionFilterGroup_get, ___init__.ContactResultCallback_m_collisionFilterGroup_set)
    __swig_setmethods__["m_collisionFilterMask"] = ___init__.ContactResultCallback_m_collisionFilterMask_set
    __swig_getmethods__["m_collisionFilterMask"] = ___init__.ContactResultCallback_m_collisionFilterMask_get
    if _newclass:m_collisionFilterMask = _swig_property(___init__.ContactResultCallback_m_collisionFilterMask_get, ___init__.ContactResultCallback_m_collisionFilterMask_set)
    __swig_destroy__ = ___init__.delete_ContactResultCallback
    __del__ = lambda self : None;
    def needsCollision(self, *args): return ___init__.ContactResultCallback_needsCollision(self, *args)
    def addSingleResult(self, *args): return ___init__.ContactResultCallback_addSingleResult(self, *args)
ContactResultCallback_swigregister = ___init__.ContactResultCallback_swigregister
ContactResultCallback_swigregister(ContactResultCallback)

class btCollisionWorld(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btCollisionWorld, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btCollisionWorld, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = ___init__.new_btCollisionWorld(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = ___init__.delete_btCollisionWorld
    __del__ = lambda self : None;
    def setBroadphase(self, *args): return ___init__.btCollisionWorld_setBroadphase(self, *args)
    def getBroadphase(self, *args): return ___init__.btCollisionWorld_getBroadphase(self, *args)
    def getPairCache(self): return ___init__.btCollisionWorld_getPairCache(self)
    def getDispatcher(self, *args): return ___init__.btCollisionWorld_getDispatcher(self, *args)
    def updateSingleAabb(self, *args): return ___init__.btCollisionWorld_updateSingleAabb(self, *args)
    def updateAabbs(self): return ___init__.btCollisionWorld_updateAabbs(self)
    def setDebugDrawer(self, *args): return ___init__.btCollisionWorld_setDebugDrawer(self, *args)
    def getDebugDrawer(self): return ___init__.btCollisionWorld_getDebugDrawer(self)
    def debugDrawWorld(self): return ___init__.btCollisionWorld_debugDrawWorld(self)
    def debugDrawObject(self, *args): return ___init__.btCollisionWorld_debugDrawObject(self, *args)
    def getNumCollisionObjects(self): return ___init__.btCollisionWorld_getNumCollisionObjects(self)
    def rayTest(self, *args): return ___init__.btCollisionWorld_rayTest(self, *args)
    def convexSweepTest(self, *args): return ___init__.btCollisionWorld_convexSweepTest(self, *args)
    def contactTest(self, *args): return ___init__.btCollisionWorld_contactTest(self, *args)
    def contactPairTest(self, *args): return ___init__.btCollisionWorld_contactPairTest(self, *args)
    __swig_getmethods__["rayTestSingle"] = lambda x: ___init__.btCollisionWorld_rayTestSingle
    if _newclass:rayTestSingle = staticmethod(___init__.btCollisionWorld_rayTestSingle)
    __swig_getmethods__["objectQuerySingle"] = lambda x: ___init__.btCollisionWorld_objectQuerySingle
    if _newclass:objectQuerySingle = staticmethod(___init__.btCollisionWorld_objectQuerySingle)
    def addCollisionObject(self, *args): return ___init__.btCollisionWorld_addCollisionObject(self, *args)
    def getCollisionObjectArray(self, *args): return ___init__.btCollisionWorld_getCollisionObjectArray(self, *args)
    def removeCollisionObject(self, *args): return ___init__.btCollisionWorld_removeCollisionObject(self, *args)
    def performDiscreteCollisionDetection(self): return ___init__.btCollisionWorld_performDiscreteCollisionDetection(self)
    def getDispatchInfo(self, *args): return ___init__.btCollisionWorld_getDispatchInfo(self, *args)
    def getForceUpdateAllAabbs(self): return ___init__.btCollisionWorld_getForceUpdateAllAabbs(self)
    def setForceUpdateAllAabbs(self, *args): return ___init__.btCollisionWorld_setForceUpdateAllAabbs(self, *args)
    def serialize(self, *args): return ___init__.btCollisionWorld_serialize(self, *args)
btCollisionWorld_swigregister = ___init__.btCollisionWorld_swigregister
btCollisionWorld_swigregister(btCollisionWorld)

def btCollisionWorld_rayTestSingle(*args):
  return ___init__.btCollisionWorld_rayTestSingle(*args)
btCollisionWorld_rayTestSingle = ___init__.btCollisionWorld_rayTestSingle

def btCollisionWorld_objectQuerySingle(*args):
  return ___init__.btCollisionWorld_objectQuerySingle(*args)
btCollisionWorld_objectQuerySingle = ___init__.btCollisionWorld_objectQuerySingle

BT_SIMPLE_DYNAMICS_WORLD = ___init__.BT_SIMPLE_DYNAMICS_WORLD
BT_DISCRETE_DYNAMICS_WORLD = ___init__.BT_DISCRETE_DYNAMICS_WORLD
BT_CONTINUOUS_DYNAMICS_WORLD = ___init__.BT_CONTINUOUS_DYNAMICS_WORLD
BT_SOFT_RIGID_DYNAMICS_WORLD = ___init__.BT_SOFT_RIGID_DYNAMICS_WORLD
class btDynamicsWorld(btCollisionWorld):
    __swig_setmethods__ = {}
    for _s in [btCollisionWorld]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btDynamicsWorld, name, value)
    __swig_getmethods__ = {}
    for _s in [btCollisionWorld]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, btDynamicsWorld, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = ___init__.delete_btDynamicsWorld
    __del__ = lambda self : None;
    def stepSimulation(self, *args): return ___init__.btDynamicsWorld_stepSimulation(self, *args)
    def debugDrawWorld(self): return ___init__.btDynamicsWorld_debugDrawWorld(self)
    def addConstraint(self, *args): return ___init__.btDynamicsWorld_addConstraint(self, *args)
    def removeConstraint(self, *args): return ___init__.btDynamicsWorld_removeConstraint(self, *args)
    def addAction(self, *args): return ___init__.btDynamicsWorld_addAction(self, *args)
    def removeAction(self, *args): return ___init__.btDynamicsWorld_removeAction(self, *args)
    def setGravity(self, *args): return ___init__.btDynamicsWorld_setGravity(self, *args)
    def getGravity(self): return ___init__.btDynamicsWorld_getGravity(self)
    def synchronizeMotionStates(self): return ___init__.btDynamicsWorld_synchronizeMotionStates(self)
    def addRigidBody(self, *args): return ___init__.btDynamicsWorld_addRigidBody(self, *args)
    def removeRigidBody(self, *args): return ___init__.btDynamicsWorld_removeRigidBody(self, *args)
    def setConstraintSolver(self, *args): return ___init__.btDynamicsWorld_setConstraintSolver(self, *args)
    def getConstraintSolver(self): return ___init__.btDynamicsWorld_getConstraintSolver(self)
    def getNumConstraints(self): return ___init__.btDynamicsWorld_getNumConstraints(self)
    def getConstraint(self, *args): return ___init__.btDynamicsWorld_getConstraint(self, *args)
    def getWorldType(self): return ___init__.btDynamicsWorld_getWorldType(self)
    def clearForces(self): return ___init__.btDynamicsWorld_clearForces(self)
    def setInternalTickCallback(self, *args): return ___init__.btDynamicsWorld_setInternalTickCallback(self, *args)
    def setWorldUserInfo(self, *args): return ___init__.btDynamicsWorld_setWorldUserInfo(self, *args)
    def getWorldUserInfo(self): return ___init__.btDynamicsWorld_getWorldUserInfo(self)
    def getSolverInfo(self): return ___init__.btDynamicsWorld_getSolverInfo(self)
    def addVehicle(self, *args): return ___init__.btDynamicsWorld_addVehicle(self, *args)
    def removeVehicle(self, *args): return ___init__.btDynamicsWorld_removeVehicle(self, *args)
    def addCharacter(self, *args): return ___init__.btDynamicsWorld_addCharacter(self, *args)
    def removeCharacter(self, *args): return ___init__.btDynamicsWorld_removeCharacter(self, *args)
btDynamicsWorld_swigregister = ___init__.btDynamicsWorld_swigregister
btDynamicsWorld_swigregister(btDynamicsWorld)

class btDiscreteDynamicsWorld(btDynamicsWorld):
    __swig_setmethods__ = {}
    for _s in [btDynamicsWorld]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btDiscreteDynamicsWorld, name, value)
    __swig_getmethods__ = {}
    for _s in [btDynamicsWorld]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, btDiscreteDynamicsWorld, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = ___init__.new_btDiscreteDynamicsWorld(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = ___init__.delete_btDiscreteDynamicsWorld
    __del__ = lambda self : None;
    def stepSimulation(self, *args): return ___init__.btDiscreteDynamicsWorld_stepSimulation(self, *args)
    def synchronizeMotionStates(self): return ___init__.btDiscreteDynamicsWorld_synchronizeMotionStates(self)
    def synchronizeSingleMotionState(self, *args): return ___init__.btDiscreteDynamicsWorld_synchronizeSingleMotionState(self, *args)
    def addConstraint(self, *args): return ___init__.btDiscreteDynamicsWorld_addConstraint(self, *args)
    def removeConstraint(self, *args): return ___init__.btDiscreteDynamicsWorld_removeConstraint(self, *args)
    def addAction(self, *args): return ___init__.btDiscreteDynamicsWorld_addAction(self, *args)
    def removeAction(self, *args): return ___init__.btDiscreteDynamicsWorld_removeAction(self, *args)
    def getSimulationIslandManager(self, *args): return ___init__.btDiscreteDynamicsWorld_getSimulationIslandManager(self, *args)
    def getCollisionWorld(self): return ___init__.btDiscreteDynamicsWorld_getCollisionWorld(self)
    def setGravity(self, *args): return ___init__.btDiscreteDynamicsWorld_setGravity(self, *args)
    def getGravity(self): return ___init__.btDiscreteDynamicsWorld_getGravity(self)
    def addCollisionObject(self, *args): return ___init__.btDiscreteDynamicsWorld_addCollisionObject(self, *args)
    def addRigidBody(self, *args): return ___init__.btDiscreteDynamicsWorld_addRigidBody(self, *args)
    def removeRigidBody(self, *args): return ___init__.btDiscreteDynamicsWorld_removeRigidBody(self, *args)
    def removeCollisionObject(self, *args): return ___init__.btDiscreteDynamicsWorld_removeCollisionObject(self, *args)
    def debugDrawConstraint(self, *args): return ___init__.btDiscreteDynamicsWorld_debugDrawConstraint(self, *args)
    def debugDrawWorld(self): return ___init__.btDiscreteDynamicsWorld_debugDrawWorld(self)
    def setConstraintSolver(self, *args): return ___init__.btDiscreteDynamicsWorld_setConstraintSolver(self, *args)
    def getConstraintSolver(self): return ___init__.btDiscreteDynamicsWorld_getConstraintSolver(self)
    def getNumConstraints(self): return ___init__.btDiscreteDynamicsWorld_getNumConstraints(self)
    def getConstraint(self, *args): return ___init__.btDiscreteDynamicsWorld_getConstraint(self, *args)
    def getWorldType(self): return ___init__.btDiscreteDynamicsWorld_getWorldType(self)
    def clearForces(self): return ___init__.btDiscreteDynamicsWorld_clearForces(self)
    def applyGravity(self): return ___init__.btDiscreteDynamicsWorld_applyGravity(self)
    def setNumTasks(self, *args): return ___init__.btDiscreteDynamicsWorld_setNumTasks(self, *args)
    def updateVehicles(self, *args): return ___init__.btDiscreteDynamicsWorld_updateVehicles(self, *args)
    def addVehicle(self, *args): return ___init__.btDiscreteDynamicsWorld_addVehicle(self, *args)
    def removeVehicle(self, *args): return ___init__.btDiscreteDynamicsWorld_removeVehicle(self, *args)
    def addCharacter(self, *args): return ___init__.btDiscreteDynamicsWorld_addCharacter(self, *args)
    def removeCharacter(self, *args): return ___init__.btDiscreteDynamicsWorld_removeCharacter(self, *args)
    def setSynchronizeAllMotionStates(self, *args): return ___init__.btDiscreteDynamicsWorld_setSynchronizeAllMotionStates(self, *args)
    def getSynchronizeAllMotionStates(self): return ___init__.btDiscreteDynamicsWorld_getSynchronizeAllMotionStates(self)
    def serialize(self, *args): return ___init__.btDiscreteDynamicsWorld_serialize(self, *args)
btDiscreteDynamicsWorld_swigregister = ___init__.btDiscreteDynamicsWorld_swigregister
btDiscreteDynamicsWorld_swigregister(btDiscreteDynamicsWorld)

class btSimpleDynamicsWorld(btDynamicsWorld):
    __swig_setmethods__ = {}
    for _s in [btDynamicsWorld]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btSimpleDynamicsWorld, name, value)
    __swig_getmethods__ = {}
    for _s in [btDynamicsWorld]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, btSimpleDynamicsWorld, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = ___init__.new_btSimpleDynamicsWorld(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = ___init__.delete_btSimpleDynamicsWorld
    __del__ = lambda self : None;
    def stepSimulation(self, *args): return ___init__.btSimpleDynamicsWorld_stepSimulation(self, *args)
    def setGravity(self, *args): return ___init__.btSimpleDynamicsWorld_setGravity(self, *args)
    def getGravity(self): return ___init__.btSimpleDynamicsWorld_getGravity(self)
    def addRigidBody(self, *args): return ___init__.btSimpleDynamicsWorld_addRigidBody(self, *args)
    def removeRigidBody(self, *args): return ___init__.btSimpleDynamicsWorld_removeRigidBody(self, *args)
    def debugDrawWorld(self): return ___init__.btSimpleDynamicsWorld_debugDrawWorld(self)
    def addAction(self, *args): return ___init__.btSimpleDynamicsWorld_addAction(self, *args)
    def removeAction(self, *args): return ___init__.btSimpleDynamicsWorld_removeAction(self, *args)
    def removeCollisionObject(self, *args): return ___init__.btSimpleDynamicsWorld_removeCollisionObject(self, *args)
    def updateAabbs(self): return ___init__.btSimpleDynamicsWorld_updateAabbs(self)
    def synchronizeMotionStates(self): return ___init__.btSimpleDynamicsWorld_synchronizeMotionStates(self)
    def setConstraintSolver(self, *args): return ___init__.btSimpleDynamicsWorld_setConstraintSolver(self, *args)
    def getConstraintSolver(self): return ___init__.btSimpleDynamicsWorld_getConstraintSolver(self)
    def getWorldType(self): return ___init__.btSimpleDynamicsWorld_getWorldType(self)
    def clearForces(self): return ___init__.btSimpleDynamicsWorld_clearForces(self)
btSimpleDynamicsWorld_swigregister = ___init__.btSimpleDynamicsWorld_swigregister
btSimpleDynamicsWorld_swigregister(btSimpleDynamicsWorld)

btRigidBodyDataName = ___init__.btRigidBodyDataName
BT_DISABLE_WORLD_GRAVITY = ___init__.BT_DISABLE_WORLD_GRAVITY
class btRigidBodyConstructionInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btRigidBodyConstructionInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btRigidBodyConstructionInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_mass"] = ___init__.btRigidBodyConstructionInfo_m_mass_set
    __swig_getmethods__["m_mass"] = ___init__.btRigidBodyConstructionInfo_m_mass_get
    if _newclass:m_mass = _swig_property(___init__.btRigidBodyConstructionInfo_m_mass_get, ___init__.btRigidBodyConstructionInfo_m_mass_set)
    __swig_setmethods__["m_motionState"] = ___init__.btRigidBodyConstructionInfo_m_motionState_set
    __swig_getmethods__["m_motionState"] = ___init__.btRigidBodyConstructionInfo_m_motionState_get
    if _newclass:m_motionState = _swig_property(___init__.btRigidBodyConstructionInfo_m_motionState_get, ___init__.btRigidBodyConstructionInfo_m_motionState_set)
    __swig_setmethods__["m_startWorldTransform"] = ___init__.btRigidBodyConstructionInfo_m_startWorldTransform_set
    __swig_getmethods__["m_startWorldTransform"] = ___init__.btRigidBodyConstructionInfo_m_startWorldTransform_get
    if _newclass:m_startWorldTransform = _swig_property(___init__.btRigidBodyConstructionInfo_m_startWorldTransform_get, ___init__.btRigidBodyConstructionInfo_m_startWorldTransform_set)
    __swig_setmethods__["m_collisionShape"] = ___init__.btRigidBodyConstructionInfo_m_collisionShape_set
    __swig_getmethods__["m_collisionShape"] = ___init__.btRigidBodyConstructionInfo_m_collisionShape_get
    if _newclass:m_collisionShape = _swig_property(___init__.btRigidBodyConstructionInfo_m_collisionShape_get, ___init__.btRigidBodyConstructionInfo_m_collisionShape_set)
    __swig_setmethods__["m_localInertia"] = ___init__.btRigidBodyConstructionInfo_m_localInertia_set
    __swig_getmethods__["m_localInertia"] = ___init__.btRigidBodyConstructionInfo_m_localInertia_get
    if _newclass:m_localInertia = _swig_property(___init__.btRigidBodyConstructionInfo_m_localInertia_get, ___init__.btRigidBodyConstructionInfo_m_localInertia_set)
    __swig_setmethods__["m_linearDamping"] = ___init__.btRigidBodyConstructionInfo_m_linearDamping_set
    __swig_getmethods__["m_linearDamping"] = ___init__.btRigidBodyConstructionInfo_m_linearDamping_get
    if _newclass:m_linearDamping = _swig_property(___init__.btRigidBodyConstructionInfo_m_linearDamping_get, ___init__.btRigidBodyConstructionInfo_m_linearDamping_set)
    __swig_setmethods__["m_angularDamping"] = ___init__.btRigidBodyConstructionInfo_m_angularDamping_set
    __swig_getmethods__["m_angularDamping"] = ___init__.btRigidBodyConstructionInfo_m_angularDamping_get
    if _newclass:m_angularDamping = _swig_property(___init__.btRigidBodyConstructionInfo_m_angularDamping_get, ___init__.btRigidBodyConstructionInfo_m_angularDamping_set)
    __swig_setmethods__["m_friction"] = ___init__.btRigidBodyConstructionInfo_m_friction_set
    __swig_getmethods__["m_friction"] = ___init__.btRigidBodyConstructionInfo_m_friction_get
    if _newclass:m_friction = _swig_property(___init__.btRigidBodyConstructionInfo_m_friction_get, ___init__.btRigidBodyConstructionInfo_m_friction_set)
    __swig_setmethods__["m_restitution"] = ___init__.btRigidBodyConstructionInfo_m_restitution_set
    __swig_getmethods__["m_restitution"] = ___init__.btRigidBodyConstructionInfo_m_restitution_get
    if _newclass:m_restitution = _swig_property(___init__.btRigidBodyConstructionInfo_m_restitution_get, ___init__.btRigidBodyConstructionInfo_m_restitution_set)
    __swig_setmethods__["m_linearSleepingThreshold"] = ___init__.btRigidBodyConstructionInfo_m_linearSleepingThreshold_set
    __swig_getmethods__["m_linearSleepingThreshold"] = ___init__.btRigidBodyConstructionInfo_m_linearSleepingThreshold_get
    if _newclass:m_linearSleepingThreshold = _swig_property(___init__.btRigidBodyConstructionInfo_m_linearSleepingThreshold_get, ___init__.btRigidBodyConstructionInfo_m_linearSleepingThreshold_set)
    __swig_setmethods__["m_angularSleepingThreshold"] = ___init__.btRigidBodyConstructionInfo_m_angularSleepingThreshold_set
    __swig_getmethods__["m_angularSleepingThreshold"] = ___init__.btRigidBodyConstructionInfo_m_angularSleepingThreshold_get
    if _newclass:m_angularSleepingThreshold = _swig_property(___init__.btRigidBodyConstructionInfo_m_angularSleepingThreshold_get, ___init__.btRigidBodyConstructionInfo_m_angularSleepingThreshold_set)
    __swig_setmethods__["m_additionalDamping"] = ___init__.btRigidBodyConstructionInfo_m_additionalDamping_set
    __swig_getmethods__["m_additionalDamping"] = ___init__.btRigidBodyConstructionInfo_m_additionalDamping_get
    if _newclass:m_additionalDamping = _swig_property(___init__.btRigidBodyConstructionInfo_m_additionalDamping_get, ___init__.btRigidBodyConstructionInfo_m_additionalDamping_set)
    __swig_setmethods__["m_additionalDampingFactor"] = ___init__.btRigidBodyConstructionInfo_m_additionalDampingFactor_set
    __swig_getmethods__["m_additionalDampingFactor"] = ___init__.btRigidBodyConstructionInfo_m_additionalDampingFactor_get
    if _newclass:m_additionalDampingFactor = _swig_property(___init__.btRigidBodyConstructionInfo_m_additionalDampingFactor_get, ___init__.btRigidBodyConstructionInfo_m_additionalDampingFactor_set)
    __swig_setmethods__["m_additionalLinearDampingThresholdSqr"] = ___init__.btRigidBodyConstructionInfo_m_additionalLinearDampingThresholdSqr_set
    __swig_getmethods__["m_additionalLinearDampingThresholdSqr"] = ___init__.btRigidBodyConstructionInfo_m_additionalLinearDampingThresholdSqr_get
    if _newclass:m_additionalLinearDampingThresholdSqr = _swig_property(___init__.btRigidBodyConstructionInfo_m_additionalLinearDampingThresholdSqr_get, ___init__.btRigidBodyConstructionInfo_m_additionalLinearDampingThresholdSqr_set)
    __swig_setmethods__["m_additionalAngularDampingThresholdSqr"] = ___init__.btRigidBodyConstructionInfo_m_additionalAngularDampingThresholdSqr_set
    __swig_getmethods__["m_additionalAngularDampingThresholdSqr"] = ___init__.btRigidBodyConstructionInfo_m_additionalAngularDampingThresholdSqr_get
    if _newclass:m_additionalAngularDampingThresholdSqr = _swig_property(___init__.btRigidBodyConstructionInfo_m_additionalAngularDampingThresholdSqr_get, ___init__.btRigidBodyConstructionInfo_m_additionalAngularDampingThresholdSqr_set)
    __swig_setmethods__["m_additionalAngularDampingFactor"] = ___init__.btRigidBodyConstructionInfo_m_additionalAngularDampingFactor_set
    __swig_getmethods__["m_additionalAngularDampingFactor"] = ___init__.btRigidBodyConstructionInfo_m_additionalAngularDampingFactor_get
    if _newclass:m_additionalAngularDampingFactor = _swig_property(___init__.btRigidBodyConstructionInfo_m_additionalAngularDampingFactor_get, ___init__.btRigidBodyConstructionInfo_m_additionalAngularDampingFactor_set)
    def __init__(self, *args): 
        this = ___init__.new_btRigidBodyConstructionInfo(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = ___init__.delete_btRigidBodyConstructionInfo
    __del__ = lambda self : None;
btRigidBodyConstructionInfo_swigregister = ___init__.btRigidBodyConstructionInfo_swigregister
btRigidBodyConstructionInfo_swigregister(btRigidBodyConstructionInfo)
cvar = ___init__.cvar

class btRigidBody(btCollisionObject):
    __swig_setmethods__ = {}
    for _s in [btCollisionObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btRigidBody, name, value)
    __swig_getmethods__ = {}
    for _s in [btCollisionObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, btRigidBody, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = ___init__.new_btRigidBody(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = ___init__.delete_btRigidBody
    __del__ = lambda self : None;
    def proceedToTransform(self, *args): return ___init__.btRigidBody_proceedToTransform(self, *args)
    __swig_getmethods__["upcast"] = lambda x: ___init__.btRigidBody_upcast
    if _newclass:upcast = staticmethod(___init__.btRigidBody_upcast)
    def predictIntegratedTransform(self, *args): return ___init__.btRigidBody_predictIntegratedTransform(self, *args)
    def saveKinematicState(self, *args): return ___init__.btRigidBody_saveKinematicState(self, *args)
    def applyGravity(self): return ___init__.btRigidBody_applyGravity(self)
    def setGravity(self, *args): return ___init__.btRigidBody_setGravity(self, *args)
    def getGravity(self): return ___init__.btRigidBody_getGravity(self)
    def setDamping(self, *args): return ___init__.btRigidBody_setDamping(self, *args)
    def getLinearDamping(self): return ___init__.btRigidBody_getLinearDamping(self)
    def getAngularDamping(self): return ___init__.btRigidBody_getAngularDamping(self)
    def getLinearSleepingThreshold(self): return ___init__.btRigidBody_getLinearSleepingThreshold(self)
    def getAngularSleepingThreshold(self): return ___init__.btRigidBody_getAngularSleepingThreshold(self)
    def applyDamping(self, *args): return ___init__.btRigidBody_applyDamping(self, *args)
    def getCollisionShape(self, *args): return ___init__.btRigidBody_getCollisionShape(self, *args)
    def setMassProps(self, *args): return ___init__.btRigidBody_setMassProps(self, *args)
    def getLinearFactor(self): return ___init__.btRigidBody_getLinearFactor(self)
    def setLinearFactor(self, *args): return ___init__.btRigidBody_setLinearFactor(self, *args)
    def getInvMass(self): return ___init__.btRigidBody_getInvMass(self)
    def getInvInertiaTensorWorld(self): return ___init__.btRigidBody_getInvInertiaTensorWorld(self)
    def integrateVelocities(self, *args): return ___init__.btRigidBody_integrateVelocities(self, *args)
    def setCenterOfMassTransform(self, *args): return ___init__.btRigidBody_setCenterOfMassTransform(self, *args)
    def applyCentralForce(self, *args): return ___init__.btRigidBody_applyCentralForce(self, *args)
    def getTotalForce(self): return ___init__.btRigidBody_getTotalForce(self)
    def getTotalTorque(self): return ___init__.btRigidBody_getTotalTorque(self)
    def getInvInertiaDiagLocal(self): return ___init__.btRigidBody_getInvInertiaDiagLocal(self)
    def setInvInertiaDiagLocal(self, *args): return ___init__.btRigidBody_setInvInertiaDiagLocal(self, *args)
    def setSleepingThresholds(self, *args): return ___init__.btRigidBody_setSleepingThresholds(self, *args)
    def applyTorque(self, *args): return ___init__.btRigidBody_applyTorque(self, *args)
    def applyForce(self, *args): return ___init__.btRigidBody_applyForce(self, *args)
    def applyCentralImpulse(self, *args): return ___init__.btRigidBody_applyCentralImpulse(self, *args)
    def applyTorqueImpulse(self, *args): return ___init__.btRigidBody_applyTorqueImpulse(self, *args)
    def applyImpulse(self, *args): return ___init__.btRigidBody_applyImpulse(self, *args)
    def clearForces(self): return ___init__.btRigidBody_clearForces(self)
    def updateInertiaTensor(self): return ___init__.btRigidBody_updateInertiaTensor(self)
    def getCenterOfMassPosition(self): return ___init__.btRigidBody_getCenterOfMassPosition(self)
    def getOrientation(self): return ___init__.btRigidBody_getOrientation(self)
    def getCenterOfMassTransform(self): return ___init__.btRigidBody_getCenterOfMassTransform(self)
    def getLinearVelocity(self): return ___init__.btRigidBody_getLinearVelocity(self)
    def getAngularVelocity(self): return ___init__.btRigidBody_getAngularVelocity(self)
    def setLinearVelocity(self, *args): return ___init__.btRigidBody_setLinearVelocity(self, *args)
    def setAngularVelocity(self, *args): return ___init__.btRigidBody_setAngularVelocity(self, *args)
    def getVelocityInLocalPoint(self, *args): return ___init__.btRigidBody_getVelocityInLocalPoint(self, *args)
    def translate(self, *args): return ___init__.btRigidBody_translate(self, *args)
    def getAabb(self): return ___init__.btRigidBody_getAabb(self)
    def computeImpulseDenominator(self, *args): return ___init__.btRigidBody_computeImpulseDenominator(self, *args)
    def computeAngularImpulseDenominator(self, *args): return ___init__.btRigidBody_computeAngularImpulseDenominator(self, *args)
    def updateDeactivation(self, *args): return ___init__.btRigidBody_updateDeactivation(self, *args)
    def wantsSleeping(self): return ___init__.btRigidBody_wantsSleeping(self)
    def getBroadphaseProxy(self, *args): return ___init__.btRigidBody_getBroadphaseProxy(self, *args)
    def setNewBroadphaseProxy(self, *args): return ___init__.btRigidBody_setNewBroadphaseProxy(self, *args)
    def getMotionState(self, *args): return ___init__.btRigidBody_getMotionState(self, *args)
    def setMotionState(self, *args): return ___init__.btRigidBody_setMotionState(self, *args)
    __swig_setmethods__["m_contactSolverType"] = ___init__.btRigidBody_m_contactSolverType_set
    __swig_getmethods__["m_contactSolverType"] = ___init__.btRigidBody_m_contactSolverType_get
    if _newclass:m_contactSolverType = _swig_property(___init__.btRigidBody_m_contactSolverType_get, ___init__.btRigidBody_m_contactSolverType_set)
    __swig_setmethods__["m_frictionSolverType"] = ___init__.btRigidBody_m_frictionSolverType_set
    __swig_getmethods__["m_frictionSolverType"] = ___init__.btRigidBody_m_frictionSolverType_get
    if _newclass:m_frictionSolverType = _swig_property(___init__.btRigidBody_m_frictionSolverType_get, ___init__.btRigidBody_m_frictionSolverType_set)
    def setAngularFactor(self, *args): return ___init__.btRigidBody_setAngularFactor(self, *args)
    def getAngularFactor(self): return ___init__.btRigidBody_getAngularFactor(self)
    def isInWorld(self): return ___init__.btRigidBody_isInWorld(self)
    def checkCollideWithOverride(self, *args): return ___init__.btRigidBody_checkCollideWithOverride(self, *args)
    def addConstraintRef(self, *args): return ___init__.btRigidBody_addConstraintRef(self, *args)
    def removeConstraintRef(self, *args): return ___init__.btRigidBody_removeConstraintRef(self, *args)
    def getConstraintRef(self, *args): return ___init__.btRigidBody_getConstraintRef(self, *args)
    def getNumConstraintRefs(self): return ___init__.btRigidBody_getNumConstraintRefs(self)
    def setFlags(self, *args): return ___init__.btRigidBody_setFlags(self, *args)
    def getFlags(self): return ___init__.btRigidBody_getFlags(self)
    def getDeltaLinearVelocity(self): return ___init__.btRigidBody_getDeltaLinearVelocity(self)
    def getDeltaAngularVelocity(self): return ___init__.btRigidBody_getDeltaAngularVelocity(self)
    def getPushVelocity(self): return ___init__.btRigidBody_getPushVelocity(self)
    def getTurnVelocity(self): return ___init__.btRigidBody_getTurnVelocity(self)
    def internalGetDeltaLinearVelocity(self): return ___init__.btRigidBody_internalGetDeltaLinearVelocity(self)
    def internalGetDeltaAngularVelocity(self): return ___init__.btRigidBody_internalGetDeltaAngularVelocity(self)
    def internalGetAngularFactor(self): return ___init__.btRigidBody_internalGetAngularFactor(self)
    def internalGetInvMass(self): return ___init__.btRigidBody_internalGetInvMass(self)
    def internalGetPushVelocity(self): return ___init__.btRigidBody_internalGetPushVelocity(self)
    def internalGetTurnVelocity(self): return ___init__.btRigidBody_internalGetTurnVelocity(self)
    def internalGetVelocityInLocalPointObsolete(self, *args): return ___init__.btRigidBody_internalGetVelocityInLocalPointObsolete(self, *args)
    def internalGetAngularVelocity(self, *args): return ___init__.btRigidBody_internalGetAngularVelocity(self, *args)
    def internalApplyImpulse(self, *args): return ___init__.btRigidBody_internalApplyImpulse(self, *args)
    def internalApplyPushImpulse(self, *args): return ___init__.btRigidBody_internalApplyPushImpulse(self, *args)
    def internalWritebackVelocity(self, *args): return ___init__.btRigidBody_internalWritebackVelocity(self, *args)
    def calculateSerializeBufferSize(self): return ___init__.btRigidBody_calculateSerializeBufferSize(self)
    def serialize(self, *args): return ___init__.btRigidBody_serialize(self, *args)
    def serializeSingleObject(self, *args): return ___init__.btRigidBody_serializeSingleObject(self, *args)
btRigidBody_swigregister = ___init__.btRigidBody_swigregister
btRigidBody_swigregister(btRigidBody)

def btRigidBody_upcast(*args):
  return ___init__.btRigidBody_upcast(*args)
btRigidBody_upcast = ___init__.btRigidBody_upcast

class btRigidBodyFloatData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btRigidBodyFloatData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btRigidBodyFloatData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_collisionObjectData"] = ___init__.btRigidBodyFloatData_m_collisionObjectData_set
    __swig_getmethods__["m_collisionObjectData"] = ___init__.btRigidBodyFloatData_m_collisionObjectData_get
    if _newclass:m_collisionObjectData = _swig_property(___init__.btRigidBodyFloatData_m_collisionObjectData_get, ___init__.btRigidBodyFloatData_m_collisionObjectData_set)
    __swig_setmethods__["m_invInertiaTensorWorld"] = ___init__.btRigidBodyFloatData_m_invInertiaTensorWorld_set
    __swig_getmethods__["m_invInertiaTensorWorld"] = ___init__.btRigidBodyFloatData_m_invInertiaTensorWorld_get
    if _newclass:m_invInertiaTensorWorld = _swig_property(___init__.btRigidBodyFloatData_m_invInertiaTensorWorld_get, ___init__.btRigidBodyFloatData_m_invInertiaTensorWorld_set)
    __swig_setmethods__["m_linearVelocity"] = ___init__.btRigidBodyFloatData_m_linearVelocity_set
    __swig_getmethods__["m_linearVelocity"] = ___init__.btRigidBodyFloatData_m_linearVelocity_get
    if _newclass:m_linearVelocity = _swig_property(___init__.btRigidBodyFloatData_m_linearVelocity_get, ___init__.btRigidBodyFloatData_m_linearVelocity_set)
    __swig_setmethods__["m_angularVelocity"] = ___init__.btRigidBodyFloatData_m_angularVelocity_set
    __swig_getmethods__["m_angularVelocity"] = ___init__.btRigidBodyFloatData_m_angularVelocity_get
    if _newclass:m_angularVelocity = _swig_property(___init__.btRigidBodyFloatData_m_angularVelocity_get, ___init__.btRigidBodyFloatData_m_angularVelocity_set)
    __swig_setmethods__["m_angularFactor"] = ___init__.btRigidBodyFloatData_m_angularFactor_set
    __swig_getmethods__["m_angularFactor"] = ___init__.btRigidBodyFloatData_m_angularFactor_get
    if _newclass:m_angularFactor = _swig_property(___init__.btRigidBodyFloatData_m_angularFactor_get, ___init__.btRigidBodyFloatData_m_angularFactor_set)
    __swig_setmethods__["m_linearFactor"] = ___init__.btRigidBodyFloatData_m_linearFactor_set
    __swig_getmethods__["m_linearFactor"] = ___init__.btRigidBodyFloatData_m_linearFactor_get
    if _newclass:m_linearFactor = _swig_property(___init__.btRigidBodyFloatData_m_linearFactor_get, ___init__.btRigidBodyFloatData_m_linearFactor_set)
    __swig_setmethods__["m_gravity"] = ___init__.btRigidBodyFloatData_m_gravity_set
    __swig_getmethods__["m_gravity"] = ___init__.btRigidBodyFloatData_m_gravity_get
    if _newclass:m_gravity = _swig_property(___init__.btRigidBodyFloatData_m_gravity_get, ___init__.btRigidBodyFloatData_m_gravity_set)
    __swig_setmethods__["m_gravity_acceleration"] = ___init__.btRigidBodyFloatData_m_gravity_acceleration_set
    __swig_getmethods__["m_gravity_acceleration"] = ___init__.btRigidBodyFloatData_m_gravity_acceleration_get
    if _newclass:m_gravity_acceleration = _swig_property(___init__.btRigidBodyFloatData_m_gravity_acceleration_get, ___init__.btRigidBodyFloatData_m_gravity_acceleration_set)
    __swig_setmethods__["m_invInertiaLocal"] = ___init__.btRigidBodyFloatData_m_invInertiaLocal_set
    __swig_getmethods__["m_invInertiaLocal"] = ___init__.btRigidBodyFloatData_m_invInertiaLocal_get
    if _newclass:m_invInertiaLocal = _swig_property(___init__.btRigidBodyFloatData_m_invInertiaLocal_get, ___init__.btRigidBodyFloatData_m_invInertiaLocal_set)
    __swig_setmethods__["m_totalForce"] = ___init__.btRigidBodyFloatData_m_totalForce_set
    __swig_getmethods__["m_totalForce"] = ___init__.btRigidBodyFloatData_m_totalForce_get
    if _newclass:m_totalForce = _swig_property(___init__.btRigidBodyFloatData_m_totalForce_get, ___init__.btRigidBodyFloatData_m_totalForce_set)
    __swig_setmethods__["m_totalTorque"] = ___init__.btRigidBodyFloatData_m_totalTorque_set
    __swig_getmethods__["m_totalTorque"] = ___init__.btRigidBodyFloatData_m_totalTorque_get
    if _newclass:m_totalTorque = _swig_property(___init__.btRigidBodyFloatData_m_totalTorque_get, ___init__.btRigidBodyFloatData_m_totalTorque_set)
    __swig_setmethods__["m_inverseMass"] = ___init__.btRigidBodyFloatData_m_inverseMass_set
    __swig_getmethods__["m_inverseMass"] = ___init__.btRigidBodyFloatData_m_inverseMass_get
    if _newclass:m_inverseMass = _swig_property(___init__.btRigidBodyFloatData_m_inverseMass_get, ___init__.btRigidBodyFloatData_m_inverseMass_set)
    __swig_setmethods__["m_linearDamping"] = ___init__.btRigidBodyFloatData_m_linearDamping_set
    __swig_getmethods__["m_linearDamping"] = ___init__.btRigidBodyFloatData_m_linearDamping_get
    if _newclass:m_linearDamping = _swig_property(___init__.btRigidBodyFloatData_m_linearDamping_get, ___init__.btRigidBodyFloatData_m_linearDamping_set)
    __swig_setmethods__["m_angularDamping"] = ___init__.btRigidBodyFloatData_m_angularDamping_set
    __swig_getmethods__["m_angularDamping"] = ___init__.btRigidBodyFloatData_m_angularDamping_get
    if _newclass:m_angularDamping = _swig_property(___init__.btRigidBodyFloatData_m_angularDamping_get, ___init__.btRigidBodyFloatData_m_angularDamping_set)
    __swig_setmethods__["m_additionalDampingFactor"] = ___init__.btRigidBodyFloatData_m_additionalDampingFactor_set
    __swig_getmethods__["m_additionalDampingFactor"] = ___init__.btRigidBodyFloatData_m_additionalDampingFactor_get
    if _newclass:m_additionalDampingFactor = _swig_property(___init__.btRigidBodyFloatData_m_additionalDampingFactor_get, ___init__.btRigidBodyFloatData_m_additionalDampingFactor_set)
    __swig_setmethods__["m_additionalLinearDampingThresholdSqr"] = ___init__.btRigidBodyFloatData_m_additionalLinearDampingThresholdSqr_set
    __swig_getmethods__["m_additionalLinearDampingThresholdSqr"] = ___init__.btRigidBodyFloatData_m_additionalLinearDampingThresholdSqr_get
    if _newclass:m_additionalLinearDampingThresholdSqr = _swig_property(___init__.btRigidBodyFloatData_m_additionalLinearDampingThresholdSqr_get, ___init__.btRigidBodyFloatData_m_additionalLinearDampingThresholdSqr_set)
    __swig_setmethods__["m_additionalAngularDampingThresholdSqr"] = ___init__.btRigidBodyFloatData_m_additionalAngularDampingThresholdSqr_set
    __swig_getmethods__["m_additionalAngularDampingThresholdSqr"] = ___init__.btRigidBodyFloatData_m_additionalAngularDampingThresholdSqr_get
    if _newclass:m_additionalAngularDampingThresholdSqr = _swig_property(___init__.btRigidBodyFloatData_m_additionalAngularDampingThresholdSqr_get, ___init__.btRigidBodyFloatData_m_additionalAngularDampingThresholdSqr_set)
    __swig_setmethods__["m_additionalAngularDampingFactor"] = ___init__.btRigidBodyFloatData_m_additionalAngularDampingFactor_set
    __swig_getmethods__["m_additionalAngularDampingFactor"] = ___init__.btRigidBodyFloatData_m_additionalAngularDampingFactor_get
    if _newclass:m_additionalAngularDampingFactor = _swig_property(___init__.btRigidBodyFloatData_m_additionalAngularDampingFactor_get, ___init__.btRigidBodyFloatData_m_additionalAngularDampingFactor_set)
    __swig_setmethods__["m_linearSleepingThreshold"] = ___init__.btRigidBodyFloatData_m_linearSleepingThreshold_set
    __swig_getmethods__["m_linearSleepingThreshold"] = ___init__.btRigidBodyFloatData_m_linearSleepingThreshold_get
    if _newclass:m_linearSleepingThreshold = _swig_property(___init__.btRigidBodyFloatData_m_linearSleepingThreshold_get, ___init__.btRigidBodyFloatData_m_linearSleepingThreshold_set)
    __swig_setmethods__["m_angularSleepingThreshold"] = ___init__.btRigidBodyFloatData_m_angularSleepingThreshold_set
    __swig_getmethods__["m_angularSleepingThreshold"] = ___init__.btRigidBodyFloatData_m_angularSleepingThreshold_get
    if _newclass:m_angularSleepingThreshold = _swig_property(___init__.btRigidBodyFloatData_m_angularSleepingThreshold_get, ___init__.btRigidBodyFloatData_m_angularSleepingThreshold_set)
    __swig_setmethods__["m_additionalDamping"] = ___init__.btRigidBodyFloatData_m_additionalDamping_set
    __swig_getmethods__["m_additionalDamping"] = ___init__.btRigidBodyFloatData_m_additionalDamping_get
    if _newclass:m_additionalDamping = _swig_property(___init__.btRigidBodyFloatData_m_additionalDamping_get, ___init__.btRigidBodyFloatData_m_additionalDamping_set)
    def __init__(self): 
        this = ___init__.new_btRigidBodyFloatData()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = ___init__.delete_btRigidBodyFloatData
    __del__ = lambda self : None;
btRigidBodyFloatData_swigregister = ___init__.btRigidBodyFloatData_swigregister
btRigidBodyFloatData_swigregister(btRigidBodyFloatData)

class btRigidBodyDoubleData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btRigidBodyDoubleData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btRigidBodyDoubleData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_collisionObjectData"] = ___init__.btRigidBodyDoubleData_m_collisionObjectData_set
    __swig_getmethods__["m_collisionObjectData"] = ___init__.btRigidBodyDoubleData_m_collisionObjectData_get
    if _newclass:m_collisionObjectData = _swig_property(___init__.btRigidBodyDoubleData_m_collisionObjectData_get, ___init__.btRigidBodyDoubleData_m_collisionObjectData_set)
    __swig_setmethods__["m_invInertiaTensorWorld"] = ___init__.btRigidBodyDoubleData_m_invInertiaTensorWorld_set
    __swig_getmethods__["m_invInertiaTensorWorld"] = ___init__.btRigidBodyDoubleData_m_invInertiaTensorWorld_get
    if _newclass:m_invInertiaTensorWorld = _swig_property(___init__.btRigidBodyDoubleData_m_invInertiaTensorWorld_get, ___init__.btRigidBodyDoubleData_m_invInertiaTensorWorld_set)
    __swig_setmethods__["m_linearVelocity"] = ___init__.btRigidBodyDoubleData_m_linearVelocity_set
    __swig_getmethods__["m_linearVelocity"] = ___init__.btRigidBodyDoubleData_m_linearVelocity_get
    if _newclass:m_linearVelocity = _swig_property(___init__.btRigidBodyDoubleData_m_linearVelocity_get, ___init__.btRigidBodyDoubleData_m_linearVelocity_set)
    __swig_setmethods__["m_angularVelocity"] = ___init__.btRigidBodyDoubleData_m_angularVelocity_set
    __swig_getmethods__["m_angularVelocity"] = ___init__.btRigidBodyDoubleData_m_angularVelocity_get
    if _newclass:m_angularVelocity = _swig_property(___init__.btRigidBodyDoubleData_m_angularVelocity_get, ___init__.btRigidBodyDoubleData_m_angularVelocity_set)
    __swig_setmethods__["m_angularFactor"] = ___init__.btRigidBodyDoubleData_m_angularFactor_set
    __swig_getmethods__["m_angularFactor"] = ___init__.btRigidBodyDoubleData_m_angularFactor_get
    if _newclass:m_angularFactor = _swig_property(___init__.btRigidBodyDoubleData_m_angularFactor_get, ___init__.btRigidBodyDoubleData_m_angularFactor_set)
    __swig_setmethods__["m_linearFactor"] = ___init__.btRigidBodyDoubleData_m_linearFactor_set
    __swig_getmethods__["m_linearFactor"] = ___init__.btRigidBodyDoubleData_m_linearFactor_get
    if _newclass:m_linearFactor = _swig_property(___init__.btRigidBodyDoubleData_m_linearFactor_get, ___init__.btRigidBodyDoubleData_m_linearFactor_set)
    __swig_setmethods__["m_gravity"] = ___init__.btRigidBodyDoubleData_m_gravity_set
    __swig_getmethods__["m_gravity"] = ___init__.btRigidBodyDoubleData_m_gravity_get
    if _newclass:m_gravity = _swig_property(___init__.btRigidBodyDoubleData_m_gravity_get, ___init__.btRigidBodyDoubleData_m_gravity_set)
    __swig_setmethods__["m_gravity_acceleration"] = ___init__.btRigidBodyDoubleData_m_gravity_acceleration_set
    __swig_getmethods__["m_gravity_acceleration"] = ___init__.btRigidBodyDoubleData_m_gravity_acceleration_get
    if _newclass:m_gravity_acceleration = _swig_property(___init__.btRigidBodyDoubleData_m_gravity_acceleration_get, ___init__.btRigidBodyDoubleData_m_gravity_acceleration_set)
    __swig_setmethods__["m_invInertiaLocal"] = ___init__.btRigidBodyDoubleData_m_invInertiaLocal_set
    __swig_getmethods__["m_invInertiaLocal"] = ___init__.btRigidBodyDoubleData_m_invInertiaLocal_get
    if _newclass:m_invInertiaLocal = _swig_property(___init__.btRigidBodyDoubleData_m_invInertiaLocal_get, ___init__.btRigidBodyDoubleData_m_invInertiaLocal_set)
    __swig_setmethods__["m_totalForce"] = ___init__.btRigidBodyDoubleData_m_totalForce_set
    __swig_getmethods__["m_totalForce"] = ___init__.btRigidBodyDoubleData_m_totalForce_get
    if _newclass:m_totalForce = _swig_property(___init__.btRigidBodyDoubleData_m_totalForce_get, ___init__.btRigidBodyDoubleData_m_totalForce_set)
    __swig_setmethods__["m_totalTorque"] = ___init__.btRigidBodyDoubleData_m_totalTorque_set
    __swig_getmethods__["m_totalTorque"] = ___init__.btRigidBodyDoubleData_m_totalTorque_get
    if _newclass:m_totalTorque = _swig_property(___init__.btRigidBodyDoubleData_m_totalTorque_get, ___init__.btRigidBodyDoubleData_m_totalTorque_set)
    __swig_setmethods__["m_inverseMass"] = ___init__.btRigidBodyDoubleData_m_inverseMass_set
    __swig_getmethods__["m_inverseMass"] = ___init__.btRigidBodyDoubleData_m_inverseMass_get
    if _newclass:m_inverseMass = _swig_property(___init__.btRigidBodyDoubleData_m_inverseMass_get, ___init__.btRigidBodyDoubleData_m_inverseMass_set)
    __swig_setmethods__["m_linearDamping"] = ___init__.btRigidBodyDoubleData_m_linearDamping_set
    __swig_getmethods__["m_linearDamping"] = ___init__.btRigidBodyDoubleData_m_linearDamping_get
    if _newclass:m_linearDamping = _swig_property(___init__.btRigidBodyDoubleData_m_linearDamping_get, ___init__.btRigidBodyDoubleData_m_linearDamping_set)
    __swig_setmethods__["m_angularDamping"] = ___init__.btRigidBodyDoubleData_m_angularDamping_set
    __swig_getmethods__["m_angularDamping"] = ___init__.btRigidBodyDoubleData_m_angularDamping_get
    if _newclass:m_angularDamping = _swig_property(___init__.btRigidBodyDoubleData_m_angularDamping_get, ___init__.btRigidBodyDoubleData_m_angularDamping_set)
    __swig_setmethods__["m_additionalDampingFactor"] = ___init__.btRigidBodyDoubleData_m_additionalDampingFactor_set
    __swig_getmethods__["m_additionalDampingFactor"] = ___init__.btRigidBodyDoubleData_m_additionalDampingFactor_get
    if _newclass:m_additionalDampingFactor = _swig_property(___init__.btRigidBodyDoubleData_m_additionalDampingFactor_get, ___init__.btRigidBodyDoubleData_m_additionalDampingFactor_set)
    __swig_setmethods__["m_additionalLinearDampingThresholdSqr"] = ___init__.btRigidBodyDoubleData_m_additionalLinearDampingThresholdSqr_set
    __swig_getmethods__["m_additionalLinearDampingThresholdSqr"] = ___init__.btRigidBodyDoubleData_m_additionalLinearDampingThresholdSqr_get
    if _newclass:m_additionalLinearDampingThresholdSqr = _swig_property(___init__.btRigidBodyDoubleData_m_additionalLinearDampingThresholdSqr_get, ___init__.btRigidBodyDoubleData_m_additionalLinearDampingThresholdSqr_set)
    __swig_setmethods__["m_additionalAngularDampingThresholdSqr"] = ___init__.btRigidBodyDoubleData_m_additionalAngularDampingThresholdSqr_set
    __swig_getmethods__["m_additionalAngularDampingThresholdSqr"] = ___init__.btRigidBodyDoubleData_m_additionalAngularDampingThresholdSqr_get
    if _newclass:m_additionalAngularDampingThresholdSqr = _swig_property(___init__.btRigidBodyDoubleData_m_additionalAngularDampingThresholdSqr_get, ___init__.btRigidBodyDoubleData_m_additionalAngularDampingThresholdSqr_set)
    __swig_setmethods__["m_additionalAngularDampingFactor"] = ___init__.btRigidBodyDoubleData_m_additionalAngularDampingFactor_set
    __swig_getmethods__["m_additionalAngularDampingFactor"] = ___init__.btRigidBodyDoubleData_m_additionalAngularDampingFactor_get
    if _newclass:m_additionalAngularDampingFactor = _swig_property(___init__.btRigidBodyDoubleData_m_additionalAngularDampingFactor_get, ___init__.btRigidBodyDoubleData_m_additionalAngularDampingFactor_set)
    __swig_setmethods__["m_linearSleepingThreshold"] = ___init__.btRigidBodyDoubleData_m_linearSleepingThreshold_set
    __swig_getmethods__["m_linearSleepingThreshold"] = ___init__.btRigidBodyDoubleData_m_linearSleepingThreshold_get
    if _newclass:m_linearSleepingThreshold = _swig_property(___init__.btRigidBodyDoubleData_m_linearSleepingThreshold_get, ___init__.btRigidBodyDoubleData_m_linearSleepingThreshold_set)
    __swig_setmethods__["m_angularSleepingThreshold"] = ___init__.btRigidBodyDoubleData_m_angularSleepingThreshold_set
    __swig_getmethods__["m_angularSleepingThreshold"] = ___init__.btRigidBodyDoubleData_m_angularSleepingThreshold_get
    if _newclass:m_angularSleepingThreshold = _swig_property(___init__.btRigidBodyDoubleData_m_angularSleepingThreshold_get, ___init__.btRigidBodyDoubleData_m_angularSleepingThreshold_set)
    __swig_setmethods__["m_additionalDamping"] = ___init__.btRigidBodyDoubleData_m_additionalDamping_set
    __swig_getmethods__["m_additionalDamping"] = ___init__.btRigidBodyDoubleData_m_additionalDamping_get
    if _newclass:m_additionalDamping = _swig_property(___init__.btRigidBodyDoubleData_m_additionalDamping_get, ___init__.btRigidBodyDoubleData_m_additionalDamping_set)
    __swig_setmethods__["m_padding"] = ___init__.btRigidBodyDoubleData_m_padding_set
    __swig_getmethods__["m_padding"] = ___init__.btRigidBodyDoubleData_m_padding_get
    if _newclass:m_padding = _swig_property(___init__.btRigidBodyDoubleData_m_padding_get, ___init__.btRigidBodyDoubleData_m_padding_set)
    def __init__(self): 
        this = ___init__.new_btRigidBodyDoubleData()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = ___init__.delete_btRigidBodyDoubleData
    __del__ = lambda self : None;
btRigidBodyDoubleData_swigregister = ___init__.btRigidBodyDoubleData_swigregister
btRigidBodyDoubleData_swigregister(btRigidBodyDoubleData)

class btConstraintSolver(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btConstraintSolver, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btConstraintSolver, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = ___init__.delete_btConstraintSolver
    __del__ = lambda self : None;
    def prepareSolve(self, *args): return ___init__.btConstraintSolver_prepareSolve(self, *args)
    def solveGroup(self, *args): return ___init__.btConstraintSolver_solveGroup(self, *args)
    def allSolved(self, *args): return ___init__.btConstraintSolver_allSolved(self, *args)
    def reset(self): return ___init__.btConstraintSolver_reset(self)
btConstraintSolver_swigregister = ___init__.btConstraintSolver_swigregister
btConstraintSolver_swigregister(btConstraintSolver)

POINT2POINT_CONSTRAINT_TYPE = ___init__.POINT2POINT_CONSTRAINT_TYPE
HINGE_CONSTRAINT_TYPE = ___init__.HINGE_CONSTRAINT_TYPE
CONETWIST_CONSTRAINT_TYPE = ___init__.CONETWIST_CONSTRAINT_TYPE
D6_CONSTRAINT_TYPE = ___init__.D6_CONSTRAINT_TYPE
SLIDER_CONSTRAINT_TYPE = ___init__.SLIDER_CONSTRAINT_TYPE
CONTACT_CONSTRAINT_TYPE = ___init__.CONTACT_CONSTRAINT_TYPE
D6_SPRING_CONSTRAINT_TYPE = ___init__.D6_SPRING_CONSTRAINT_TYPE
MAX_CONSTRAINT_TYPE = ___init__.MAX_CONSTRAINT_TYPE
BT_CONSTRAINT_ERP = ___init__.BT_CONSTRAINT_ERP
BT_CONSTRAINT_STOP_ERP = ___init__.BT_CONSTRAINT_STOP_ERP
BT_CONSTRAINT_CFM = ___init__.BT_CONSTRAINT_CFM
BT_CONSTRAINT_STOP_CFM = ___init__.BT_CONSTRAINT_STOP_CFM
class btTypedConstraint(btTypedObject):
    __swig_setmethods__ = {}
    for _s in [btTypedObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btTypedConstraint, name, value)
    __swig_getmethods__ = {}
    for _s in [btTypedObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, btTypedConstraint, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = ___init__.delete_btTypedConstraint
    __del__ = lambda self : None;
    def buildJacobian(self): return ___init__.btTypedConstraint_buildJacobian(self)
    def setupSolverConstraint(self, *args): return ___init__.btTypedConstraint_setupSolverConstraint(self, *args)
    def getInfo1(self, *args): return ___init__.btTypedConstraint_getInfo1(self, *args)
    def getInfo2(self, *args): return ___init__.btTypedConstraint_getInfo2(self, *args)
    def internalSetAppliedImpulse(self, *args): return ___init__.btTypedConstraint_internalSetAppliedImpulse(self, *args)
    def internalGetAppliedImpulse(self): return ___init__.btTypedConstraint_internalGetAppliedImpulse(self)
    def getBreakingImpulseThreshold(self): return ___init__.btTypedConstraint_getBreakingImpulseThreshold(self)
    def setBreakingImpulseThreshold(self, *args): return ___init__.btTypedConstraint_setBreakingImpulseThreshold(self, *args)
    def isEnabled(self): return ___init__.btTypedConstraint_isEnabled(self)
    def setEnabled(self, *args): return ___init__.btTypedConstraint_setEnabled(self, *args)
    def solveConstraintObsolete(self, *args): return ___init__.btTypedConstraint_solveConstraintObsolete(self, *args)
    def getRigidBodyA(self, *args): return ___init__.btTypedConstraint_getRigidBodyA(self, *args)
    def getRigidBodyB(self, *args): return ___init__.btTypedConstraint_getRigidBodyB(self, *args)
    def getUserConstraintType(self): return ___init__.btTypedConstraint_getUserConstraintType(self)
    def setUserConstraintType(self, *args): return ___init__.btTypedConstraint_setUserConstraintType(self, *args)
    def setUserConstraintId(self, *args): return ___init__.btTypedConstraint_setUserConstraintId(self, *args)
    def getUserConstraintId(self): return ___init__.btTypedConstraint_getUserConstraintId(self)
    def setUserConstraintPtr(self, *args): return ___init__.btTypedConstraint_setUserConstraintPtr(self, *args)
    def getUserConstraintPtr(self): return ___init__.btTypedConstraint_getUserConstraintPtr(self)
    def getUid(self): return ___init__.btTypedConstraint_getUid(self)
    def needsFeedback(self): return ___init__.btTypedConstraint_needsFeedback(self)
    def enableFeedback(self, *args): return ___init__.btTypedConstraint_enableFeedback(self, *args)
    def getAppliedImpulse(self): return ___init__.btTypedConstraint_getAppliedImpulse(self)
    def getConstraintType(self): return ___init__.btTypedConstraint_getConstraintType(self)
    def setDbgDrawSize(self, *args): return ___init__.btTypedConstraint_setDbgDrawSize(self, *args)
    def getDbgDrawSize(self): return ___init__.btTypedConstraint_getDbgDrawSize(self)
    def setParam(self, *args): return ___init__.btTypedConstraint_setParam(self, *args)
    def getParam(self, *args): return ___init__.btTypedConstraint_getParam(self, *args)
    def calculateSerializeBufferSize(self): return ___init__.btTypedConstraint_calculateSerializeBufferSize(self)
    def serialize(self, *args): return ___init__.btTypedConstraint_serialize(self, *args)
btTypedConstraint_swigregister = ___init__.btTypedConstraint_swigregister
btTypedConstraint_swigregister(btTypedConstraint)


def btAdjustAngleToLimits(*args):
  return ___init__.btAdjustAngleToLimits(*args)
btAdjustAngleToLimits = ___init__.btAdjustAngleToLimits
class btTypedConstraintData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btTypedConstraintData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btTypedConstraintData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_rbA"] = ___init__.btTypedConstraintData_m_rbA_set
    __swig_getmethods__["m_rbA"] = ___init__.btTypedConstraintData_m_rbA_get
    if _newclass:m_rbA = _swig_property(___init__.btTypedConstraintData_m_rbA_get, ___init__.btTypedConstraintData_m_rbA_set)
    __swig_setmethods__["m_rbB"] = ___init__.btTypedConstraintData_m_rbB_set
    __swig_getmethods__["m_rbB"] = ___init__.btTypedConstraintData_m_rbB_get
    if _newclass:m_rbB = _swig_property(___init__.btTypedConstraintData_m_rbB_get, ___init__.btTypedConstraintData_m_rbB_set)
    __swig_setmethods__["m_name"] = ___init__.btTypedConstraintData_m_name_set
    __swig_getmethods__["m_name"] = ___init__.btTypedConstraintData_m_name_get
    if _newclass:m_name = _swig_property(___init__.btTypedConstraintData_m_name_get, ___init__.btTypedConstraintData_m_name_set)
    __swig_setmethods__["m_objectType"] = ___init__.btTypedConstraintData_m_objectType_set
    __swig_getmethods__["m_objectType"] = ___init__.btTypedConstraintData_m_objectType_get
    if _newclass:m_objectType = _swig_property(___init__.btTypedConstraintData_m_objectType_get, ___init__.btTypedConstraintData_m_objectType_set)
    __swig_setmethods__["m_userConstraintType"] = ___init__.btTypedConstraintData_m_userConstraintType_set
    __swig_getmethods__["m_userConstraintType"] = ___init__.btTypedConstraintData_m_userConstraintType_get
    if _newclass:m_userConstraintType = _swig_property(___init__.btTypedConstraintData_m_userConstraintType_get, ___init__.btTypedConstraintData_m_userConstraintType_set)
    __swig_setmethods__["m_userConstraintId"] = ___init__.btTypedConstraintData_m_userConstraintId_set
    __swig_getmethods__["m_userConstraintId"] = ___init__.btTypedConstraintData_m_userConstraintId_get
    if _newclass:m_userConstraintId = _swig_property(___init__.btTypedConstraintData_m_userConstraintId_get, ___init__.btTypedConstraintData_m_userConstraintId_set)
    __swig_setmethods__["m_needsFeedback"] = ___init__.btTypedConstraintData_m_needsFeedback_set
    __swig_getmethods__["m_needsFeedback"] = ___init__.btTypedConstraintData_m_needsFeedback_get
    if _newclass:m_needsFeedback = _swig_property(___init__.btTypedConstraintData_m_needsFeedback_get, ___init__.btTypedConstraintData_m_needsFeedback_set)
    __swig_setmethods__["m_appliedImpulse"] = ___init__.btTypedConstraintData_m_appliedImpulse_set
    __swig_getmethods__["m_appliedImpulse"] = ___init__.btTypedConstraintData_m_appliedImpulse_get
    if _newclass:m_appliedImpulse = _swig_property(___init__.btTypedConstraintData_m_appliedImpulse_get, ___init__.btTypedConstraintData_m_appliedImpulse_set)
    __swig_setmethods__["m_dbgDrawSize"] = ___init__.btTypedConstraintData_m_dbgDrawSize_set
    __swig_getmethods__["m_dbgDrawSize"] = ___init__.btTypedConstraintData_m_dbgDrawSize_get
    if _newclass:m_dbgDrawSize = _swig_property(___init__.btTypedConstraintData_m_dbgDrawSize_get, ___init__.btTypedConstraintData_m_dbgDrawSize_set)
    __swig_setmethods__["m_disableCollisionsBetweenLinkedBodies"] = ___init__.btTypedConstraintData_m_disableCollisionsBetweenLinkedBodies_set
    __swig_getmethods__["m_disableCollisionsBetweenLinkedBodies"] = ___init__.btTypedConstraintData_m_disableCollisionsBetweenLinkedBodies_get
    if _newclass:m_disableCollisionsBetweenLinkedBodies = _swig_property(___init__.btTypedConstraintData_m_disableCollisionsBetweenLinkedBodies_get, ___init__.btTypedConstraintData_m_disableCollisionsBetweenLinkedBodies_set)
    __swig_setmethods__["m_pad4"] = ___init__.btTypedConstraintData_m_pad4_set
    __swig_getmethods__["m_pad4"] = ___init__.btTypedConstraintData_m_pad4_get
    if _newclass:m_pad4 = _swig_property(___init__.btTypedConstraintData_m_pad4_get, ___init__.btTypedConstraintData_m_pad4_set)
    def __init__(self): 
        this = ___init__.new_btTypedConstraintData()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = ___init__.delete_btTypedConstraintData
    __del__ = lambda self : None;
btTypedConstraintData_swigregister = ___init__.btTypedConstraintData_swigregister
btTypedConstraintData_swigregister(btTypedConstraintData)

class btAngularLimit(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btAngularLimit, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btAngularLimit, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = ___init__.new_btAngularLimit()
        try: self.this.append(this)
        except: self.this = this
    def set(self, *args): return ___init__.btAngularLimit_set(self, *args)
    def test(self, *args): return ___init__.btAngularLimit_test(self, *args)
    def getSoftness(self): return ___init__.btAngularLimit_getSoftness(self)
    def getBiasFactor(self): return ___init__.btAngularLimit_getBiasFactor(self)
    def getRelaxationFactor(self): return ___init__.btAngularLimit_getRelaxationFactor(self)
    def getCorrection(self): return ___init__.btAngularLimit_getCorrection(self)
    def getSign(self): return ___init__.btAngularLimit_getSign(self)
    def getHalfRange(self): return ___init__.btAngularLimit_getHalfRange(self)
    def isLimit(self): return ___init__.btAngularLimit_isLimit(self)
    def fit(self, *args): return ___init__.btAngularLimit_fit(self, *args)
    def getError(self): return ___init__.btAngularLimit_getError(self)
    def getLow(self): return ___init__.btAngularLimit_getLow(self)
    def getHigh(self): return ___init__.btAngularLimit_getHigh(self)
    __swig_destroy__ = ___init__.delete_btAngularLimit
    __del__ = lambda self : None;
btAngularLimit_swigregister = ___init__.btAngularLimit_swigregister
btAngularLimit_swigregister(btAngularLimit)

btPoint2PointConstraintDataName = ___init__.btPoint2PointConstraintDataName
class btConstraintSetting(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btConstraintSetting, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btConstraintSetting, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = ___init__.new_btConstraintSetting()
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["m_tau"] = ___init__.btConstraintSetting_m_tau_set
    __swig_getmethods__["m_tau"] = ___init__.btConstraintSetting_m_tau_get
    if _newclass:m_tau = _swig_property(___init__.btConstraintSetting_m_tau_get, ___init__.btConstraintSetting_m_tau_set)
    __swig_setmethods__["m_damping"] = ___init__.btConstraintSetting_m_damping_set
    __swig_getmethods__["m_damping"] = ___init__.btConstraintSetting_m_damping_get
    if _newclass:m_damping = _swig_property(___init__.btConstraintSetting_m_damping_get, ___init__.btConstraintSetting_m_damping_set)
    __swig_setmethods__["m_impulseClamp"] = ___init__.btConstraintSetting_m_impulseClamp_set
    __swig_getmethods__["m_impulseClamp"] = ___init__.btConstraintSetting_m_impulseClamp_get
    if _newclass:m_impulseClamp = _swig_property(___init__.btConstraintSetting_m_impulseClamp_get, ___init__.btConstraintSetting_m_impulseClamp_set)
    __swig_destroy__ = ___init__.delete_btConstraintSetting
    __del__ = lambda self : None;
btConstraintSetting_swigregister = ___init__.btConstraintSetting_swigregister
btConstraintSetting_swigregister(btConstraintSetting)

BT_P2P_FLAGS_ERP = ___init__.BT_P2P_FLAGS_ERP
BT_P2P_FLAGS_CFM = ___init__.BT_P2P_FLAGS_CFM
class btPoint2PointConstraint(btTypedConstraint):
    __swig_setmethods__ = {}
    for _s in [btTypedConstraint]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btPoint2PointConstraint, name, value)
    __swig_getmethods__ = {}
    for _s in [btTypedConstraint]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, btPoint2PointConstraint, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_useSolveConstraintObsolete"] = ___init__.btPoint2PointConstraint_m_useSolveConstraintObsolete_set
    __swig_getmethods__["m_useSolveConstraintObsolete"] = ___init__.btPoint2PointConstraint_m_useSolveConstraintObsolete_get
    if _newclass:m_useSolveConstraintObsolete = _swig_property(___init__.btPoint2PointConstraint_m_useSolveConstraintObsolete_get, ___init__.btPoint2PointConstraint_m_useSolveConstraintObsolete_set)
    __swig_setmethods__["m_setting"] = ___init__.btPoint2PointConstraint_m_setting_set
    __swig_getmethods__["m_setting"] = ___init__.btPoint2PointConstraint_m_setting_get
    if _newclass:m_setting = _swig_property(___init__.btPoint2PointConstraint_m_setting_get, ___init__.btPoint2PointConstraint_m_setting_set)
    def __init__(self, *args): 
        this = ___init__.new_btPoint2PointConstraint(*args)
        try: self.this.append(this)
        except: self.this = this
    def buildJacobian(self): return ___init__.btPoint2PointConstraint_buildJacobian(self)
    def getInfo1(self, *args): return ___init__.btPoint2PointConstraint_getInfo1(self, *args)
    def getInfo1NonVirtual(self, *args): return ___init__.btPoint2PointConstraint_getInfo1NonVirtual(self, *args)
    def getInfo2(self, *args): return ___init__.btPoint2PointConstraint_getInfo2(self, *args)
    def getInfo2NonVirtual(self, *args): return ___init__.btPoint2PointConstraint_getInfo2NonVirtual(self, *args)
    def updateRHS(self, *args): return ___init__.btPoint2PointConstraint_updateRHS(self, *args)
    def setPivotA(self, *args): return ___init__.btPoint2PointConstraint_setPivotA(self, *args)
    def setPivotB(self, *args): return ___init__.btPoint2PointConstraint_setPivotB(self, *args)
    def getPivotInA(self): return ___init__.btPoint2PointConstraint_getPivotInA(self)
    def getPivotInB(self): return ___init__.btPoint2PointConstraint_getPivotInB(self)
    def setParam(self, *args): return ___init__.btPoint2PointConstraint_setParam(self, *args)
    def getParam(self, *args): return ___init__.btPoint2PointConstraint_getParam(self, *args)
    def calculateSerializeBufferSize(self): return ___init__.btPoint2PointConstraint_calculateSerializeBufferSize(self)
    def serialize(self, *args): return ___init__.btPoint2PointConstraint_serialize(self, *args)
    __swig_getmethods__["downcast"] = lambda x: ___init__.btPoint2PointConstraint_downcast
    if _newclass:downcast = staticmethod(___init__.btPoint2PointConstraint_downcast)
    __swig_destroy__ = ___init__.delete_btPoint2PointConstraint
    __del__ = lambda self : None;
btPoint2PointConstraint_swigregister = ___init__.btPoint2PointConstraint_swigregister
btPoint2PointConstraint_swigregister(btPoint2PointConstraint)

def btPoint2PointConstraint_downcast(*args):
  return ___init__.btPoint2PointConstraint_downcast(*args)
btPoint2PointConstraint_downcast = ___init__.btPoint2PointConstraint_downcast

class btPoint2PointConstraintFloatData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btPoint2PointConstraintFloatData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btPoint2PointConstraintFloatData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_typeConstraintData"] = ___init__.btPoint2PointConstraintFloatData_m_typeConstraintData_set
    __swig_getmethods__["m_typeConstraintData"] = ___init__.btPoint2PointConstraintFloatData_m_typeConstraintData_get
    if _newclass:m_typeConstraintData = _swig_property(___init__.btPoint2PointConstraintFloatData_m_typeConstraintData_get, ___init__.btPoint2PointConstraintFloatData_m_typeConstraintData_set)
    __swig_setmethods__["m_pivotInA"] = ___init__.btPoint2PointConstraintFloatData_m_pivotInA_set
    __swig_getmethods__["m_pivotInA"] = ___init__.btPoint2PointConstraintFloatData_m_pivotInA_get
    if _newclass:m_pivotInA = _swig_property(___init__.btPoint2PointConstraintFloatData_m_pivotInA_get, ___init__.btPoint2PointConstraintFloatData_m_pivotInA_set)
    __swig_setmethods__["m_pivotInB"] = ___init__.btPoint2PointConstraintFloatData_m_pivotInB_set
    __swig_getmethods__["m_pivotInB"] = ___init__.btPoint2PointConstraintFloatData_m_pivotInB_get
    if _newclass:m_pivotInB = _swig_property(___init__.btPoint2PointConstraintFloatData_m_pivotInB_get, ___init__.btPoint2PointConstraintFloatData_m_pivotInB_set)
    def __init__(self): 
        this = ___init__.new_btPoint2PointConstraintFloatData()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = ___init__.delete_btPoint2PointConstraintFloatData
    __del__ = lambda self : None;
btPoint2PointConstraintFloatData_swigregister = ___init__.btPoint2PointConstraintFloatData_swigregister
btPoint2PointConstraintFloatData_swigregister(btPoint2PointConstraintFloatData)

class btPoint2PointConstraintDoubleData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btPoint2PointConstraintDoubleData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btPoint2PointConstraintDoubleData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_typeConstraintData"] = ___init__.btPoint2PointConstraintDoubleData_m_typeConstraintData_set
    __swig_getmethods__["m_typeConstraintData"] = ___init__.btPoint2PointConstraintDoubleData_m_typeConstraintData_get
    if _newclass:m_typeConstraintData = _swig_property(___init__.btPoint2PointConstraintDoubleData_m_typeConstraintData_get, ___init__.btPoint2PointConstraintDoubleData_m_typeConstraintData_set)
    __swig_setmethods__["m_pivotInA"] = ___init__.btPoint2PointConstraintDoubleData_m_pivotInA_set
    __swig_getmethods__["m_pivotInA"] = ___init__.btPoint2PointConstraintDoubleData_m_pivotInA_get
    if _newclass:m_pivotInA = _swig_property(___init__.btPoint2PointConstraintDoubleData_m_pivotInA_get, ___init__.btPoint2PointConstraintDoubleData_m_pivotInA_set)
    __swig_setmethods__["m_pivotInB"] = ___init__.btPoint2PointConstraintDoubleData_m_pivotInB_set
    __swig_getmethods__["m_pivotInB"] = ___init__.btPoint2PointConstraintDoubleData_m_pivotInB_get
    if _newclass:m_pivotInB = _swig_property(___init__.btPoint2PointConstraintDoubleData_m_pivotInB_get, ___init__.btPoint2PointConstraintDoubleData_m_pivotInB_set)
    def __init__(self): 
        this = ___init__.new_btPoint2PointConstraintDoubleData()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = ___init__.delete_btPoint2PointConstraintDoubleData
    __del__ = lambda self : None;
btPoint2PointConstraintDoubleData_swigregister = ___init__.btPoint2PointConstraintDoubleData_swigregister
btPoint2PointConstraintDoubleData_swigregister(btPoint2PointConstraintDoubleData)

_BT_USE_CENTER_LIMIT_ = ___init__._BT_USE_CENTER_LIMIT_
btHingeConstraintDataName = ___init__.btHingeConstraintDataName
BT_HINGE_FLAGS_CFM_STOP = ___init__.BT_HINGE_FLAGS_CFM_STOP
BT_HINGE_FLAGS_ERP_STOP = ___init__.BT_HINGE_FLAGS_ERP_STOP
BT_HINGE_FLAGS_CFM_NORM = ___init__.BT_HINGE_FLAGS_CFM_NORM
class btHingeConstraint(btTypedConstraint):
    __swig_setmethods__ = {}
    for _s in [btTypedConstraint]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btHingeConstraint, name, value)
    __swig_getmethods__ = {}
    for _s in [btTypedConstraint]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, btHingeConstraint, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = ___init__.new_btHingeConstraint(*args)
        try: self.this.append(this)
        except: self.this = this
    def buildJacobian(self): return ___init__.btHingeConstraint_buildJacobian(self)
    def getInfo1(self, *args): return ___init__.btHingeConstraint_getInfo1(self, *args)
    def getInfo1NonVirtual(self, *args): return ___init__.btHingeConstraint_getInfo1NonVirtual(self, *args)
    def getInfo2(self, *args): return ___init__.btHingeConstraint_getInfo2(self, *args)
    def getInfo2NonVirtual(self, *args): return ___init__.btHingeConstraint_getInfo2NonVirtual(self, *args)
    def getInfo2Internal(self, *args): return ___init__.btHingeConstraint_getInfo2Internal(self, *args)
    def getInfo2InternalUsingFrameOffset(self, *args): return ___init__.btHingeConstraint_getInfo2InternalUsingFrameOffset(self, *args)
    def updateRHS(self, *args): return ___init__.btHingeConstraint_updateRHS(self, *args)
    def getRigidBodyA(self, *args): return ___init__.btHingeConstraint_getRigidBodyA(self, *args)
    def getRigidBodyB(self, *args): return ___init__.btHingeConstraint_getRigidBodyB(self, *args)
    def getFrameOffsetA(self): return ___init__.btHingeConstraint_getFrameOffsetA(self)
    def getFrameOffsetB(self): return ___init__.btHingeConstraint_getFrameOffsetB(self)
    def setFrames(self, *args): return ___init__.btHingeConstraint_setFrames(self, *args)
    def setAngularOnly(self, *args): return ___init__.btHingeConstraint_setAngularOnly(self, *args)
    def enableAngularMotor(self, *args): return ___init__.btHingeConstraint_enableAngularMotor(self, *args)
    def enableMotor(self, *args): return ___init__.btHingeConstraint_enableMotor(self, *args)
    def setMaxMotorImpulse(self, *args): return ___init__.btHingeConstraint_setMaxMotorImpulse(self, *args)
    def setMotorTarget(self, *args): return ___init__.btHingeConstraint_setMotorTarget(self, *args)
    def setLimit(self, *args): return ___init__.btHingeConstraint_setLimit(self, *args)
    def setAxis(self, *args): return ___init__.btHingeConstraint_setAxis(self, *args)
    def getLowerLimit(self): return ___init__.btHingeConstraint_getLowerLimit(self)
    def getUpperLimit(self): return ___init__.btHingeConstraint_getUpperLimit(self)
    def getHingeAngle(self, *args): return ___init__.btHingeConstraint_getHingeAngle(self, *args)
    def testLimit(self, *args): return ___init__.btHingeConstraint_testLimit(self, *args)
    def getAFrame(self, *args): return ___init__.btHingeConstraint_getAFrame(self, *args)
    def getBFrame(self, *args): return ___init__.btHingeConstraint_getBFrame(self, *args)
    def getSolveLimit(self): return ___init__.btHingeConstraint_getSolveLimit(self)
    def getLimitSign(self): return ___init__.btHingeConstraint_getLimitSign(self)
    def getAngularOnly(self): return ___init__.btHingeConstraint_getAngularOnly(self)
    def getEnableAngularMotor(self): return ___init__.btHingeConstraint_getEnableAngularMotor(self)
    def getMotorTargetVelosity(self): return ___init__.btHingeConstraint_getMotorTargetVelosity(self)
    def getMaxMotorImpulse(self): return ___init__.btHingeConstraint_getMaxMotorImpulse(self)
    def getUseFrameOffset(self): return ___init__.btHingeConstraint_getUseFrameOffset(self)
    def setUseFrameOffset(self, *args): return ___init__.btHingeConstraint_setUseFrameOffset(self, *args)
    def setParam(self, *args): return ___init__.btHingeConstraint_setParam(self, *args)
    def getParam(self, *args): return ___init__.btHingeConstraint_getParam(self, *args)
    def calculateSerializeBufferSize(self): return ___init__.btHingeConstraint_calculateSerializeBufferSize(self)
    def serialize(self, *args): return ___init__.btHingeConstraint_serialize(self, *args)
    __swig_destroy__ = ___init__.delete_btHingeConstraint
    __del__ = lambda self : None;
btHingeConstraint_swigregister = ___init__.btHingeConstraint_swigregister
btHingeConstraint_swigregister(btHingeConstraint)

class btHingeConstraintDoubleData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btHingeConstraintDoubleData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btHingeConstraintDoubleData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_typeConstraintData"] = ___init__.btHingeConstraintDoubleData_m_typeConstraintData_set
    __swig_getmethods__["m_typeConstraintData"] = ___init__.btHingeConstraintDoubleData_m_typeConstraintData_get
    if _newclass:m_typeConstraintData = _swig_property(___init__.btHingeConstraintDoubleData_m_typeConstraintData_get, ___init__.btHingeConstraintDoubleData_m_typeConstraintData_set)
    __swig_setmethods__["m_rbAFrame"] = ___init__.btHingeConstraintDoubleData_m_rbAFrame_set
    __swig_getmethods__["m_rbAFrame"] = ___init__.btHingeConstraintDoubleData_m_rbAFrame_get
    if _newclass:m_rbAFrame = _swig_property(___init__.btHingeConstraintDoubleData_m_rbAFrame_get, ___init__.btHingeConstraintDoubleData_m_rbAFrame_set)
    __swig_setmethods__["m_rbBFrame"] = ___init__.btHingeConstraintDoubleData_m_rbBFrame_set
    __swig_getmethods__["m_rbBFrame"] = ___init__.btHingeConstraintDoubleData_m_rbBFrame_get
    if _newclass:m_rbBFrame = _swig_property(___init__.btHingeConstraintDoubleData_m_rbBFrame_get, ___init__.btHingeConstraintDoubleData_m_rbBFrame_set)
    __swig_setmethods__["m_useReferenceFrameA"] = ___init__.btHingeConstraintDoubleData_m_useReferenceFrameA_set
    __swig_getmethods__["m_useReferenceFrameA"] = ___init__.btHingeConstraintDoubleData_m_useReferenceFrameA_get
    if _newclass:m_useReferenceFrameA = _swig_property(___init__.btHingeConstraintDoubleData_m_useReferenceFrameA_get, ___init__.btHingeConstraintDoubleData_m_useReferenceFrameA_set)
    __swig_setmethods__["m_angularOnly"] = ___init__.btHingeConstraintDoubleData_m_angularOnly_set
    __swig_getmethods__["m_angularOnly"] = ___init__.btHingeConstraintDoubleData_m_angularOnly_get
    if _newclass:m_angularOnly = _swig_property(___init__.btHingeConstraintDoubleData_m_angularOnly_get, ___init__.btHingeConstraintDoubleData_m_angularOnly_set)
    __swig_setmethods__["m_enableAngularMotor"] = ___init__.btHingeConstraintDoubleData_m_enableAngularMotor_set
    __swig_getmethods__["m_enableAngularMotor"] = ___init__.btHingeConstraintDoubleData_m_enableAngularMotor_get
    if _newclass:m_enableAngularMotor = _swig_property(___init__.btHingeConstraintDoubleData_m_enableAngularMotor_get, ___init__.btHingeConstraintDoubleData_m_enableAngularMotor_set)
    __swig_setmethods__["m_motorTargetVelocity"] = ___init__.btHingeConstraintDoubleData_m_motorTargetVelocity_set
    __swig_getmethods__["m_motorTargetVelocity"] = ___init__.btHingeConstraintDoubleData_m_motorTargetVelocity_get
    if _newclass:m_motorTargetVelocity = _swig_property(___init__.btHingeConstraintDoubleData_m_motorTargetVelocity_get, ___init__.btHingeConstraintDoubleData_m_motorTargetVelocity_set)
    __swig_setmethods__["m_maxMotorImpulse"] = ___init__.btHingeConstraintDoubleData_m_maxMotorImpulse_set
    __swig_getmethods__["m_maxMotorImpulse"] = ___init__.btHingeConstraintDoubleData_m_maxMotorImpulse_get
    if _newclass:m_maxMotorImpulse = _swig_property(___init__.btHingeConstraintDoubleData_m_maxMotorImpulse_get, ___init__.btHingeConstraintDoubleData_m_maxMotorImpulse_set)
    __swig_setmethods__["m_lowerLimit"] = ___init__.btHingeConstraintDoubleData_m_lowerLimit_set
    __swig_getmethods__["m_lowerLimit"] = ___init__.btHingeConstraintDoubleData_m_lowerLimit_get
    if _newclass:m_lowerLimit = _swig_property(___init__.btHingeConstraintDoubleData_m_lowerLimit_get, ___init__.btHingeConstraintDoubleData_m_lowerLimit_set)
    __swig_setmethods__["m_upperLimit"] = ___init__.btHingeConstraintDoubleData_m_upperLimit_set
    __swig_getmethods__["m_upperLimit"] = ___init__.btHingeConstraintDoubleData_m_upperLimit_get
    if _newclass:m_upperLimit = _swig_property(___init__.btHingeConstraintDoubleData_m_upperLimit_get, ___init__.btHingeConstraintDoubleData_m_upperLimit_set)
    __swig_setmethods__["m_limitSoftness"] = ___init__.btHingeConstraintDoubleData_m_limitSoftness_set
    __swig_getmethods__["m_limitSoftness"] = ___init__.btHingeConstraintDoubleData_m_limitSoftness_get
    if _newclass:m_limitSoftness = _swig_property(___init__.btHingeConstraintDoubleData_m_limitSoftness_get, ___init__.btHingeConstraintDoubleData_m_limitSoftness_set)
    __swig_setmethods__["m_biasFactor"] = ___init__.btHingeConstraintDoubleData_m_biasFactor_set
    __swig_getmethods__["m_biasFactor"] = ___init__.btHingeConstraintDoubleData_m_biasFactor_get
    if _newclass:m_biasFactor = _swig_property(___init__.btHingeConstraintDoubleData_m_biasFactor_get, ___init__.btHingeConstraintDoubleData_m_biasFactor_set)
    __swig_setmethods__["m_relaxationFactor"] = ___init__.btHingeConstraintDoubleData_m_relaxationFactor_set
    __swig_getmethods__["m_relaxationFactor"] = ___init__.btHingeConstraintDoubleData_m_relaxationFactor_get
    if _newclass:m_relaxationFactor = _swig_property(___init__.btHingeConstraintDoubleData_m_relaxationFactor_get, ___init__.btHingeConstraintDoubleData_m_relaxationFactor_set)
    def __init__(self): 
        this = ___init__.new_btHingeConstraintDoubleData()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = ___init__.delete_btHingeConstraintDoubleData
    __del__ = lambda self : None;
btHingeConstraintDoubleData_swigregister = ___init__.btHingeConstraintDoubleData_swigregister
btHingeConstraintDoubleData_swigregister(btHingeConstraintDoubleData)

class btHingeConstraintFloatData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btHingeConstraintFloatData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btHingeConstraintFloatData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_typeConstraintData"] = ___init__.btHingeConstraintFloatData_m_typeConstraintData_set
    __swig_getmethods__["m_typeConstraintData"] = ___init__.btHingeConstraintFloatData_m_typeConstraintData_get
    if _newclass:m_typeConstraintData = _swig_property(___init__.btHingeConstraintFloatData_m_typeConstraintData_get, ___init__.btHingeConstraintFloatData_m_typeConstraintData_set)
    __swig_setmethods__["m_rbAFrame"] = ___init__.btHingeConstraintFloatData_m_rbAFrame_set
    __swig_getmethods__["m_rbAFrame"] = ___init__.btHingeConstraintFloatData_m_rbAFrame_get
    if _newclass:m_rbAFrame = _swig_property(___init__.btHingeConstraintFloatData_m_rbAFrame_get, ___init__.btHingeConstraintFloatData_m_rbAFrame_set)
    __swig_setmethods__["m_rbBFrame"] = ___init__.btHingeConstraintFloatData_m_rbBFrame_set
    __swig_getmethods__["m_rbBFrame"] = ___init__.btHingeConstraintFloatData_m_rbBFrame_get
    if _newclass:m_rbBFrame = _swig_property(___init__.btHingeConstraintFloatData_m_rbBFrame_get, ___init__.btHingeConstraintFloatData_m_rbBFrame_set)
    __swig_setmethods__["m_useReferenceFrameA"] = ___init__.btHingeConstraintFloatData_m_useReferenceFrameA_set
    __swig_getmethods__["m_useReferenceFrameA"] = ___init__.btHingeConstraintFloatData_m_useReferenceFrameA_get
    if _newclass:m_useReferenceFrameA = _swig_property(___init__.btHingeConstraintFloatData_m_useReferenceFrameA_get, ___init__.btHingeConstraintFloatData_m_useReferenceFrameA_set)
    __swig_setmethods__["m_angularOnly"] = ___init__.btHingeConstraintFloatData_m_angularOnly_set
    __swig_getmethods__["m_angularOnly"] = ___init__.btHingeConstraintFloatData_m_angularOnly_get
    if _newclass:m_angularOnly = _swig_property(___init__.btHingeConstraintFloatData_m_angularOnly_get, ___init__.btHingeConstraintFloatData_m_angularOnly_set)
    __swig_setmethods__["m_enableAngularMotor"] = ___init__.btHingeConstraintFloatData_m_enableAngularMotor_set
    __swig_getmethods__["m_enableAngularMotor"] = ___init__.btHingeConstraintFloatData_m_enableAngularMotor_get
    if _newclass:m_enableAngularMotor = _swig_property(___init__.btHingeConstraintFloatData_m_enableAngularMotor_get, ___init__.btHingeConstraintFloatData_m_enableAngularMotor_set)
    __swig_setmethods__["m_motorTargetVelocity"] = ___init__.btHingeConstraintFloatData_m_motorTargetVelocity_set
    __swig_getmethods__["m_motorTargetVelocity"] = ___init__.btHingeConstraintFloatData_m_motorTargetVelocity_get
    if _newclass:m_motorTargetVelocity = _swig_property(___init__.btHingeConstraintFloatData_m_motorTargetVelocity_get, ___init__.btHingeConstraintFloatData_m_motorTargetVelocity_set)
    __swig_setmethods__["m_maxMotorImpulse"] = ___init__.btHingeConstraintFloatData_m_maxMotorImpulse_set
    __swig_getmethods__["m_maxMotorImpulse"] = ___init__.btHingeConstraintFloatData_m_maxMotorImpulse_get
    if _newclass:m_maxMotorImpulse = _swig_property(___init__.btHingeConstraintFloatData_m_maxMotorImpulse_get, ___init__.btHingeConstraintFloatData_m_maxMotorImpulse_set)
    __swig_setmethods__["m_lowerLimit"] = ___init__.btHingeConstraintFloatData_m_lowerLimit_set
    __swig_getmethods__["m_lowerLimit"] = ___init__.btHingeConstraintFloatData_m_lowerLimit_get
    if _newclass:m_lowerLimit = _swig_property(___init__.btHingeConstraintFloatData_m_lowerLimit_get, ___init__.btHingeConstraintFloatData_m_lowerLimit_set)
    __swig_setmethods__["m_upperLimit"] = ___init__.btHingeConstraintFloatData_m_upperLimit_set
    __swig_getmethods__["m_upperLimit"] = ___init__.btHingeConstraintFloatData_m_upperLimit_get
    if _newclass:m_upperLimit = _swig_property(___init__.btHingeConstraintFloatData_m_upperLimit_get, ___init__.btHingeConstraintFloatData_m_upperLimit_set)
    __swig_setmethods__["m_limitSoftness"] = ___init__.btHingeConstraintFloatData_m_limitSoftness_set
    __swig_getmethods__["m_limitSoftness"] = ___init__.btHingeConstraintFloatData_m_limitSoftness_get
    if _newclass:m_limitSoftness = _swig_property(___init__.btHingeConstraintFloatData_m_limitSoftness_get, ___init__.btHingeConstraintFloatData_m_limitSoftness_set)
    __swig_setmethods__["m_biasFactor"] = ___init__.btHingeConstraintFloatData_m_biasFactor_set
    __swig_getmethods__["m_biasFactor"] = ___init__.btHingeConstraintFloatData_m_biasFactor_get
    if _newclass:m_biasFactor = _swig_property(___init__.btHingeConstraintFloatData_m_biasFactor_get, ___init__.btHingeConstraintFloatData_m_biasFactor_set)
    __swig_setmethods__["m_relaxationFactor"] = ___init__.btHingeConstraintFloatData_m_relaxationFactor_set
    __swig_getmethods__["m_relaxationFactor"] = ___init__.btHingeConstraintFloatData_m_relaxationFactor_get
    if _newclass:m_relaxationFactor = _swig_property(___init__.btHingeConstraintFloatData_m_relaxationFactor_get, ___init__.btHingeConstraintFloatData_m_relaxationFactor_set)
    def __init__(self): 
        this = ___init__.new_btHingeConstraintFloatData()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = ___init__.delete_btHingeConstraintFloatData
    __del__ = lambda self : None;
btHingeConstraintFloatData_swigregister = ___init__.btHingeConstraintFloatData_swigregister
btHingeConstraintFloatData_swigregister(btHingeConstraintFloatData)

BT_CONETWIST_FLAGS_LIN_CFM = ___init__.BT_CONETWIST_FLAGS_LIN_CFM
BT_CONETWIST_FLAGS_LIN_ERP = ___init__.BT_CONETWIST_FLAGS_LIN_ERP
BT_CONETWIST_FLAGS_ANG_CFM = ___init__.BT_CONETWIST_FLAGS_ANG_CFM
class btConeTwistConstraint(btTypedConstraint):
    __swig_setmethods__ = {}
    for _s in [btTypedConstraint]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btConeTwistConstraint, name, value)
    __swig_getmethods__ = {}
    for _s in [btTypedConstraint]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, btConeTwistConstraint, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = ___init__.new_btConeTwistConstraint(*args)
        try: self.this.append(this)
        except: self.this = this
    def buildJacobian(self): return ___init__.btConeTwistConstraint_buildJacobian(self)
    def getInfo1(self, *args): return ___init__.btConeTwistConstraint_getInfo1(self, *args)
    def getInfo1NonVirtual(self, *args): return ___init__.btConeTwistConstraint_getInfo1NonVirtual(self, *args)
    def getInfo2(self, *args): return ___init__.btConeTwistConstraint_getInfo2(self, *args)
    def getInfo2NonVirtual(self, *args): return ___init__.btConeTwistConstraint_getInfo2NonVirtual(self, *args)
    def solveConstraintObsolete(self, *args): return ___init__.btConeTwistConstraint_solveConstraintObsolete(self, *args)
    def updateRHS(self, *args): return ___init__.btConeTwistConstraint_updateRHS(self, *args)
    def getRigidBodyA(self): return ___init__.btConeTwistConstraint_getRigidBodyA(self)
    def getRigidBodyB(self): return ___init__.btConeTwistConstraint_getRigidBodyB(self)
    def setAngularOnly(self, *args): return ___init__.btConeTwistConstraint_setAngularOnly(self, *args)
    def setLimit(self, *args): return ___init__.btConeTwistConstraint_setLimit(self, *args)
    def getAFrame(self): return ___init__.btConeTwistConstraint_getAFrame(self)
    def getBFrame(self): return ___init__.btConeTwistConstraint_getBFrame(self)
    def getSolveTwistLimit(self): return ___init__.btConeTwistConstraint_getSolveTwistLimit(self)
    def getSolveSwingLimit(self): return ___init__.btConeTwistConstraint_getSolveSwingLimit(self)
    def getTwistLimitSign(self): return ___init__.btConeTwistConstraint_getTwistLimitSign(self)
    def calcAngleInfo(self): return ___init__.btConeTwistConstraint_calcAngleInfo(self)
    def calcAngleInfo2(self, *args): return ___init__.btConeTwistConstraint_calcAngleInfo2(self, *args)
    def getSwingSpan1(self): return ___init__.btConeTwistConstraint_getSwingSpan1(self)
    def getSwingSpan2(self): return ___init__.btConeTwistConstraint_getSwingSpan2(self)
    def getTwistSpan(self): return ___init__.btConeTwistConstraint_getTwistSpan(self)
    def getTwistAngle(self): return ___init__.btConeTwistConstraint_getTwistAngle(self)
    def isPastSwingLimit(self): return ___init__.btConeTwistConstraint_isPastSwingLimit(self)
    def setDamping(self, *args): return ___init__.btConeTwistConstraint_setDamping(self, *args)
    def enableMotor(self, *args): return ___init__.btConeTwistConstraint_enableMotor(self, *args)
    def setMaxMotorImpulse(self, *args): return ___init__.btConeTwistConstraint_setMaxMotorImpulse(self, *args)
    def setMaxMotorImpulseNormalized(self, *args): return ___init__.btConeTwistConstraint_setMaxMotorImpulseNormalized(self, *args)
    def getFixThresh(self): return ___init__.btConeTwistConstraint_getFixThresh(self)
    def setFixThresh(self, *args): return ___init__.btConeTwistConstraint_setFixThresh(self, *args)
    def setMotorTarget(self, *args): return ___init__.btConeTwistConstraint_setMotorTarget(self, *args)
    def setMotorTargetInConstraintSpace(self, *args): return ___init__.btConeTwistConstraint_setMotorTargetInConstraintSpace(self, *args)
    def GetPointForAngle(self, *args): return ___init__.btConeTwistConstraint_GetPointForAngle(self, *args)
    def setParam(self, *args): return ___init__.btConeTwistConstraint_setParam(self, *args)
    def setFrames(self, *args): return ___init__.btConeTwistConstraint_setFrames(self, *args)
    def getFrameOffsetA(self): return ___init__.btConeTwistConstraint_getFrameOffsetA(self)
    def getFrameOffsetB(self): return ___init__.btConeTwistConstraint_getFrameOffsetB(self)
    def getParam(self, *args): return ___init__.btConeTwistConstraint_getParam(self, *args)
    def calculateSerializeBufferSize(self): return ___init__.btConeTwistConstraint_calculateSerializeBufferSize(self)
    def serialize(self, *args): return ___init__.btConeTwistConstraint_serialize(self, *args)
    __swig_destroy__ = ___init__.delete_btConeTwistConstraint
    __del__ = lambda self : None;
btConeTwistConstraint_swigregister = ___init__.btConeTwistConstraint_swigregister
btConeTwistConstraint_swigregister(btConeTwistConstraint)

class btConeTwistConstraintData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btConeTwistConstraintData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btConeTwistConstraintData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_typeConstraintData"] = ___init__.btConeTwistConstraintData_m_typeConstraintData_set
    __swig_getmethods__["m_typeConstraintData"] = ___init__.btConeTwistConstraintData_m_typeConstraintData_get
    if _newclass:m_typeConstraintData = _swig_property(___init__.btConeTwistConstraintData_m_typeConstraintData_get, ___init__.btConeTwistConstraintData_m_typeConstraintData_set)
    __swig_setmethods__["m_rbAFrame"] = ___init__.btConeTwistConstraintData_m_rbAFrame_set
    __swig_getmethods__["m_rbAFrame"] = ___init__.btConeTwistConstraintData_m_rbAFrame_get
    if _newclass:m_rbAFrame = _swig_property(___init__.btConeTwistConstraintData_m_rbAFrame_get, ___init__.btConeTwistConstraintData_m_rbAFrame_set)
    __swig_setmethods__["m_rbBFrame"] = ___init__.btConeTwistConstraintData_m_rbBFrame_set
    __swig_getmethods__["m_rbBFrame"] = ___init__.btConeTwistConstraintData_m_rbBFrame_get
    if _newclass:m_rbBFrame = _swig_property(___init__.btConeTwistConstraintData_m_rbBFrame_get, ___init__.btConeTwistConstraintData_m_rbBFrame_set)
    __swig_setmethods__["m_swingSpan1"] = ___init__.btConeTwistConstraintData_m_swingSpan1_set
    __swig_getmethods__["m_swingSpan1"] = ___init__.btConeTwistConstraintData_m_swingSpan1_get
    if _newclass:m_swingSpan1 = _swig_property(___init__.btConeTwistConstraintData_m_swingSpan1_get, ___init__.btConeTwistConstraintData_m_swingSpan1_set)
    __swig_setmethods__["m_swingSpan2"] = ___init__.btConeTwistConstraintData_m_swingSpan2_set
    __swig_getmethods__["m_swingSpan2"] = ___init__.btConeTwistConstraintData_m_swingSpan2_get
    if _newclass:m_swingSpan2 = _swig_property(___init__.btConeTwistConstraintData_m_swingSpan2_get, ___init__.btConeTwistConstraintData_m_swingSpan2_set)
    __swig_setmethods__["m_twistSpan"] = ___init__.btConeTwistConstraintData_m_twistSpan_set
    __swig_getmethods__["m_twistSpan"] = ___init__.btConeTwistConstraintData_m_twistSpan_get
    if _newclass:m_twistSpan = _swig_property(___init__.btConeTwistConstraintData_m_twistSpan_get, ___init__.btConeTwistConstraintData_m_twistSpan_set)
    __swig_setmethods__["m_limitSoftness"] = ___init__.btConeTwistConstraintData_m_limitSoftness_set
    __swig_getmethods__["m_limitSoftness"] = ___init__.btConeTwistConstraintData_m_limitSoftness_get
    if _newclass:m_limitSoftness = _swig_property(___init__.btConeTwistConstraintData_m_limitSoftness_get, ___init__.btConeTwistConstraintData_m_limitSoftness_set)
    __swig_setmethods__["m_biasFactor"] = ___init__.btConeTwistConstraintData_m_biasFactor_set
    __swig_getmethods__["m_biasFactor"] = ___init__.btConeTwistConstraintData_m_biasFactor_get
    if _newclass:m_biasFactor = _swig_property(___init__.btConeTwistConstraintData_m_biasFactor_get, ___init__.btConeTwistConstraintData_m_biasFactor_set)
    __swig_setmethods__["m_relaxationFactor"] = ___init__.btConeTwistConstraintData_m_relaxationFactor_set
    __swig_getmethods__["m_relaxationFactor"] = ___init__.btConeTwistConstraintData_m_relaxationFactor_get
    if _newclass:m_relaxationFactor = _swig_property(___init__.btConeTwistConstraintData_m_relaxationFactor_get, ___init__.btConeTwistConstraintData_m_relaxationFactor_set)
    __swig_setmethods__["m_damping"] = ___init__.btConeTwistConstraintData_m_damping_set
    __swig_getmethods__["m_damping"] = ___init__.btConeTwistConstraintData_m_damping_get
    if _newclass:m_damping = _swig_property(___init__.btConeTwistConstraintData_m_damping_get, ___init__.btConeTwistConstraintData_m_damping_set)
    __swig_setmethods__["m_pad"] = ___init__.btConeTwistConstraintData_m_pad_set
    __swig_getmethods__["m_pad"] = ___init__.btConeTwistConstraintData_m_pad_get
    if _newclass:m_pad = _swig_property(___init__.btConeTwistConstraintData_m_pad_get, ___init__.btConeTwistConstraintData_m_pad_set)
    def __init__(self): 
        this = ___init__.new_btConeTwistConstraintData()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = ___init__.delete_btConeTwistConstraintData
    __del__ = lambda self : None;
btConeTwistConstraintData_swigregister = ___init__.btConeTwistConstraintData_swigregister
btConeTwistConstraintData_swigregister(btConeTwistConstraintData)

class btRotationalLimitMotor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btRotationalLimitMotor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btRotationalLimitMotor, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_loLimit"] = ___init__.btRotationalLimitMotor_m_loLimit_set
    __swig_getmethods__["m_loLimit"] = ___init__.btRotationalLimitMotor_m_loLimit_get
    if _newclass:m_loLimit = _swig_property(___init__.btRotationalLimitMotor_m_loLimit_get, ___init__.btRotationalLimitMotor_m_loLimit_set)
    __swig_setmethods__["m_hiLimit"] = ___init__.btRotationalLimitMotor_m_hiLimit_set
    __swig_getmethods__["m_hiLimit"] = ___init__.btRotationalLimitMotor_m_hiLimit_get
    if _newclass:m_hiLimit = _swig_property(___init__.btRotationalLimitMotor_m_hiLimit_get, ___init__.btRotationalLimitMotor_m_hiLimit_set)
    __swig_setmethods__["m_targetVelocity"] = ___init__.btRotationalLimitMotor_m_targetVelocity_set
    __swig_getmethods__["m_targetVelocity"] = ___init__.btRotationalLimitMotor_m_targetVelocity_get
    if _newclass:m_targetVelocity = _swig_property(___init__.btRotationalLimitMotor_m_targetVelocity_get, ___init__.btRotationalLimitMotor_m_targetVelocity_set)
    __swig_setmethods__["m_maxMotorForce"] = ___init__.btRotationalLimitMotor_m_maxMotorForce_set
    __swig_getmethods__["m_maxMotorForce"] = ___init__.btRotationalLimitMotor_m_maxMotorForce_get
    if _newclass:m_maxMotorForce = _swig_property(___init__.btRotationalLimitMotor_m_maxMotorForce_get, ___init__.btRotationalLimitMotor_m_maxMotorForce_set)
    __swig_setmethods__["m_maxLimitForce"] = ___init__.btRotationalLimitMotor_m_maxLimitForce_set
    __swig_getmethods__["m_maxLimitForce"] = ___init__.btRotationalLimitMotor_m_maxLimitForce_get
    if _newclass:m_maxLimitForce = _swig_property(___init__.btRotationalLimitMotor_m_maxLimitForce_get, ___init__.btRotationalLimitMotor_m_maxLimitForce_set)
    __swig_setmethods__["m_damping"] = ___init__.btRotationalLimitMotor_m_damping_set
    __swig_getmethods__["m_damping"] = ___init__.btRotationalLimitMotor_m_damping_get
    if _newclass:m_damping = _swig_property(___init__.btRotationalLimitMotor_m_damping_get, ___init__.btRotationalLimitMotor_m_damping_set)
    __swig_setmethods__["m_limitSoftness"] = ___init__.btRotationalLimitMotor_m_limitSoftness_set
    __swig_getmethods__["m_limitSoftness"] = ___init__.btRotationalLimitMotor_m_limitSoftness_get
    if _newclass:m_limitSoftness = _swig_property(___init__.btRotationalLimitMotor_m_limitSoftness_get, ___init__.btRotationalLimitMotor_m_limitSoftness_set)
    __swig_setmethods__["m_normalCFM"] = ___init__.btRotationalLimitMotor_m_normalCFM_set
    __swig_getmethods__["m_normalCFM"] = ___init__.btRotationalLimitMotor_m_normalCFM_get
    if _newclass:m_normalCFM = _swig_property(___init__.btRotationalLimitMotor_m_normalCFM_get, ___init__.btRotationalLimitMotor_m_normalCFM_set)
    __swig_setmethods__["m_stopERP"] = ___init__.btRotationalLimitMotor_m_stopERP_set
    __swig_getmethods__["m_stopERP"] = ___init__.btRotationalLimitMotor_m_stopERP_get
    if _newclass:m_stopERP = _swig_property(___init__.btRotationalLimitMotor_m_stopERP_get, ___init__.btRotationalLimitMotor_m_stopERP_set)
    __swig_setmethods__["m_stopCFM"] = ___init__.btRotationalLimitMotor_m_stopCFM_set
    __swig_getmethods__["m_stopCFM"] = ___init__.btRotationalLimitMotor_m_stopCFM_get
    if _newclass:m_stopCFM = _swig_property(___init__.btRotationalLimitMotor_m_stopCFM_get, ___init__.btRotationalLimitMotor_m_stopCFM_set)
    __swig_setmethods__["m_bounce"] = ___init__.btRotationalLimitMotor_m_bounce_set
    __swig_getmethods__["m_bounce"] = ___init__.btRotationalLimitMotor_m_bounce_get
    if _newclass:m_bounce = _swig_property(___init__.btRotationalLimitMotor_m_bounce_get, ___init__.btRotationalLimitMotor_m_bounce_set)
    __swig_setmethods__["m_enableMotor"] = ___init__.btRotationalLimitMotor_m_enableMotor_set
    __swig_getmethods__["m_enableMotor"] = ___init__.btRotationalLimitMotor_m_enableMotor_get
    if _newclass:m_enableMotor = _swig_property(___init__.btRotationalLimitMotor_m_enableMotor_get, ___init__.btRotationalLimitMotor_m_enableMotor_set)
    __swig_setmethods__["m_currentLimitError"] = ___init__.btRotationalLimitMotor_m_currentLimitError_set
    __swig_getmethods__["m_currentLimitError"] = ___init__.btRotationalLimitMotor_m_currentLimitError_get
    if _newclass:m_currentLimitError = _swig_property(___init__.btRotationalLimitMotor_m_currentLimitError_get, ___init__.btRotationalLimitMotor_m_currentLimitError_set)
    __swig_setmethods__["m_currentPosition"] = ___init__.btRotationalLimitMotor_m_currentPosition_set
    __swig_getmethods__["m_currentPosition"] = ___init__.btRotationalLimitMotor_m_currentPosition_get
    if _newclass:m_currentPosition = _swig_property(___init__.btRotationalLimitMotor_m_currentPosition_get, ___init__.btRotationalLimitMotor_m_currentPosition_set)
    __swig_setmethods__["m_currentLimit"] = ___init__.btRotationalLimitMotor_m_currentLimit_set
    __swig_getmethods__["m_currentLimit"] = ___init__.btRotationalLimitMotor_m_currentLimit_get
    if _newclass:m_currentLimit = _swig_property(___init__.btRotationalLimitMotor_m_currentLimit_get, ___init__.btRotationalLimitMotor_m_currentLimit_set)
    __swig_setmethods__["m_accumulatedImpulse"] = ___init__.btRotationalLimitMotor_m_accumulatedImpulse_set
    __swig_getmethods__["m_accumulatedImpulse"] = ___init__.btRotationalLimitMotor_m_accumulatedImpulse_get
    if _newclass:m_accumulatedImpulse = _swig_property(___init__.btRotationalLimitMotor_m_accumulatedImpulse_get, ___init__.btRotationalLimitMotor_m_accumulatedImpulse_set)
    def __init__(self, *args): 
        this = ___init__.new_btRotationalLimitMotor(*args)
        try: self.this.append(this)
        except: self.this = this
    def isLimited(self): return ___init__.btRotationalLimitMotor_isLimited(self)
    def needApplyTorques(self): return ___init__.btRotationalLimitMotor_needApplyTorques(self)
    def testLimitValue(self, *args): return ___init__.btRotationalLimitMotor_testLimitValue(self, *args)
    def solveAngularLimits(self, *args): return ___init__.btRotationalLimitMotor_solveAngularLimits(self, *args)
    __swig_destroy__ = ___init__.delete_btRotationalLimitMotor
    __del__ = lambda self : None;
btRotationalLimitMotor_swigregister = ___init__.btRotationalLimitMotor_swigregister
btRotationalLimitMotor_swigregister(btRotationalLimitMotor)

class btTranslationalLimitMotor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btTranslationalLimitMotor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btTranslationalLimitMotor, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_lowerLimit"] = ___init__.btTranslationalLimitMotor_m_lowerLimit_set
    __swig_getmethods__["m_lowerLimit"] = ___init__.btTranslationalLimitMotor_m_lowerLimit_get
    if _newclass:m_lowerLimit = _swig_property(___init__.btTranslationalLimitMotor_m_lowerLimit_get, ___init__.btTranslationalLimitMotor_m_lowerLimit_set)
    __swig_setmethods__["m_upperLimit"] = ___init__.btTranslationalLimitMotor_m_upperLimit_set
    __swig_getmethods__["m_upperLimit"] = ___init__.btTranslationalLimitMotor_m_upperLimit_get
    if _newclass:m_upperLimit = _swig_property(___init__.btTranslationalLimitMotor_m_upperLimit_get, ___init__.btTranslationalLimitMotor_m_upperLimit_set)
    __swig_setmethods__["m_accumulatedImpulse"] = ___init__.btTranslationalLimitMotor_m_accumulatedImpulse_set
    __swig_getmethods__["m_accumulatedImpulse"] = ___init__.btTranslationalLimitMotor_m_accumulatedImpulse_get
    if _newclass:m_accumulatedImpulse = _swig_property(___init__.btTranslationalLimitMotor_m_accumulatedImpulse_get, ___init__.btTranslationalLimitMotor_m_accumulatedImpulse_set)
    __swig_setmethods__["m_limitSoftness"] = ___init__.btTranslationalLimitMotor_m_limitSoftness_set
    __swig_getmethods__["m_limitSoftness"] = ___init__.btTranslationalLimitMotor_m_limitSoftness_get
    if _newclass:m_limitSoftness = _swig_property(___init__.btTranslationalLimitMotor_m_limitSoftness_get, ___init__.btTranslationalLimitMotor_m_limitSoftness_set)
    __swig_setmethods__["m_damping"] = ___init__.btTranslationalLimitMotor_m_damping_set
    __swig_getmethods__["m_damping"] = ___init__.btTranslationalLimitMotor_m_damping_get
    if _newclass:m_damping = _swig_property(___init__.btTranslationalLimitMotor_m_damping_get, ___init__.btTranslationalLimitMotor_m_damping_set)
    __swig_setmethods__["m_restitution"] = ___init__.btTranslationalLimitMotor_m_restitution_set
    __swig_getmethods__["m_restitution"] = ___init__.btTranslationalLimitMotor_m_restitution_get
    if _newclass:m_restitution = _swig_property(___init__.btTranslationalLimitMotor_m_restitution_get, ___init__.btTranslationalLimitMotor_m_restitution_set)
    __swig_setmethods__["m_normalCFM"] = ___init__.btTranslationalLimitMotor_m_normalCFM_set
    __swig_getmethods__["m_normalCFM"] = ___init__.btTranslationalLimitMotor_m_normalCFM_get
    if _newclass:m_normalCFM = _swig_property(___init__.btTranslationalLimitMotor_m_normalCFM_get, ___init__.btTranslationalLimitMotor_m_normalCFM_set)
    __swig_setmethods__["m_stopERP"] = ___init__.btTranslationalLimitMotor_m_stopERP_set
    __swig_getmethods__["m_stopERP"] = ___init__.btTranslationalLimitMotor_m_stopERP_get
    if _newclass:m_stopERP = _swig_property(___init__.btTranslationalLimitMotor_m_stopERP_get, ___init__.btTranslationalLimitMotor_m_stopERP_set)
    __swig_setmethods__["m_stopCFM"] = ___init__.btTranslationalLimitMotor_m_stopCFM_set
    __swig_getmethods__["m_stopCFM"] = ___init__.btTranslationalLimitMotor_m_stopCFM_get
    if _newclass:m_stopCFM = _swig_property(___init__.btTranslationalLimitMotor_m_stopCFM_get, ___init__.btTranslationalLimitMotor_m_stopCFM_set)
    __swig_setmethods__["m_enableMotor"] = ___init__.btTranslationalLimitMotor_m_enableMotor_set
    __swig_getmethods__["m_enableMotor"] = ___init__.btTranslationalLimitMotor_m_enableMotor_get
    if _newclass:m_enableMotor = _swig_property(___init__.btTranslationalLimitMotor_m_enableMotor_get, ___init__.btTranslationalLimitMotor_m_enableMotor_set)
    __swig_setmethods__["m_targetVelocity"] = ___init__.btTranslationalLimitMotor_m_targetVelocity_set
    __swig_getmethods__["m_targetVelocity"] = ___init__.btTranslationalLimitMotor_m_targetVelocity_get
    if _newclass:m_targetVelocity = _swig_property(___init__.btTranslationalLimitMotor_m_targetVelocity_get, ___init__.btTranslationalLimitMotor_m_targetVelocity_set)
    __swig_setmethods__["m_maxMotorForce"] = ___init__.btTranslationalLimitMotor_m_maxMotorForce_set
    __swig_getmethods__["m_maxMotorForce"] = ___init__.btTranslationalLimitMotor_m_maxMotorForce_get
    if _newclass:m_maxMotorForce = _swig_property(___init__.btTranslationalLimitMotor_m_maxMotorForce_get, ___init__.btTranslationalLimitMotor_m_maxMotorForce_set)
    __swig_setmethods__["m_currentLimitError"] = ___init__.btTranslationalLimitMotor_m_currentLimitError_set
    __swig_getmethods__["m_currentLimitError"] = ___init__.btTranslationalLimitMotor_m_currentLimitError_get
    if _newclass:m_currentLimitError = _swig_property(___init__.btTranslationalLimitMotor_m_currentLimitError_get, ___init__.btTranslationalLimitMotor_m_currentLimitError_set)
    __swig_setmethods__["m_currentLinearDiff"] = ___init__.btTranslationalLimitMotor_m_currentLinearDiff_set
    __swig_getmethods__["m_currentLinearDiff"] = ___init__.btTranslationalLimitMotor_m_currentLinearDiff_get
    if _newclass:m_currentLinearDiff = _swig_property(___init__.btTranslationalLimitMotor_m_currentLinearDiff_get, ___init__.btTranslationalLimitMotor_m_currentLinearDiff_set)
    __swig_setmethods__["m_currentLimit"] = ___init__.btTranslationalLimitMotor_m_currentLimit_set
    __swig_getmethods__["m_currentLimit"] = ___init__.btTranslationalLimitMotor_m_currentLimit_get
    if _newclass:m_currentLimit = _swig_property(___init__.btTranslationalLimitMotor_m_currentLimit_get, ___init__.btTranslationalLimitMotor_m_currentLimit_set)
    def __init__(self, *args): 
        this = ___init__.new_btTranslationalLimitMotor(*args)
        try: self.this.append(this)
        except: self.this = this
    def isLimited(self, *args): return ___init__.btTranslationalLimitMotor_isLimited(self, *args)
    def needApplyForce(self, *args): return ___init__.btTranslationalLimitMotor_needApplyForce(self, *args)
    def testLimitValue(self, *args): return ___init__.btTranslationalLimitMotor_testLimitValue(self, *args)
    def solveLinearAxis(self, *args): return ___init__.btTranslationalLimitMotor_solveLinearAxis(self, *args)
    __swig_destroy__ = ___init__.delete_btTranslationalLimitMotor
    __del__ = lambda self : None;
btTranslationalLimitMotor_swigregister = ___init__.btTranslationalLimitMotor_swigregister
btTranslationalLimitMotor_swigregister(btTranslationalLimitMotor)

BT_6DOF_FLAGS_CFM_NORM = ___init__.BT_6DOF_FLAGS_CFM_NORM
BT_6DOF_FLAGS_CFM_STOP = ___init__.BT_6DOF_FLAGS_CFM_STOP
BT_6DOF_FLAGS_ERP_STOP = ___init__.BT_6DOF_FLAGS_ERP_STOP
BT_6DOF_FLAGS_AXIS_SHIFT = ___init__.BT_6DOF_FLAGS_AXIS_SHIFT
class btGeneric6DofConstraint(btTypedConstraint):
    __swig_setmethods__ = {}
    for _s in [btTypedConstraint]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btGeneric6DofConstraint, name, value)
    __swig_getmethods__ = {}
    for _s in [btTypedConstraint]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, btGeneric6DofConstraint, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_useSolveConstraintObsolete"] = ___init__.btGeneric6DofConstraint_m_useSolveConstraintObsolete_set
    __swig_getmethods__["m_useSolveConstraintObsolete"] = ___init__.btGeneric6DofConstraint_m_useSolveConstraintObsolete_get
    if _newclass:m_useSolveConstraintObsolete = _swig_property(___init__.btGeneric6DofConstraint_m_useSolveConstraintObsolete_get, ___init__.btGeneric6DofConstraint_m_useSolveConstraintObsolete_set)
    def __init__(self, *args): 
        this = ___init__.new_btGeneric6DofConstraint(*args)
        try: self.this.append(this)
        except: self.this = this
    def calculateTransforms(self, *args): return ___init__.btGeneric6DofConstraint_calculateTransforms(self, *args)
    def getCalculatedTransformA(self): return ___init__.btGeneric6DofConstraint_getCalculatedTransformA(self)
    def getCalculatedTransformB(self): return ___init__.btGeneric6DofConstraint_getCalculatedTransformB(self)
    def getFrameOffsetA(self, *args): return ___init__.btGeneric6DofConstraint_getFrameOffsetA(self, *args)
    def getFrameOffsetB(self, *args): return ___init__.btGeneric6DofConstraint_getFrameOffsetB(self, *args)
    def buildJacobian(self): return ___init__.btGeneric6DofConstraint_buildJacobian(self)
    def getInfo1(self, *args): return ___init__.btGeneric6DofConstraint_getInfo1(self, *args)
    def getInfo1NonVirtual(self, *args): return ___init__.btGeneric6DofConstraint_getInfo1NonVirtual(self, *args)
    def getInfo2(self, *args): return ___init__.btGeneric6DofConstraint_getInfo2(self, *args)
    def getInfo2NonVirtual(self, *args): return ___init__.btGeneric6DofConstraint_getInfo2NonVirtual(self, *args)
    def updateRHS(self, *args): return ___init__.btGeneric6DofConstraint_updateRHS(self, *args)
    def getAxis(self, *args): return ___init__.btGeneric6DofConstraint_getAxis(self, *args)
    def getAngle(self, *args): return ___init__.btGeneric6DofConstraint_getAngle(self, *args)
    def getRelativePivotPosition(self, *args): return ___init__.btGeneric6DofConstraint_getRelativePivotPosition(self, *args)
    def setFrames(self, *args): return ___init__.btGeneric6DofConstraint_setFrames(self, *args)
    def testAngularLimitMotor(self, *args): return ___init__.btGeneric6DofConstraint_testAngularLimitMotor(self, *args)
    def setLinearLowerLimit(self, *args): return ___init__.btGeneric6DofConstraint_setLinearLowerLimit(self, *args)
    def getLinearLowerLimit(self, *args): return ___init__.btGeneric6DofConstraint_getLinearLowerLimit(self, *args)
    def setLinearUpperLimit(self, *args): return ___init__.btGeneric6DofConstraint_setLinearUpperLimit(self, *args)
    def getLinearUpperLimit(self, *args): return ___init__.btGeneric6DofConstraint_getLinearUpperLimit(self, *args)
    def setAngularLowerLimit(self, *args): return ___init__.btGeneric6DofConstraint_setAngularLowerLimit(self, *args)
    def getAngularLowerLimit(self, *args): return ___init__.btGeneric6DofConstraint_getAngularLowerLimit(self, *args)
    def setAngularUpperLimit(self, *args): return ___init__.btGeneric6DofConstraint_setAngularUpperLimit(self, *args)
    def getAngularUpperLimit(self, *args): return ___init__.btGeneric6DofConstraint_getAngularUpperLimit(self, *args)
    def getRotationalLimitMotor(self, *args): return ___init__.btGeneric6DofConstraint_getRotationalLimitMotor(self, *args)
    def getTranslationalLimitMotor(self): return ___init__.btGeneric6DofConstraint_getTranslationalLimitMotor(self)
    def setLimit(self, *args): return ___init__.btGeneric6DofConstraint_setLimit(self, *args)
    def isLimited(self, *args): return ___init__.btGeneric6DofConstraint_isLimited(self, *args)
    def calcAnchorPos(self): return ___init__.btGeneric6DofConstraint_calcAnchorPos(self)
    def get_limit_motor_info2(self, *args): return ___init__.btGeneric6DofConstraint_get_limit_motor_info2(self, *args)
    def getUseFrameOffset(self): return ___init__.btGeneric6DofConstraint_getUseFrameOffset(self)
    def setUseFrameOffset(self, *args): return ___init__.btGeneric6DofConstraint_setUseFrameOffset(self, *args)
    def setParam(self, *args): return ___init__.btGeneric6DofConstraint_setParam(self, *args)
    def getParam(self, *args): return ___init__.btGeneric6DofConstraint_getParam(self, *args)
    def setAxis(self, *args): return ___init__.btGeneric6DofConstraint_setAxis(self, *args)
    def calculateSerializeBufferSize(self): return ___init__.btGeneric6DofConstraint_calculateSerializeBufferSize(self)
    def serialize(self, *args): return ___init__.btGeneric6DofConstraint_serialize(self, *args)
    __swig_getmethods__["downcast"] = lambda x: ___init__.btGeneric6DofConstraint_downcast
    if _newclass:downcast = staticmethod(___init__.btGeneric6DofConstraint_downcast)
    __swig_destroy__ = ___init__.delete_btGeneric6DofConstraint
    __del__ = lambda self : None;
btGeneric6DofConstraint_swigregister = ___init__.btGeneric6DofConstraint_swigregister
btGeneric6DofConstraint_swigregister(btGeneric6DofConstraint)

def btGeneric6DofConstraint_downcast(*args):
  return ___init__.btGeneric6DofConstraint_downcast(*args)
btGeneric6DofConstraint_downcast = ___init__.btGeneric6DofConstraint_downcast

class btGeneric6DofConstraintData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btGeneric6DofConstraintData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btGeneric6DofConstraintData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_typeConstraintData"] = ___init__.btGeneric6DofConstraintData_m_typeConstraintData_set
    __swig_getmethods__["m_typeConstraintData"] = ___init__.btGeneric6DofConstraintData_m_typeConstraintData_get
    if _newclass:m_typeConstraintData = _swig_property(___init__.btGeneric6DofConstraintData_m_typeConstraintData_get, ___init__.btGeneric6DofConstraintData_m_typeConstraintData_set)
    __swig_setmethods__["m_rbAFrame"] = ___init__.btGeneric6DofConstraintData_m_rbAFrame_set
    __swig_getmethods__["m_rbAFrame"] = ___init__.btGeneric6DofConstraintData_m_rbAFrame_get
    if _newclass:m_rbAFrame = _swig_property(___init__.btGeneric6DofConstraintData_m_rbAFrame_get, ___init__.btGeneric6DofConstraintData_m_rbAFrame_set)
    __swig_setmethods__["m_rbBFrame"] = ___init__.btGeneric6DofConstraintData_m_rbBFrame_set
    __swig_getmethods__["m_rbBFrame"] = ___init__.btGeneric6DofConstraintData_m_rbBFrame_get
    if _newclass:m_rbBFrame = _swig_property(___init__.btGeneric6DofConstraintData_m_rbBFrame_get, ___init__.btGeneric6DofConstraintData_m_rbBFrame_set)
    __swig_setmethods__["m_linearUpperLimit"] = ___init__.btGeneric6DofConstraintData_m_linearUpperLimit_set
    __swig_getmethods__["m_linearUpperLimit"] = ___init__.btGeneric6DofConstraintData_m_linearUpperLimit_get
    if _newclass:m_linearUpperLimit = _swig_property(___init__.btGeneric6DofConstraintData_m_linearUpperLimit_get, ___init__.btGeneric6DofConstraintData_m_linearUpperLimit_set)
    __swig_setmethods__["m_linearLowerLimit"] = ___init__.btGeneric6DofConstraintData_m_linearLowerLimit_set
    __swig_getmethods__["m_linearLowerLimit"] = ___init__.btGeneric6DofConstraintData_m_linearLowerLimit_get
    if _newclass:m_linearLowerLimit = _swig_property(___init__.btGeneric6DofConstraintData_m_linearLowerLimit_get, ___init__.btGeneric6DofConstraintData_m_linearLowerLimit_set)
    __swig_setmethods__["m_angularUpperLimit"] = ___init__.btGeneric6DofConstraintData_m_angularUpperLimit_set
    __swig_getmethods__["m_angularUpperLimit"] = ___init__.btGeneric6DofConstraintData_m_angularUpperLimit_get
    if _newclass:m_angularUpperLimit = _swig_property(___init__.btGeneric6DofConstraintData_m_angularUpperLimit_get, ___init__.btGeneric6DofConstraintData_m_angularUpperLimit_set)
    __swig_setmethods__["m_angularLowerLimit"] = ___init__.btGeneric6DofConstraintData_m_angularLowerLimit_set
    __swig_getmethods__["m_angularLowerLimit"] = ___init__.btGeneric6DofConstraintData_m_angularLowerLimit_get
    if _newclass:m_angularLowerLimit = _swig_property(___init__.btGeneric6DofConstraintData_m_angularLowerLimit_get, ___init__.btGeneric6DofConstraintData_m_angularLowerLimit_set)
    __swig_setmethods__["m_useLinearReferenceFrameA"] = ___init__.btGeneric6DofConstraintData_m_useLinearReferenceFrameA_set
    __swig_getmethods__["m_useLinearReferenceFrameA"] = ___init__.btGeneric6DofConstraintData_m_useLinearReferenceFrameA_get
    if _newclass:m_useLinearReferenceFrameA = _swig_property(___init__.btGeneric6DofConstraintData_m_useLinearReferenceFrameA_get, ___init__.btGeneric6DofConstraintData_m_useLinearReferenceFrameA_set)
    __swig_setmethods__["m_useOffsetForConstraintFrame"] = ___init__.btGeneric6DofConstraintData_m_useOffsetForConstraintFrame_set
    __swig_getmethods__["m_useOffsetForConstraintFrame"] = ___init__.btGeneric6DofConstraintData_m_useOffsetForConstraintFrame_get
    if _newclass:m_useOffsetForConstraintFrame = _swig_property(___init__.btGeneric6DofConstraintData_m_useOffsetForConstraintFrame_get, ___init__.btGeneric6DofConstraintData_m_useOffsetForConstraintFrame_set)
    def __init__(self): 
        this = ___init__.new_btGeneric6DofConstraintData()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = ___init__.delete_btGeneric6DofConstraintData
    __del__ = lambda self : None;
btGeneric6DofConstraintData_swigregister = ___init__.btGeneric6DofConstraintData_swigregister
btGeneric6DofConstraintData_swigregister(btGeneric6DofConstraintData)

BT_SLIDER_FLAGS_CFM_DIRLIN = ___init__.BT_SLIDER_FLAGS_CFM_DIRLIN
BT_SLIDER_FLAGS_ERP_DIRLIN = ___init__.BT_SLIDER_FLAGS_ERP_DIRLIN
BT_SLIDER_FLAGS_CFM_DIRANG = ___init__.BT_SLIDER_FLAGS_CFM_DIRANG
BT_SLIDER_FLAGS_ERP_DIRANG = ___init__.BT_SLIDER_FLAGS_ERP_DIRANG
BT_SLIDER_FLAGS_CFM_ORTLIN = ___init__.BT_SLIDER_FLAGS_CFM_ORTLIN
BT_SLIDER_FLAGS_ERP_ORTLIN = ___init__.BT_SLIDER_FLAGS_ERP_ORTLIN
BT_SLIDER_FLAGS_CFM_ORTANG = ___init__.BT_SLIDER_FLAGS_CFM_ORTANG
BT_SLIDER_FLAGS_ERP_ORTANG = ___init__.BT_SLIDER_FLAGS_ERP_ORTANG
BT_SLIDER_FLAGS_CFM_LIMLIN = ___init__.BT_SLIDER_FLAGS_CFM_LIMLIN
BT_SLIDER_FLAGS_ERP_LIMLIN = ___init__.BT_SLIDER_FLAGS_ERP_LIMLIN
BT_SLIDER_FLAGS_CFM_LIMANG = ___init__.BT_SLIDER_FLAGS_CFM_LIMANG
BT_SLIDER_FLAGS_ERP_LIMANG = ___init__.BT_SLIDER_FLAGS_ERP_LIMANG
class btSliderConstraint(btTypedConstraint):
    __swig_setmethods__ = {}
    for _s in [btTypedConstraint]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btSliderConstraint, name, value)
    __swig_getmethods__ = {}
    for _s in [btTypedConstraint]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, btSliderConstraint, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = ___init__.new_btSliderConstraint(*args)
        try: self.this.append(this)
        except: self.this = this
    def getInfo1(self, *args): return ___init__.btSliderConstraint_getInfo1(self, *args)
    def getInfo1NonVirtual(self, *args): return ___init__.btSliderConstraint_getInfo1NonVirtual(self, *args)
    def getInfo2(self, *args): return ___init__.btSliderConstraint_getInfo2(self, *args)
    def getInfo2NonVirtual(self, *args): return ___init__.btSliderConstraint_getInfo2NonVirtual(self, *args)
    def getRigidBodyA(self): return ___init__.btSliderConstraint_getRigidBodyA(self)
    def getRigidBodyB(self): return ___init__.btSliderConstraint_getRigidBodyB(self)
    def getCalculatedTransformA(self): return ___init__.btSliderConstraint_getCalculatedTransformA(self)
    def getCalculatedTransformB(self): return ___init__.btSliderConstraint_getCalculatedTransformB(self)
    def getFrameOffsetA(self, *args): return ___init__.btSliderConstraint_getFrameOffsetA(self, *args)
    def getFrameOffsetB(self, *args): return ___init__.btSliderConstraint_getFrameOffsetB(self, *args)
    def getLowerLinLimit(self): return ___init__.btSliderConstraint_getLowerLinLimit(self)
    def setLowerLinLimit(self, *args): return ___init__.btSliderConstraint_setLowerLinLimit(self, *args)
    def getUpperLinLimit(self): return ___init__.btSliderConstraint_getUpperLinLimit(self)
    def setUpperLinLimit(self, *args): return ___init__.btSliderConstraint_setUpperLinLimit(self, *args)
    def getLowerAngLimit(self): return ___init__.btSliderConstraint_getLowerAngLimit(self)
    def setLowerAngLimit(self, *args): return ___init__.btSliderConstraint_setLowerAngLimit(self, *args)
    def getUpperAngLimit(self): return ___init__.btSliderConstraint_getUpperAngLimit(self)
    def setUpperAngLimit(self, *args): return ___init__.btSliderConstraint_setUpperAngLimit(self, *args)
    def getUseLinearReferenceFrameA(self): return ___init__.btSliderConstraint_getUseLinearReferenceFrameA(self)
    def getSoftnessDirLin(self): return ___init__.btSliderConstraint_getSoftnessDirLin(self)
    def getRestitutionDirLin(self): return ___init__.btSliderConstraint_getRestitutionDirLin(self)
    def getDampingDirLin(self): return ___init__.btSliderConstraint_getDampingDirLin(self)
    def getSoftnessDirAng(self): return ___init__.btSliderConstraint_getSoftnessDirAng(self)
    def getRestitutionDirAng(self): return ___init__.btSliderConstraint_getRestitutionDirAng(self)
    def getDampingDirAng(self): return ___init__.btSliderConstraint_getDampingDirAng(self)
    def getSoftnessLimLin(self): return ___init__.btSliderConstraint_getSoftnessLimLin(self)
    def getRestitutionLimLin(self): return ___init__.btSliderConstraint_getRestitutionLimLin(self)
    def getDampingLimLin(self): return ___init__.btSliderConstraint_getDampingLimLin(self)
    def getSoftnessLimAng(self): return ___init__.btSliderConstraint_getSoftnessLimAng(self)
    def getRestitutionLimAng(self): return ___init__.btSliderConstraint_getRestitutionLimAng(self)
    def getDampingLimAng(self): return ___init__.btSliderConstraint_getDampingLimAng(self)
    def getSoftnessOrthoLin(self): return ___init__.btSliderConstraint_getSoftnessOrthoLin(self)
    def getRestitutionOrthoLin(self): return ___init__.btSliderConstraint_getRestitutionOrthoLin(self)
    def getDampingOrthoLin(self): return ___init__.btSliderConstraint_getDampingOrthoLin(self)
    def getSoftnessOrthoAng(self): return ___init__.btSliderConstraint_getSoftnessOrthoAng(self)
    def getRestitutionOrthoAng(self): return ___init__.btSliderConstraint_getRestitutionOrthoAng(self)
    def getDampingOrthoAng(self): return ___init__.btSliderConstraint_getDampingOrthoAng(self)
    def setSoftnessDirLin(self, *args): return ___init__.btSliderConstraint_setSoftnessDirLin(self, *args)
    def setRestitutionDirLin(self, *args): return ___init__.btSliderConstraint_setRestitutionDirLin(self, *args)
    def setDampingDirLin(self, *args): return ___init__.btSliderConstraint_setDampingDirLin(self, *args)
    def setSoftnessDirAng(self, *args): return ___init__.btSliderConstraint_setSoftnessDirAng(self, *args)
    def setRestitutionDirAng(self, *args): return ___init__.btSliderConstraint_setRestitutionDirAng(self, *args)
    def setDampingDirAng(self, *args): return ___init__.btSliderConstraint_setDampingDirAng(self, *args)
    def setSoftnessLimLin(self, *args): return ___init__.btSliderConstraint_setSoftnessLimLin(self, *args)
    def setRestitutionLimLin(self, *args): return ___init__.btSliderConstraint_setRestitutionLimLin(self, *args)
    def setDampingLimLin(self, *args): return ___init__.btSliderConstraint_setDampingLimLin(self, *args)
    def setSoftnessLimAng(self, *args): return ___init__.btSliderConstraint_setSoftnessLimAng(self, *args)
    def setRestitutionLimAng(self, *args): return ___init__.btSliderConstraint_setRestitutionLimAng(self, *args)
    def setDampingLimAng(self, *args): return ___init__.btSliderConstraint_setDampingLimAng(self, *args)
    def setSoftnessOrthoLin(self, *args): return ___init__.btSliderConstraint_setSoftnessOrthoLin(self, *args)
    def setRestitutionOrthoLin(self, *args): return ___init__.btSliderConstraint_setRestitutionOrthoLin(self, *args)
    def setDampingOrthoLin(self, *args): return ___init__.btSliderConstraint_setDampingOrthoLin(self, *args)
    def setSoftnessOrthoAng(self, *args): return ___init__.btSliderConstraint_setSoftnessOrthoAng(self, *args)
    def setRestitutionOrthoAng(self, *args): return ___init__.btSliderConstraint_setRestitutionOrthoAng(self, *args)
    def setDampingOrthoAng(self, *args): return ___init__.btSliderConstraint_setDampingOrthoAng(self, *args)
    def setPoweredLinMotor(self, *args): return ___init__.btSliderConstraint_setPoweredLinMotor(self, *args)
    def getPoweredLinMotor(self): return ___init__.btSliderConstraint_getPoweredLinMotor(self)
    def setTargetLinMotorVelocity(self, *args): return ___init__.btSliderConstraint_setTargetLinMotorVelocity(self, *args)
    def getTargetLinMotorVelocity(self): return ___init__.btSliderConstraint_getTargetLinMotorVelocity(self)
    def setMaxLinMotorForce(self, *args): return ___init__.btSliderConstraint_setMaxLinMotorForce(self, *args)
    def getMaxLinMotorForce(self): return ___init__.btSliderConstraint_getMaxLinMotorForce(self)
    def setPoweredAngMotor(self, *args): return ___init__.btSliderConstraint_setPoweredAngMotor(self, *args)
    def getPoweredAngMotor(self): return ___init__.btSliderConstraint_getPoweredAngMotor(self)
    def setTargetAngMotorVelocity(self, *args): return ___init__.btSliderConstraint_setTargetAngMotorVelocity(self, *args)
    def getTargetAngMotorVelocity(self): return ___init__.btSliderConstraint_getTargetAngMotorVelocity(self)
    def setMaxAngMotorForce(self, *args): return ___init__.btSliderConstraint_setMaxAngMotorForce(self, *args)
    def getMaxAngMotorForce(self): return ___init__.btSliderConstraint_getMaxAngMotorForce(self)
    def getLinearPos(self): return ___init__.btSliderConstraint_getLinearPos(self)
    def getAngularPos(self): return ___init__.btSliderConstraint_getAngularPos(self)
    def getSolveLinLimit(self): return ___init__.btSliderConstraint_getSolveLinLimit(self)
    def getLinDepth(self): return ___init__.btSliderConstraint_getLinDepth(self)
    def getSolveAngLimit(self): return ___init__.btSliderConstraint_getSolveAngLimit(self)
    def getAngDepth(self): return ___init__.btSliderConstraint_getAngDepth(self)
    def calculateTransforms(self, *args): return ___init__.btSliderConstraint_calculateTransforms(self, *args)
    def testLinLimits(self): return ___init__.btSliderConstraint_testLinLimits(self)
    def testAngLimits(self): return ___init__.btSliderConstraint_testAngLimits(self)
    def getAncorInA(self): return ___init__.btSliderConstraint_getAncorInA(self)
    def getAncorInB(self): return ___init__.btSliderConstraint_getAncorInB(self)
    def getUseFrameOffset(self): return ___init__.btSliderConstraint_getUseFrameOffset(self)
    def setUseFrameOffset(self, *args): return ___init__.btSliderConstraint_setUseFrameOffset(self, *args)
    def setFrames(self, *args): return ___init__.btSliderConstraint_setFrames(self, *args)
    def setParam(self, *args): return ___init__.btSliderConstraint_setParam(self, *args)
    def getParam(self, *args): return ___init__.btSliderConstraint_getParam(self, *args)
    def calculateSerializeBufferSize(self): return ___init__.btSliderConstraint_calculateSerializeBufferSize(self)
    def serialize(self, *args): return ___init__.btSliderConstraint_serialize(self, *args)
    __swig_destroy__ = ___init__.delete_btSliderConstraint
    __del__ = lambda self : None;
btSliderConstraint_swigregister = ___init__.btSliderConstraint_swigregister
btSliderConstraint_swigregister(btSliderConstraint)

class btSliderConstraintData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btSliderConstraintData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btSliderConstraintData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_typeConstraintData"] = ___init__.btSliderConstraintData_m_typeConstraintData_set
    __swig_getmethods__["m_typeConstraintData"] = ___init__.btSliderConstraintData_m_typeConstraintData_get
    if _newclass:m_typeConstraintData = _swig_property(___init__.btSliderConstraintData_m_typeConstraintData_get, ___init__.btSliderConstraintData_m_typeConstraintData_set)
    __swig_setmethods__["m_rbAFrame"] = ___init__.btSliderConstraintData_m_rbAFrame_set
    __swig_getmethods__["m_rbAFrame"] = ___init__.btSliderConstraintData_m_rbAFrame_get
    if _newclass:m_rbAFrame = _swig_property(___init__.btSliderConstraintData_m_rbAFrame_get, ___init__.btSliderConstraintData_m_rbAFrame_set)
    __swig_setmethods__["m_rbBFrame"] = ___init__.btSliderConstraintData_m_rbBFrame_set
    __swig_getmethods__["m_rbBFrame"] = ___init__.btSliderConstraintData_m_rbBFrame_get
    if _newclass:m_rbBFrame = _swig_property(___init__.btSliderConstraintData_m_rbBFrame_get, ___init__.btSliderConstraintData_m_rbBFrame_set)
    __swig_setmethods__["m_linearUpperLimit"] = ___init__.btSliderConstraintData_m_linearUpperLimit_set
    __swig_getmethods__["m_linearUpperLimit"] = ___init__.btSliderConstraintData_m_linearUpperLimit_get
    if _newclass:m_linearUpperLimit = _swig_property(___init__.btSliderConstraintData_m_linearUpperLimit_get, ___init__.btSliderConstraintData_m_linearUpperLimit_set)
    __swig_setmethods__["m_linearLowerLimit"] = ___init__.btSliderConstraintData_m_linearLowerLimit_set
    __swig_getmethods__["m_linearLowerLimit"] = ___init__.btSliderConstraintData_m_linearLowerLimit_get
    if _newclass:m_linearLowerLimit = _swig_property(___init__.btSliderConstraintData_m_linearLowerLimit_get, ___init__.btSliderConstraintData_m_linearLowerLimit_set)
    __swig_setmethods__["m_angularUpperLimit"] = ___init__.btSliderConstraintData_m_angularUpperLimit_set
    __swig_getmethods__["m_angularUpperLimit"] = ___init__.btSliderConstraintData_m_angularUpperLimit_get
    if _newclass:m_angularUpperLimit = _swig_property(___init__.btSliderConstraintData_m_angularUpperLimit_get, ___init__.btSliderConstraintData_m_angularUpperLimit_set)
    __swig_setmethods__["m_angularLowerLimit"] = ___init__.btSliderConstraintData_m_angularLowerLimit_set
    __swig_getmethods__["m_angularLowerLimit"] = ___init__.btSliderConstraintData_m_angularLowerLimit_get
    if _newclass:m_angularLowerLimit = _swig_property(___init__.btSliderConstraintData_m_angularLowerLimit_get, ___init__.btSliderConstraintData_m_angularLowerLimit_set)
    __swig_setmethods__["m_useLinearReferenceFrameA"] = ___init__.btSliderConstraintData_m_useLinearReferenceFrameA_set
    __swig_getmethods__["m_useLinearReferenceFrameA"] = ___init__.btSliderConstraintData_m_useLinearReferenceFrameA_get
    if _newclass:m_useLinearReferenceFrameA = _swig_property(___init__.btSliderConstraintData_m_useLinearReferenceFrameA_get, ___init__.btSliderConstraintData_m_useLinearReferenceFrameA_set)
    __swig_setmethods__["m_useOffsetForConstraintFrame"] = ___init__.btSliderConstraintData_m_useOffsetForConstraintFrame_set
    __swig_getmethods__["m_useOffsetForConstraintFrame"] = ___init__.btSliderConstraintData_m_useOffsetForConstraintFrame_get
    if _newclass:m_useOffsetForConstraintFrame = _swig_property(___init__.btSliderConstraintData_m_useOffsetForConstraintFrame_get, ___init__.btSliderConstraintData_m_useOffsetForConstraintFrame_set)
    def __init__(self): 
        this = ___init__.new_btSliderConstraintData()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = ___init__.delete_btSliderConstraintData
    __del__ = lambda self : None;
btSliderConstraintData_swigregister = ___init__.btSliderConstraintData_swigregister
btSliderConstraintData_swigregister(btSliderConstraintData)

class btGeneric6DofSpringConstraint(btGeneric6DofConstraint):
    __swig_setmethods__ = {}
    for _s in [btGeneric6DofConstraint]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btGeneric6DofSpringConstraint, name, value)
    __swig_getmethods__ = {}
    for _s in [btGeneric6DofConstraint]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, btGeneric6DofSpringConstraint, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = ___init__.new_btGeneric6DofSpringConstraint(*args)
        try: self.this.append(this)
        except: self.this = this
    def enableSpring(self, *args): return ___init__.btGeneric6DofSpringConstraint_enableSpring(self, *args)
    def setStiffness(self, *args): return ___init__.btGeneric6DofSpringConstraint_setStiffness(self, *args)
    def setDamping(self, *args): return ___init__.btGeneric6DofSpringConstraint_setDamping(self, *args)
    def setEquilibriumPoint(self, *args): return ___init__.btGeneric6DofSpringConstraint_setEquilibriumPoint(self, *args)
    def setAxis(self, *args): return ___init__.btGeneric6DofSpringConstraint_setAxis(self, *args)
    def getInfo2(self, *args): return ___init__.btGeneric6DofSpringConstraint_getInfo2(self, *args)
    def calculateSerializeBufferSize(self): return ___init__.btGeneric6DofSpringConstraint_calculateSerializeBufferSize(self)
    def serialize(self, *args): return ___init__.btGeneric6DofSpringConstraint_serialize(self, *args)
    __swig_destroy__ = ___init__.delete_btGeneric6DofSpringConstraint
    __del__ = lambda self : None;
btGeneric6DofSpringConstraint_swigregister = ___init__.btGeneric6DofSpringConstraint_swigregister
btGeneric6DofSpringConstraint_swigregister(btGeneric6DofSpringConstraint)

class btGeneric6DofSpringConstraintData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btGeneric6DofSpringConstraintData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btGeneric6DofSpringConstraintData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_6dofData"] = ___init__.btGeneric6DofSpringConstraintData_m_6dofData_set
    __swig_getmethods__["m_6dofData"] = ___init__.btGeneric6DofSpringConstraintData_m_6dofData_get
    if _newclass:m_6dofData = _swig_property(___init__.btGeneric6DofSpringConstraintData_m_6dofData_get, ___init__.btGeneric6DofSpringConstraintData_m_6dofData_set)
    __swig_setmethods__["m_springEnabled"] = ___init__.btGeneric6DofSpringConstraintData_m_springEnabled_set
    __swig_getmethods__["m_springEnabled"] = ___init__.btGeneric6DofSpringConstraintData_m_springEnabled_get
    if _newclass:m_springEnabled = _swig_property(___init__.btGeneric6DofSpringConstraintData_m_springEnabled_get, ___init__.btGeneric6DofSpringConstraintData_m_springEnabled_set)
    __swig_setmethods__["m_equilibriumPoint"] = ___init__.btGeneric6DofSpringConstraintData_m_equilibriumPoint_set
    __swig_getmethods__["m_equilibriumPoint"] = ___init__.btGeneric6DofSpringConstraintData_m_equilibriumPoint_get
    if _newclass:m_equilibriumPoint = _swig_property(___init__.btGeneric6DofSpringConstraintData_m_equilibriumPoint_get, ___init__.btGeneric6DofSpringConstraintData_m_equilibriumPoint_set)
    __swig_setmethods__["m_springStiffness"] = ___init__.btGeneric6DofSpringConstraintData_m_springStiffness_set
    __swig_getmethods__["m_springStiffness"] = ___init__.btGeneric6DofSpringConstraintData_m_springStiffness_get
    if _newclass:m_springStiffness = _swig_property(___init__.btGeneric6DofSpringConstraintData_m_springStiffness_get, ___init__.btGeneric6DofSpringConstraintData_m_springStiffness_set)
    __swig_setmethods__["m_springDamping"] = ___init__.btGeneric6DofSpringConstraintData_m_springDamping_set
    __swig_getmethods__["m_springDamping"] = ___init__.btGeneric6DofSpringConstraintData_m_springDamping_get
    if _newclass:m_springDamping = _swig_property(___init__.btGeneric6DofSpringConstraintData_m_springDamping_get, ___init__.btGeneric6DofSpringConstraintData_m_springDamping_set)
    def __init__(self): 
        this = ___init__.new_btGeneric6DofSpringConstraintData()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = ___init__.delete_btGeneric6DofSpringConstraintData
    __del__ = lambda self : None;
btGeneric6DofSpringConstraintData_swigregister = ___init__.btGeneric6DofSpringConstraintData_swigregister
btGeneric6DofSpringConstraintData_swigregister(btGeneric6DofSpringConstraintData)

class btUniversalConstraint(btGeneric6DofConstraint):
    __swig_setmethods__ = {}
    for _s in [btGeneric6DofConstraint]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btUniversalConstraint, name, value)
    __swig_getmethods__ = {}
    for _s in [btGeneric6DofConstraint]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, btUniversalConstraint, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = ___init__.new_btUniversalConstraint(*args)
        try: self.this.append(this)
        except: self.this = this
    def getAnchor(self): return ___init__.btUniversalConstraint_getAnchor(self)
    def getAnchor2(self): return ___init__.btUniversalConstraint_getAnchor2(self)
    def getAxis1(self): return ___init__.btUniversalConstraint_getAxis1(self)
    def getAxis2(self): return ___init__.btUniversalConstraint_getAxis2(self)
    def getAngle1(self): return ___init__.btUniversalConstraint_getAngle1(self)
    def getAngle2(self): return ___init__.btUniversalConstraint_getAngle2(self)
    def setUpperLimit(self, *args): return ___init__.btUniversalConstraint_setUpperLimit(self, *args)
    def setLowerLimit(self, *args): return ___init__.btUniversalConstraint_setLowerLimit(self, *args)
    def setAxis(self, *args): return ___init__.btUniversalConstraint_setAxis(self, *args)
    __swig_destroy__ = ___init__.delete_btUniversalConstraint
    __del__ = lambda self : None;
btUniversalConstraint_swigregister = ___init__.btUniversalConstraint_swigregister
btUniversalConstraint_swigregister(btUniversalConstraint)

class btHinge2Constraint(btGeneric6DofSpringConstraint):
    __swig_setmethods__ = {}
    for _s in [btGeneric6DofSpringConstraint]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btHinge2Constraint, name, value)
    __swig_getmethods__ = {}
    for _s in [btGeneric6DofSpringConstraint]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, btHinge2Constraint, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = ___init__.new_btHinge2Constraint(*args)
        try: self.this.append(this)
        except: self.this = this
    def getAnchor(self): return ___init__.btHinge2Constraint_getAnchor(self)
    def getAnchor2(self): return ___init__.btHinge2Constraint_getAnchor2(self)
    def getAxis1(self): return ___init__.btHinge2Constraint_getAxis1(self)
    def getAxis2(self): return ___init__.btHinge2Constraint_getAxis2(self)
    def getAngle1(self): return ___init__.btHinge2Constraint_getAngle1(self)
    def getAngle2(self): return ___init__.btHinge2Constraint_getAngle2(self)
    def setUpperLimit(self, *args): return ___init__.btHinge2Constraint_setUpperLimit(self, *args)
    def setLowerLimit(self, *args): return ___init__.btHinge2Constraint_setLowerLimit(self, *args)
    __swig_destroy__ = ___init__.delete_btHinge2Constraint
    __del__ = lambda self : None;
btHinge2Constraint_swigregister = ___init__.btHinge2Constraint_swigregister
btHinge2Constraint_swigregister(btHinge2Constraint)

class btSequentialImpulseConstraintSolver(btConstraintSolver):
    __swig_setmethods__ = {}
    for _s in [btConstraintSolver]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btSequentialImpulseConstraintSolver, name, value)
    __swig_getmethods__ = {}
    for _s in [btConstraintSolver]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, btSequentialImpulseConstraintSolver, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = ___init__.new_btSequentialImpulseConstraintSolver()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = ___init__.delete_btSequentialImpulseConstraintSolver
    __del__ = lambda self : None;
    def solveGroup(self, *args): return ___init__.btSequentialImpulseConstraintSolver_solveGroup(self, *args)
    def reset(self): return ___init__.btSequentialImpulseConstraintSolver_reset(self)
    def btRand2(self): return ___init__.btSequentialImpulseConstraintSolver_btRand2(self)
    def btRandInt2(self, *args): return ___init__.btSequentialImpulseConstraintSolver_btRandInt2(self, *args)
    def setRandSeed(self, *args): return ___init__.btSequentialImpulseConstraintSolver_setRandSeed(self, *args)
    def getRandSeed(self): return ___init__.btSequentialImpulseConstraintSolver_getRandSeed(self)
btSequentialImpulseConstraintSolver_swigregister = ___init__.btSequentialImpulseConstraintSolver_swigregister
btSequentialImpulseConstraintSolver_swigregister(btSequentialImpulseConstraintSolver)


def vector(*args):
  return ___init__.vector(*args)
vector = ___init__.vector

def CustomConvexShape(*args):
  return ___init__.CustomConvexShape(*args)
CustomConvexShape = ___init__.CustomConvexShape

def BoxShapeWireFrame(*args):
  return ___init__.BoxShapeWireFrame(*args)
BoxShapeWireFrame = ___init__.BoxShapeWireFrame

def Concave(*args):
  return ___init__.Concave(*args)
Concave = ___init__.Concave

def ConcaveWireframe(*args):
  return ___init__.ConcaveWireframe(*args)
ConcaveWireframe = ___init__.ConcaveWireframe

def Sphere(*args):
  return ___init__.Sphere(*args)
Sphere = ___init__.Sphere

def Box(*args):
  return ___init__.Box(*args)
Box = ___init__.Box

def Plane(*args):
  return ___init__.Plane(*args)
Plane = ___init__.Plane

def ConvexPolyhedron(*args):
  return ___init__.ConvexPolyhedron(*args)
ConvexPolyhedron = ___init__.ConvexPolyhedron

def CoordSystem():
  return ___init__.CoordSystem()
CoordSystem = ___init__.CoordSystem

def Shape(*args):
  return ___init__.Shape(*args)
Shape = ___init__.Shape

def MultiSphereShape(*args):
  return ___init__.MultiSphereShape(*args)
MultiSphereShape = ___init__.MultiSphereShape

def UniformScalingShape(*args):
  return ___init__.UniformScalingShape(*args)
UniformScalingShape = ___init__.UniformScalingShape

def CompoundShape(*args):
  return ___init__.CompoundShape(*args)
CompoundShape = ___init__.CompoundShape

def Draw(*args):
  return ___init__.Draw(*args)
Draw = ___init__.Draw

def Shadow(*args):
  return ___init__.Shadow(*args)
Shadow = ___init__.Shadow

def renderwithshadow(*args):
  return ___init__.renderwithshadow(*args)
renderwithshadow = ___init__.renderwithshadow

def render(*args):
  return ___init__.render(*args)
render = ___init__.render
class Profiler(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Profiler, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Profiler, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = ___init__.new_Profiler()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = ___init__.delete_Profiler
    __del__ = lambda self : None;
    def keyboardCallback(self, *args): return ___init__.Profiler_keyboardCallback(self, *args)
    def render(self, *args): return ___init__.Profiler_render(self, *args)
    def showProfileInfo(self, *args): return ___init__.Profiler_showProfileInfo(self, *args)
    def resize(self, *args): return ___init__.Profiler_resize(self, *args)
Profiler_swigregister = ___init__.Profiler_swigregister
Profiler_swigregister(Profiler)

class Texture(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Texture, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Texture, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = ___init__.new_Texture()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = ___init__.delete_Texture
    __del__ = lambda self : None;
    def setup(self): return ___init__.Texture_setup(self)
    def begin(self): return ___init__.Texture_begin(self)
    def end(self): return ___init__.Texture_end(self)
Texture_swigregister = ___init__.Texture_swigregister
Texture_swigregister(Texture)

class btCollisionObjectArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btCollisionObjectArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btCollisionObjectArray, name)
    __repr__ = _swig_repr
    __swig_destroy__ = ___init__.delete_btCollisionObjectArray
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = ___init__.new_btCollisionObjectArray(*args)
        try: self.this.append(this)
        except: self.this = this
    def size(self): return ___init__.btCollisionObjectArray_size(self)
    def at(self, *args): return ___init__.btCollisionObjectArray_at(self, *args)
    def clear(self): return ___init__.btCollisionObjectArray_clear(self)
    def pop_back(self): return ___init__.btCollisionObjectArray_pop_back(self)
    def resize(self, *args): return ___init__.btCollisionObjectArray_resize(self, *args)
    def expandNonInitializing(self): return ___init__.btCollisionObjectArray_expandNonInitializing(self)
    def expand(self, *args): return ___init__.btCollisionObjectArray_expand(self, *args)
    def push_back(self, *args): return ___init__.btCollisionObjectArray_push_back(self, *args)
    def capacity(self): return ___init__.btCollisionObjectArray_capacity(self)
    def reserve(self, *args): return ___init__.btCollisionObjectArray_reserve(self, *args)
    def swap(self, *args): return ___init__.btCollisionObjectArray_swap(self, *args)
    def findBinarySearch(self, *args): return ___init__.btCollisionObjectArray_findBinarySearch(self, *args)
    def findLinearSearch(self, *args): return ___init__.btCollisionObjectArray_findLinearSearch(self, *args)
    def remove(self, *args): return ___init__.btCollisionObjectArray_remove(self, *args)
    def initializeFromBuffer(self, *args): return ___init__.btCollisionObjectArray_initializeFromBuffer(self, *args)
    def copyFromArray(self, *args): return ___init__.btCollisionObjectArray_copyFromArray(self, *args)
    def __iter__(self):
        for i in range(self.size()):
            yield btCollisionObjectPP_deref(self.at(i))

btCollisionObjectArray_swigregister = ___init__.btCollisionObjectArray_swigregister
btCollisionObjectArray_swigregister(btCollisionObjectArray)

class btScalarArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btScalarArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btScalarArray, name)
    __repr__ = _swig_repr
    __swig_destroy__ = ___init__.delete_btScalarArray
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = ___init__.new_btScalarArray(*args)
        try: self.this.append(this)
        except: self.this = this
    def size(self): return ___init__.btScalarArray_size(self)
    def at(self, *args): return ___init__.btScalarArray_at(self, *args)
    def clear(self): return ___init__.btScalarArray_clear(self)
    def pop_back(self): return ___init__.btScalarArray_pop_back(self)
    def resize(self, *args): return ___init__.btScalarArray_resize(self, *args)
    def expandNonInitializing(self): return ___init__.btScalarArray_expandNonInitializing(self)
    def expand(self, *args): return ___init__.btScalarArray_expand(self, *args)
    def push_back(self, *args): return ___init__.btScalarArray_push_back(self, *args)
    def capacity(self): return ___init__.btScalarArray_capacity(self)
    def reserve(self, *args): return ___init__.btScalarArray_reserve(self, *args)
    def swap(self, *args): return ___init__.btScalarArray_swap(self, *args)
    def findBinarySearch(self, *args): return ___init__.btScalarArray_findBinarySearch(self, *args)
    def findLinearSearch(self, *args): return ___init__.btScalarArray_findLinearSearch(self, *args)
    def remove(self, *args): return ___init__.btScalarArray_remove(self, *args)
    def initializeFromBuffer(self, *args): return ___init__.btScalarArray_initializeFromBuffer(self, *args)
    def copyFromArray(self, *args): return ___init__.btScalarArray_copyFromArray(self, *args)
btScalarArray_swigregister = ___init__.btScalarArray_swigregister
btScalarArray_swigregister(btScalarArray)


def btCollisionObjectPP_deref(*args):
  return ___init__.btCollisionObjectPP_deref(*args)
btCollisionObjectPP_deref = ___init__.btCollisionObjectPP_deref
# This file is compatible with both classic and new-style classes.


